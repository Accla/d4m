<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article id="bk_GettStartedGuide">
  <title>BookKeeper overview</title>

  <articleinfo>
    <legalnotice>
      <para>Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License. You may
      obtain a copy of the License at <ulink
      url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink>.</para>

      <para>Unless required by applicable law or agreed to in writing,
      software distributed under the License is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied. See the License for the specific language governing permissions
      and limitations under the License.</para>
    </legalnotice>

    <abstract>
      <para>This guide contains detailed information about using BookKeeper
      for logging. It discusses the basic operations BookKeeper supports, 
      and how to create logs and perform basic read and write operations on these
      logs.</para>
    </abstract>
  </articleinfo>
  <section id="bk_Overview">
    <title>BookKeeper overview</title>

    <para>This document explains basic concepts of BookKeeper. We start by discussing
    the basic elements of BookKeeper, and next we discuss how they work together. 
    </para>
    
    <section id="bk_basicComponents">
    <title>Basic elements</title>
	<para> 
	BookKeeper uses four basic elements:
	</para>
	
	<itemizedlist>
      <listitem>
      <para> 
		<emphasis role="bold">Ledger</emphasis>: A ledger is a sequence of entries, and each entry is a sequence of bytes. Entries are
		written sequentially to a ledger and at most once. Consequently, ledgers have an append-only semantics;
	  </para>
	  </listitem>
	
	  <listitem>
	  <para> 
		<emphasis role="bold">BookKeeper client</emphasis>: A client runs along with a BookKeeper application, and it enables applications
		to execute operations on ledgers, such as creating a ledger and writing to it; 
	  </para>
	  </listitem> 
	
	  <listitem>
	  <para>
		<emphasis role="bold">Bookie</emphasis>: A bookie is a BookKeeper storage server. Bookies store the content of ledgers. For any given
		ledger L, we call an <emphasis>ensemble</emphasis> the group of bookies storing the content of L. For performance, we store on
		each bookie of an ensemble only a fragment of a ledger. That is, we stripe when writing entries to a ledger such that
		each entry is written to sub-group of bookies of the ensemble.
	  </para>
	  </listitem>

	  <listitem>
	  <para> 	
		<emphasis role="bold">Metadata storage service</emphasis>: BookKeeper requires a metadata storage service to store information related 
		to ledgers and available bookies. We currently use ZooKeeper for such a task.     
   	  </para>
   	  </listitem>
    </itemizedlist>
    </section>
    
    <section id="bk_moreDetail">
    <title>In slightly more detail...</title>
    
    <para> BookKeeper implements highly available logs, and it has been designed with write-ahead logging in mind. Besides high availability
    due to the replicated nature of the service, it provides high throughput due to striping. As we write entries in a subset of bookies of an
    ensemble and rotate writes across available quorums, we are able to increase throughput with the number of servers for both reads and writes. 
    Scalability is a property that is possible to achieve in this case due to the use of quorums. Other replication techniques, such as 
    state-machine replication, do not enable such a property. 
    </para> 
    
	<para> An application first creates a ledger before writing to bookies through a local BookKeeper client instance. To 
	create a ledger, an application has to specify which kind of ledger it wants to use: self-verifying or generic. Self-verifying
	includes a digest on every entry, which enables a reduction on the degree of replication. Generic ledgers do not store a digest
	along with entries at the cost of using more bookies.   
	</para>
	
	<para> Upon creating a ledger, a BookKeeper clients writes metadata about the ledger to ZooKeeper. A given client first creates
	a znode named "L" as a child of "/ledger" with the SEQUENCE flag. ZooKeeper consequently assigns a unique sequence number to the 
	node, naming the node "/Lx", where x is the sequence number assigned. We use this sequence number as the identifier of the ledger. 
	This identifier is necessary when opening a ledger. We also store the ensemble composition so that readers know which set of bookies
	of access for a given ledger. 	
	</para>
	
	<para>
	Each ledger currently has a single writer. This writer has to execute a close ledger operation before any other client can read
	from it. If the writer of a ledger does not close a ledger properly because, for example, it has crashed before having the 
	opportunity of closing the ledger, then the next client that tries to open a ledger executes an procedure to recover it. As closing a ledger
	consists essentially of writing the last entry written to a ledger to ZooKeeper, the recovery procedure simply finds the last entry
	written correctly and writes it to ZooKeeper in the form of a close znode as a child of "/Lx", where x is the identifier of the ledger.     
	</para>
	
	<para>
	Note that currently this recovery procedure is executed automatically upon trying to open a ledger and no explicit action is necessary. 
	Although two clients may try to recover a ledger concurrently, only one will succeed, the first one that is able to create the close znode
	for the ledger.
	</para> 
	</section>  
  </section>  
</article>