#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
import master.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TableInfo:

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'recs', None, None, ), # 1
    (2, TType.I64, 'recsInMemory', None, None, ), # 2
    (3, TType.I32, 'tablets', None, None, ), # 3
    (4, TType.I32, 'onlineTablets', None, None, ), # 4
    (5, TType.DOUBLE, 'ingestRate', None, None, ), # 5
    (6, TType.DOUBLE, 'queryRate', None, None, ), # 6
  )

  def __init__(self, d=None):
    self.recs = None
    self.recsInMemory = None
    self.tablets = None
    self.onlineTablets = None
    self.ingestRate = None
    self.queryRate = None
    if isinstance(d, dict):
      if 'recs' in d:
        self.recs = d['recs']
      if 'recsInMemory' in d:
        self.recsInMemory = d['recsInMemory']
      if 'tablets' in d:
        self.tablets = d['tablets']
      if 'onlineTablets' in d:
        self.onlineTablets = d['onlineTablets']
      if 'ingestRate' in d:
        self.ingestRate = d['ingestRate']
      if 'queryRate' in d:
        self.queryRate = d['queryRate']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.recs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.recsInMemory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tablets = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.onlineTablets = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.ingestRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.queryRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TableInfo')
    if self.recs != None:
      oprot.writeFieldBegin('recs', TType.I64, 1)
      oprot.writeI64(self.recs)
      oprot.writeFieldEnd()
    if self.recsInMemory != None:
      oprot.writeFieldBegin('recsInMemory', TType.I64, 2)
      oprot.writeI64(self.recsInMemory)
      oprot.writeFieldEnd()
    if self.tablets != None:
      oprot.writeFieldBegin('tablets', TType.I32, 3)
      oprot.writeI32(self.tablets)
      oprot.writeFieldEnd()
    if self.onlineTablets != None:
      oprot.writeFieldBegin('onlineTablets', TType.I32, 4)
      oprot.writeI32(self.onlineTablets)
      oprot.writeFieldEnd()
    if self.ingestRate != None:
      oprot.writeFieldBegin('ingestRate', TType.DOUBLE, 5)
      oprot.writeDouble(self.ingestRate)
      oprot.writeFieldEnd()
    if self.queryRate != None:
      oprot.writeFieldBegin('queryRate', TType.DOUBLE, 6)
      oprot.writeDouble(self.queryRate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MasterMonitorInfo:

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'tableMap', (TType.STRING,None,TType.STRUCT,(TableInfo, TableInfo.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'tServerInfo', (TType.STRUCT,(master.ttypes.TabletServerStatus, master.ttypes.TabletServerStatus.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'badTServers', (TType.STRING,None,TType.I16,None), None, ), # 3
  )

  def __init__(self, d=None):
    self.tableMap = None
    self.tServerInfo = None
    self.badTServers = None
    if isinstance(d, dict):
      if 'tableMap' in d:
        self.tableMap = d['tableMap']
      if 'tServerInfo' in d:
        self.tServerInfo = d['tServerInfo']
      if 'badTServers' in d:
        self.badTServers = d['badTServers']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.tableMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = TableInfo()
            _val6.read(iprot)
            self.tableMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tServerInfo = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = master.ttypes.TabletServerStatus()
            _elem12.read(iprot)
            self.tServerInfo.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.badTServers = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin() 
          for _i17 in xrange(_size13):
            _key18 = iprot.readString();
            _val19 = iprot.readI16();
            self.badTServers[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MasterMonitorInfo')
    if self.tableMap != None:
      oprot.writeFieldBegin('tableMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.tableMap))
      for kiter20,viter21 in self.tableMap.items():
        oprot.writeString(kiter20)
        viter21.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.tServerInfo != None:
      oprot.writeFieldBegin('tServerInfo', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.tServerInfo))
      for iter22 in self.tServerInfo:
        iter22.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.badTServers != None:
      oprot.writeFieldBegin('badTServers', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.I16, len(self.badTServers))
      for kiter23,viter24 in self.badTServers.items():
        oprot.writeString(kiter23)
        oprot.writeI16(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

