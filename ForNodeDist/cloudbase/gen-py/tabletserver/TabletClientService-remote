#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import TabletClientService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  InitialScan startScan(AuthInfo credentials, KeyExtent extent, Range range,  columns, i32 batchSize,  ssiList,  ssio,  authorizations)'
  print '  ScanResult continueScan(ScanID scanID)'
  print '  void closeScan(ScanID scanID)'
  print '  InitialScan startMultiScan(AuthInfo credentials, ScanBatch batch,  columns,  ssiList,  ssio,  authorizations)'
  print '  ScanResult continueMultiScan(ScanID scanID)'
  print '  ScanBatch closeMultiScan(ScanID scanID)'
  print '  UpdateID startUpdate(AuthInfo credentials)'
  print '  void setUpdateTablet(UpdateID updateID, KeyExtent keyExtent)'
  print '  void applyUpdate(UpdateID updateID, Mutation mutation)'
  print '  UpdateErrors closeUpdate(UpdateID updateID)'
  print '  void update(AuthInfo credentials, KeyExtent keyExtent, Mutation mutation)'
  print '   bulkImport(AuthInfo credentials, TabletFiles files)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TabletClientService.Client(protocol)
transport.open()

if cmd == 'startScan':
  if len(args) != 8:
    print 'startScan requires 8 args'
    sys.exit(1)
  pp.pprint(client.startScan(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'continueScan':
  if len(args) != 1:
    print 'continueScan requires 1 args'
    sys.exit(1)
  pp.pprint(client.continueScan(eval(args[0]),))

elif cmd == 'closeScan':
  if len(args) != 1:
    print 'closeScan requires 1 args'
    sys.exit(1)
  pp.pprint(client.closeScan(eval(args[0]),))

elif cmd == 'startMultiScan':
  if len(args) != 6:
    print 'startMultiScan requires 6 args'
    sys.exit(1)
  pp.pprint(client.startMultiScan(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'continueMultiScan':
  if len(args) != 1:
    print 'continueMultiScan requires 1 args'
    sys.exit(1)
  pp.pprint(client.continueMultiScan(eval(args[0]),))

elif cmd == 'closeMultiScan':
  if len(args) != 1:
    print 'closeMultiScan requires 1 args'
    sys.exit(1)
  pp.pprint(client.closeMultiScan(eval(args[0]),))

elif cmd == 'startUpdate':
  if len(args) != 1:
    print 'startUpdate requires 1 args'
    sys.exit(1)
  pp.pprint(client.startUpdate(eval(args[0]),))

elif cmd == 'setUpdateTablet':
  if len(args) != 2:
    print 'setUpdateTablet requires 2 args'
    sys.exit(1)
  pp.pprint(client.setUpdateTablet(eval(args[0]),eval(args[1]),))

elif cmd == 'applyUpdate':
  if len(args) != 2:
    print 'applyUpdate requires 2 args'
    sys.exit(1)
  pp.pprint(client.applyUpdate(eval(args[0]),eval(args[1]),))

elif cmd == 'closeUpdate':
  if len(args) != 1:
    print 'closeUpdate requires 1 args'
    sys.exit(1)
  pp.pprint(client.closeUpdate(eval(args[0]),))

elif cmd == 'update':
  if len(args) != 3:
    print 'update requires 3 args'
    sys.exit(1)
  pp.pprint(client.update(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bulkImport':
  if len(args) != 2:
    print 'bulkImport requires 2 args'
    sys.exit(1)
  pp.pprint(client.bulkImport(eval(args[0]),eval(args[1]),))

transport.close()
