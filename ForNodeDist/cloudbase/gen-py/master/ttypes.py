#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
import data.ttypes
import security.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Compacting:

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'compacting', None, None, ), # 1
    (2, TType.BOOL, 'queued', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.compacting = None
    self.queued = None
    if isinstance(d, dict):
      if 'compacting' in d:
        self.compacting = d['compacting']
      if 'queued' in d:
        self.queued = d['queued']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.compacting = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.queued = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Compacting')
    if self.compacting != None:
      oprot.writeFieldBegin('compacting', TType.BOOL, 1)
      oprot.writeBool(self.compacting)
      oprot.writeFieldEnd()
    if self.queued != None:
      oprot.writeFieldBegin('queued', TType.BOOL, 2)
      oprot.writeBool(self.queued)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TabletRates:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'key', (data.ttypes.KeyExtent, data.ttypes.KeyExtent.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'tableQueryRate', None, None, ), # 2
    (3, TType.DOUBLE, 'tableIngestRate', None, None, ), # 3
    (4, TType.I64, 'records', None, None, ), # 4
    (5, TType.I64, 'recordsInMemory', None, None, ), # 5
    (6, TType.STRUCT, 'minor', (Compacting, Compacting.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'major', (Compacting, Compacting.thrift_spec), None, ), # 7
  )

  def __init__(self, d=None):
    self.key = None
    self.tableQueryRate = None
    self.tableIngestRate = None
    self.records = None
    self.recordsInMemory = None
    self.minor = None
    self.major = None
    if isinstance(d, dict):
      if 'key' in d:
        self.key = d['key']
      if 'tableQueryRate' in d:
        self.tableQueryRate = d['tableQueryRate']
      if 'tableIngestRate' in d:
        self.tableIngestRate = d['tableIngestRate']
      if 'records' in d:
        self.records = d['records']
      if 'recordsInMemory' in d:
        self.recordsInMemory = d['recordsInMemory']
      if 'minor' in d:
        self.minor = d['minor']
      if 'major' in d:
        self.major = d['major']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.key = data.ttypes.KeyExtent()
          self.key.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.tableQueryRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.tableIngestRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.records = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.recordsInMemory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.minor = Compacting()
          self.minor.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.major = Compacting()
          self.major.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TabletRates')
    if self.key != None:
      oprot.writeFieldBegin('key', TType.STRUCT, 1)
      self.key.write(oprot)
      oprot.writeFieldEnd()
    if self.tableQueryRate != None:
      oprot.writeFieldBegin('tableQueryRate', TType.DOUBLE, 2)
      oprot.writeDouble(self.tableQueryRate)
      oprot.writeFieldEnd()
    if self.tableIngestRate != None:
      oprot.writeFieldBegin('tableIngestRate', TType.DOUBLE, 3)
      oprot.writeDouble(self.tableIngestRate)
      oprot.writeFieldEnd()
    if self.records != None:
      oprot.writeFieldBegin('records', TType.I64, 4)
      oprot.writeI64(self.records)
      oprot.writeFieldEnd()
    if self.recordsInMemory != None:
      oprot.writeFieldBegin('recordsInMemory', TType.I64, 5)
      oprot.writeI64(self.recordsInMemory)
      oprot.writeFieldEnd()
    if self.minor != None:
      oprot.writeFieldBegin('minor', TType.STRUCT, 6)
      self.minor.write(oprot)
      oprot.writeFieldEnd()
    if self.major != None:
      oprot.writeFieldBegin('major', TType.STRUCT, 7)
      self.major.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TabletServerStatus:

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'queryRate', None, None, ), # 1
    (2, TType.DOUBLE, 'ingestRate', None, None, ), # 2
    (3, TType.LIST, 'tabletRates', (TType.STRUCT,(TabletRates, TabletRates.thrift_spec)), None, ), # 3
    (4, TType.I64, 'totalRecords', None, None, ), # 4
    (5, TType.I64, 'lastContact', None, None, ), # 5
    (6, TType.STRING, 'URL', None, None, ), # 6
    (7, TType.STRING, 'name', None, None, ), # 7
    (8, TType.DOUBLE, 'load', None, None, ), # 8
    (9, TType.DOUBLE, 'osLoad', None, None, ), # 9
    (10, TType.I64, 'tabletServerTime', None, None, ), # 10
  )

  def __init__(self, d=None):
    self.queryRate = None
    self.ingestRate = None
    self.tabletRates = None
    self.totalRecords = None
    self.lastContact = None
    self.URL = None
    self.name = None
    self.load = None
    self.osLoad = None
    self.tabletServerTime = None
    if isinstance(d, dict):
      if 'queryRate' in d:
        self.queryRate = d['queryRate']
      if 'ingestRate' in d:
        self.ingestRate = d['ingestRate']
      if 'tabletRates' in d:
        self.tabletRates = d['tabletRates']
      if 'totalRecords' in d:
        self.totalRecords = d['totalRecords']
      if 'lastContact' in d:
        self.lastContact = d['lastContact']
      if 'URL' in d:
        self.URL = d['URL']
      if 'name' in d:
        self.name = d['name']
      if 'load' in d:
        self.load = d['load']
      if 'osLoad' in d:
        self.osLoad = d['osLoad']
      if 'tabletServerTime' in d:
        self.tabletServerTime = d['tabletServerTime']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.queryRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.ingestRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.tabletRates = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TabletRates()
            _elem5.read(iprot)
            self.tabletRates.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.totalRecords = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.lastContact = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.URL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.load = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.osLoad = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.tabletServerTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TabletServerStatus')
    if self.queryRate != None:
      oprot.writeFieldBegin('queryRate', TType.DOUBLE, 1)
      oprot.writeDouble(self.queryRate)
      oprot.writeFieldEnd()
    if self.ingestRate != None:
      oprot.writeFieldBegin('ingestRate', TType.DOUBLE, 2)
      oprot.writeDouble(self.ingestRate)
      oprot.writeFieldEnd()
    if self.tabletRates != None:
      oprot.writeFieldBegin('tabletRates', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.tabletRates))
      for iter6 in self.tabletRates:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.totalRecords != None:
      oprot.writeFieldBegin('totalRecords', TType.I64, 4)
      oprot.writeI64(self.totalRecords)
      oprot.writeFieldEnd()
    if self.lastContact != None:
      oprot.writeFieldBegin('lastContact', TType.I64, 5)
      oprot.writeI64(self.lastContact)
      oprot.writeFieldEnd()
    if self.URL != None:
      oprot.writeFieldBegin('URL', TType.STRING, 6)
      oprot.writeString(self.URL)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 7)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.load != None:
      oprot.writeFieldBegin('load', TType.DOUBLE, 8)
      oprot.writeDouble(self.load)
      oprot.writeFieldEnd()
    if self.osLoad != None:
      oprot.writeFieldBegin('osLoad', TType.DOUBLE, 9)
      oprot.writeDouble(self.osLoad)
      oprot.writeFieldEnd()
    if self.tabletServerTime != None:
      oprot.writeFieldBegin('tabletServerTime', TType.I64, 10)
      oprot.writeI64(self.tabletServerTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeyExtentLocation:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'extent', (data.ttypes.KeyExtent, data.ttypes.KeyExtent.thrift_spec), None, ), # 1
    (2, TType.STRING, 'location', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.extent = None
    self.location = None
    if isinstance(d, dict):
      if 'extent' in d:
        self.extent = d['extent']
      if 'location' in d:
        self.location = d['location']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.extent = data.ttypes.KeyExtent()
          self.extent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeyExtentLocation')
    if self.extent != None:
      oprot.writeFieldBegin('extent', TType.STRUCT, 1)
      self.extent.write(oprot)
      oprot.writeFieldEnd()
    if self.location != None:
      oprot.writeFieldBegin('location', TType.STRING, 2)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TabletSplit:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'oldTablet', (data.ttypes.KeyExtent, data.ttypes.KeyExtent.thrift_spec), None, ), # 1
    (2, TType.LIST, 'keyExtentLocations', (TType.STRUCT,(KeyExtentLocation, KeyExtentLocation.thrift_spec)), None, ), # 2
  )

  def __init__(self, d=None):
    self.oldTablet = None
    self.keyExtentLocations = None
    if isinstance(d, dict):
      if 'oldTablet' in d:
        self.oldTablet = d['oldTablet']
      if 'keyExtentLocations' in d:
        self.keyExtentLocations = d['keyExtentLocations']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.oldTablet = data.ttypes.KeyExtent()
          self.oldTablet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keyExtentLocations = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = KeyExtentLocation()
            _elem12.read(iprot)
            self.keyExtentLocations.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TabletSplit')
    if self.oldTablet != None:
      oprot.writeFieldBegin('oldTablet', TType.STRUCT, 1)
      self.oldTablet.write(oprot)
      oprot.writeFieldEnd()
    if self.keyExtentLocations != None:
      oprot.writeFieldBegin('keyExtentLocations', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.keyExtentLocations))
      for iter13 in self.keyExtentLocations:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TableCreationException(Exception):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table', None, None, ), # 1
    (2, TType.BOOL, 'exists', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.table = None
    self.exists = None
    if isinstance(d, dict):
      if 'table' in d:
        self.table = d['table']
      if 'exists' in d:
        self.exists = d['exists']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.exists = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TableCreationException')
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 1)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.exists != None:
      oprot.writeFieldBegin('exists', TType.BOOL, 2)
      oprot.writeBool(self.exists)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TableDeletionException(Exception):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table', None, None, ), # 1
    (2, TType.BOOL, 'exists', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.table = None
    self.exists = None
    if isinstance(d, dict):
      if 'table' in d:
        self.table = d['table']
      if 'exists' in d:
        self.exists = d['exists']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.exists = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TableDeletionException')
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 1)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.exists != None:
      oprot.writeFieldBegin('exists', TType.BOOL, 2)
      oprot.writeBool(self.exists)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

