#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def createTable(self, credentials, table, splitPoints):
    pass

  def deleteTable(self, credentials, table):
    pass

  def shutdown(self, credentials, stopTabletServers):
    pass

  def ping(self, credentials):
    pass

  def flush(self, credentials, table):
    pass

  def setTableProperty(self, credentials, table, property, value):
    pass

  def removeTableProperty(self, credentials, table, property):
    pass

  def authenticateUser(self, credentials, user, password):
    pass

  def listUsers(self, credentials):
    pass

  def createUser(self, credentials, user, password, authorizations):
    pass

  def dropUser(self, credentials, user):
    pass

  def changePassword(self, credentials, user, password):
    pass

  def changeAuthorizations(self, credentials, user, authorizations):
    pass

  def getUserAuthorizations(self, credentials, user):
    pass

  def hasSystemPermission(self, credentials, user, sysPerm):
    pass

  def hasTablePermission(self, credentials, user, table, tblPerm):
    pass

  def grantSystemPermission(self, credentials, user, permission):
    pass

  def revokeSystemPermission(self, credentials, user, permission):
    pass

  def grantTablePermission(self, credentials, user, table, permission):
    pass

  def revokeTablePermission(self, credentials, user, table, permission):
    pass

  def getRootTabletLocation(self, ):
    pass

  def getInstanceId(self, ):
    pass

  def getTables(self, credentials):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def createTable(self, credentials, table, splitPoints):
    self.send_createTable(credentials, table, splitPoints)
    self.recv_createTable()

  def send_createTable(self, credentials, table, splitPoints):
    self._oprot.writeMessageBegin('createTable', TMessageType.CALL, self._seqid)
    args = createTable_args()
    args.credentials = credentials
    args.table = table
    args.splitPoints = splitPoints
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createTable(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createTable_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    if result.tcek != None:
      raise result.tcek
    return

  def deleteTable(self, credentials, table):
    self.send_deleteTable(credentials, table)
    self.recv_deleteTable()

  def send_deleteTable(self, credentials, table):
    self._oprot.writeMessageBegin('deleteTable', TMessageType.CALL, self._seqid)
    args = deleteTable_args()
    args.credentials = credentials
    args.table = table
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteTable(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteTable_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    if result.tde != None:
      raise result.tde
    return

  def shutdown(self, credentials, stopTabletServers):
    self.send_shutdown(credentials, stopTabletServers)
    self.recv_shutdown()

  def send_shutdown(self, credentials, stopTabletServers):
    self._oprot.writeMessageBegin('shutdown', TMessageType.CALL, self._seqid)
    args = shutdown_args()
    args.credentials = credentials
    args.stopTabletServers = stopTabletServers
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_shutdown(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = shutdown_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def ping(self, credentials):
    self.send_ping(credentials)
    self.recv_ping()

  def send_ping(self, credentials):
    self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.credentials = credentials
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ping(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ping_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def flush(self, credentials, table):
    self.send_flush(credentials, table)
    self.recv_flush()

  def send_flush(self, credentials, table):
    self._oprot.writeMessageBegin('flush', TMessageType.CALL, self._seqid)
    args = flush_args()
    args.credentials = credentials
    args.table = table
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_flush(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = flush_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def setTableProperty(self, credentials, table, property, value):
    self.send_setTableProperty(credentials, table, property, value)
    return self.recv_setTableProperty()

  def send_setTableProperty(self, credentials, table, property, value):
    self._oprot.writeMessageBegin('setTableProperty', TMessageType.CALL, self._seqid)
    args = setTableProperty_args()
    args.credentials = credentials
    args.table = table
    args.property = property
    args.value = value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setTableProperty(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setTableProperty_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setTableProperty failed: unknown result");

  def removeTableProperty(self, credentials, table, property):
    self.send_removeTableProperty(credentials, table, property)
    return self.recv_removeTableProperty()

  def send_removeTableProperty(self, credentials, table, property):
    self._oprot.writeMessageBegin('removeTableProperty', TMessageType.CALL, self._seqid)
    args = removeTableProperty_args()
    args.credentials = credentials
    args.table = table
    args.property = property
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeTableProperty(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeTableProperty_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeTableProperty failed: unknown result");

  def authenticateUser(self, credentials, user, password):
    self.send_authenticateUser(credentials, user, password)
    return self.recv_authenticateUser()

  def send_authenticateUser(self, credentials, user, password):
    self._oprot.writeMessageBegin('authenticateUser', TMessageType.CALL, self._seqid)
    args = authenticateUser_args()
    args.credentials = credentials
    args.user = user
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_authenticateUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = authenticateUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "authenticateUser failed: unknown result");

  def listUsers(self, credentials):
    self.send_listUsers(credentials)
    return self.recv_listUsers()

  def send_listUsers(self, credentials):
    self._oprot.writeMessageBegin('listUsers', TMessageType.CALL, self._seqid)
    args = listUsers_args()
    args.credentials = credentials
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listUsers(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = listUsers_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listUsers failed: unknown result");

  def createUser(self, credentials, user, password, authorizations):
    self.send_createUser(credentials, user, password, authorizations)
    self.recv_createUser()

  def send_createUser(self, credentials, user, password, authorizations):
    self._oprot.writeMessageBegin('createUser', TMessageType.CALL, self._seqid)
    args = createUser_args()
    args.credentials = credentials
    args.user = user
    args.password = password
    args.authorizations = authorizations
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def dropUser(self, credentials, user):
    self.send_dropUser(credentials, user)
    self.recv_dropUser()

  def send_dropUser(self, credentials, user):
    self._oprot.writeMessageBegin('dropUser', TMessageType.CALL, self._seqid)
    args = dropUser_args()
    args.credentials = credentials
    args.user = user
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_dropUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = dropUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def changePassword(self, credentials, user, password):
    self.send_changePassword(credentials, user, password)
    self.recv_changePassword()

  def send_changePassword(self, credentials, user, password):
    self._oprot.writeMessageBegin('changePassword', TMessageType.CALL, self._seqid)
    args = changePassword_args()
    args.credentials = credentials
    args.user = user
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changePassword(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changePassword_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def changeAuthorizations(self, credentials, user, authorizations):
    self.send_changeAuthorizations(credentials, user, authorizations)
    self.recv_changeAuthorizations()

  def send_changeAuthorizations(self, credentials, user, authorizations):
    self._oprot.writeMessageBegin('changeAuthorizations', TMessageType.CALL, self._seqid)
    args = changeAuthorizations_args()
    args.credentials = credentials
    args.user = user
    args.authorizations = authorizations
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeAuthorizations(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changeAuthorizations_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def getUserAuthorizations(self, credentials, user):
    self.send_getUserAuthorizations(credentials, user)
    return self.recv_getUserAuthorizations()

  def send_getUserAuthorizations(self, credentials, user):
    self._oprot.writeMessageBegin('getUserAuthorizations', TMessageType.CALL, self._seqid)
    args = getUserAuthorizations_args()
    args.credentials = credentials
    args.user = user
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserAuthorizations(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserAuthorizations_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserAuthorizations failed: unknown result");

  def hasSystemPermission(self, credentials, user, sysPerm):
    self.send_hasSystemPermission(credentials, user, sysPerm)
    return self.recv_hasSystemPermission()

  def send_hasSystemPermission(self, credentials, user, sysPerm):
    self._oprot.writeMessageBegin('hasSystemPermission', TMessageType.CALL, self._seqid)
    args = hasSystemPermission_args()
    args.credentials = credentials
    args.user = user
    args.sysPerm = sysPerm
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_hasSystemPermission(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = hasSystemPermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "hasSystemPermission failed: unknown result");

  def hasTablePermission(self, credentials, user, table, tblPerm):
    self.send_hasTablePermission(credentials, user, table, tblPerm)
    return self.recv_hasTablePermission()

  def send_hasTablePermission(self, credentials, user, table, tblPerm):
    self._oprot.writeMessageBegin('hasTablePermission', TMessageType.CALL, self._seqid)
    args = hasTablePermission_args()
    args.credentials = credentials
    args.user = user
    args.table = table
    args.tblPerm = tblPerm
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_hasTablePermission(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = hasTablePermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "hasTablePermission failed: unknown result");

  def grantSystemPermission(self, credentials, user, permission):
    self.send_grantSystemPermission(credentials, user, permission)
    self.recv_grantSystemPermission()

  def send_grantSystemPermission(self, credentials, user, permission):
    self._oprot.writeMessageBegin('grantSystemPermission', TMessageType.CALL, self._seqid)
    args = grantSystemPermission_args()
    args.credentials = credentials
    args.user = user
    args.permission = permission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_grantSystemPermission(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = grantSystemPermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def revokeSystemPermission(self, credentials, user, permission):
    self.send_revokeSystemPermission(credentials, user, permission)
    self.recv_revokeSystemPermission()

  def send_revokeSystemPermission(self, credentials, user, permission):
    self._oprot.writeMessageBegin('revokeSystemPermission', TMessageType.CALL, self._seqid)
    args = revokeSystemPermission_args()
    args.credentials = credentials
    args.user = user
    args.permission = permission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revokeSystemPermission(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = revokeSystemPermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def grantTablePermission(self, credentials, user, table, permission):
    self.send_grantTablePermission(credentials, user, table, permission)
    self.recv_grantTablePermission()

  def send_grantTablePermission(self, credentials, user, table, permission):
    self._oprot.writeMessageBegin('grantTablePermission', TMessageType.CALL, self._seqid)
    args = grantTablePermission_args()
    args.credentials = credentials
    args.user = user
    args.table = table
    args.permission = permission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_grantTablePermission(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = grantTablePermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def revokeTablePermission(self, credentials, user, table, permission):
    self.send_revokeTablePermission(credentials, user, table, permission)
    self.recv_revokeTablePermission()

  def send_revokeTablePermission(self, credentials, user, table, permission):
    self._oprot.writeMessageBegin('revokeTablePermission', TMessageType.CALL, self._seqid)
    args = revokeTablePermission_args()
    args.credentials = credentials
    args.user = user
    args.table = table
    args.permission = permission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revokeTablePermission(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = revokeTablePermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.sec != None:
      raise result.sec
    return

  def getRootTabletLocation(self, ):
    self.send_getRootTabletLocation()
    return self.recv_getRootTabletLocation()

  def send_getRootTabletLocation(self, ):
    self._oprot.writeMessageBegin('getRootTabletLocation', TMessageType.CALL, self._seqid)
    args = getRootTabletLocation_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRootTabletLocation(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getRootTabletLocation_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRootTabletLocation failed: unknown result");

  def getInstanceId(self, ):
    self.send_getInstanceId()
    return self.recv_getInstanceId()

  def send_getInstanceId(self, ):
    self._oprot.writeMessageBegin('getInstanceId', TMessageType.CALL, self._seqid)
    args = getInstanceId_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getInstanceId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getInstanceId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getInstanceId failed: unknown result");

  def getTables(self, credentials):
    self.send_getTables(credentials)
    return self.recv_getTables()

  def send_getTables(self, credentials):
    self._oprot.writeMessageBegin('getTables', TMessageType.CALL, self._seqid)
    args = getTables_args()
    args.credentials = credentials
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTables(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTables_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.sec != None:
      raise result.sec
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTables failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["createTable"] = Processor.process_createTable
    self._processMap["deleteTable"] = Processor.process_deleteTable
    self._processMap["shutdown"] = Processor.process_shutdown
    self._processMap["ping"] = Processor.process_ping
    self._processMap["flush"] = Processor.process_flush
    self._processMap["setTableProperty"] = Processor.process_setTableProperty
    self._processMap["removeTableProperty"] = Processor.process_removeTableProperty
    self._processMap["authenticateUser"] = Processor.process_authenticateUser
    self._processMap["listUsers"] = Processor.process_listUsers
    self._processMap["createUser"] = Processor.process_createUser
    self._processMap["dropUser"] = Processor.process_dropUser
    self._processMap["changePassword"] = Processor.process_changePassword
    self._processMap["changeAuthorizations"] = Processor.process_changeAuthorizations
    self._processMap["getUserAuthorizations"] = Processor.process_getUserAuthorizations
    self._processMap["hasSystemPermission"] = Processor.process_hasSystemPermission
    self._processMap["hasTablePermission"] = Processor.process_hasTablePermission
    self._processMap["grantSystemPermission"] = Processor.process_grantSystemPermission
    self._processMap["revokeSystemPermission"] = Processor.process_revokeSystemPermission
    self._processMap["grantTablePermission"] = Processor.process_grantTablePermission
    self._processMap["revokeTablePermission"] = Processor.process_revokeTablePermission
    self._processMap["getRootTabletLocation"] = Processor.process_getRootTabletLocation
    self._processMap["getInstanceId"] = Processor.process_getInstanceId
    self._processMap["getTables"] = Processor.process_getTables

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_createTable(self, seqid, iprot, oprot):
    args = createTable_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createTable_result()
    try:
      self._handler.createTable(args.credentials, args.table, args.splitPoints)
    except ThriftSecurityException, sec:
      result.sec = sec
    except TableCreationException, tcek:
      result.tcek = tcek
    oprot.writeMessageBegin("createTable", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteTable(self, seqid, iprot, oprot):
    args = deleteTable_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteTable_result()
    try:
      self._handler.deleteTable(args.credentials, args.table)
    except ThriftSecurityException, sec:
      result.sec = sec
    except TableDeletionException, tde:
      result.tde = tde
    oprot.writeMessageBegin("deleteTable", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_shutdown(self, seqid, iprot, oprot):
    args = shutdown_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = shutdown_result()
    try:
      self._handler.shutdown(args.credentials, args.stopTabletServers)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("shutdown", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    try:
      self._handler.ping(args.credentials)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_flush(self, seqid, iprot, oprot):
    args = flush_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = flush_result()
    try:
      self._handler.flush(args.credentials, args.table)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("flush", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setTableProperty(self, seqid, iprot, oprot):
    args = setTableProperty_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setTableProperty_result()
    try:
      result.success = self._handler.setTableProperty(args.credentials, args.table, args.property, args.value)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("setTableProperty", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeTableProperty(self, seqid, iprot, oprot):
    args = removeTableProperty_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeTableProperty_result()
    try:
      result.success = self._handler.removeTableProperty(args.credentials, args.table, args.property)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("removeTableProperty", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_authenticateUser(self, seqid, iprot, oprot):
    args = authenticateUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = authenticateUser_result()
    try:
      result.success = self._handler.authenticateUser(args.credentials, args.user, args.password)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("authenticateUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listUsers(self, seqid, iprot, oprot):
    args = listUsers_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listUsers_result()
    try:
      result.success = self._handler.listUsers(args.credentials)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("listUsers", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createUser(self, seqid, iprot, oprot):
    args = createUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createUser_result()
    try:
      self._handler.createUser(args.credentials, args.user, args.password, args.authorizations)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("createUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_dropUser(self, seqid, iprot, oprot):
    args = dropUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = dropUser_result()
    try:
      self._handler.dropUser(args.credentials, args.user)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("dropUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changePassword(self, seqid, iprot, oprot):
    args = changePassword_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changePassword_result()
    try:
      self._handler.changePassword(args.credentials, args.user, args.password)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("changePassword", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeAuthorizations(self, seqid, iprot, oprot):
    args = changeAuthorizations_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeAuthorizations_result()
    try:
      self._handler.changeAuthorizations(args.credentials, args.user, args.authorizations)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("changeAuthorizations", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserAuthorizations(self, seqid, iprot, oprot):
    args = getUserAuthorizations_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserAuthorizations_result()
    try:
      result.success = self._handler.getUserAuthorizations(args.credentials, args.user)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("getUserAuthorizations", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_hasSystemPermission(self, seqid, iprot, oprot):
    args = hasSystemPermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = hasSystemPermission_result()
    try:
      result.success = self._handler.hasSystemPermission(args.credentials, args.user, args.sysPerm)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("hasSystemPermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_hasTablePermission(self, seqid, iprot, oprot):
    args = hasTablePermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = hasTablePermission_result()
    try:
      result.success = self._handler.hasTablePermission(args.credentials, args.user, args.table, args.tblPerm)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("hasTablePermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_grantSystemPermission(self, seqid, iprot, oprot):
    args = grantSystemPermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = grantSystemPermission_result()
    try:
      self._handler.grantSystemPermission(args.credentials, args.user, args.permission)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("grantSystemPermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revokeSystemPermission(self, seqid, iprot, oprot):
    args = revokeSystemPermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revokeSystemPermission_result()
    try:
      self._handler.revokeSystemPermission(args.credentials, args.user, args.permission)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("revokeSystemPermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_grantTablePermission(self, seqid, iprot, oprot):
    args = grantTablePermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = grantTablePermission_result()
    try:
      self._handler.grantTablePermission(args.credentials, args.user, args.table, args.permission)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("grantTablePermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revokeTablePermission(self, seqid, iprot, oprot):
    args = revokeTablePermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revokeTablePermission_result()
    try:
      self._handler.revokeTablePermission(args.credentials, args.user, args.table, args.permission)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("revokeTablePermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRootTabletLocation(self, seqid, iprot, oprot):
    args = getRootTabletLocation_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRootTabletLocation_result()
    result.success = self._handler.getRootTabletLocation()
    oprot.writeMessageBegin("getRootTabletLocation", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getInstanceId(self, seqid, iprot, oprot):
    args = getInstanceId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getInstanceId_result()
    result.success = self._handler.getInstanceId()
    oprot.writeMessageBegin("getInstanceId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTables(self, seqid, iprot, oprot):
    args = getTables_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTables_result()
    try:
      result.success = self._handler.getTables(args.credentials)
    except ThriftSecurityException, sec:
      result.sec = sec
    oprot.writeMessageBegin("getTables", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class createTable_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'table', None, None, ), # 2
    (3, TType.LIST, 'splitPoints', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.table = None
    self.splitPoints = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'table' in d:
        self.table = d['table']
      if 'splitPoints' in d:
        self.splitPoints = d['splitPoints']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.splitPoints = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.splitPoints.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createTable_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 2)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.splitPoints != None:
      oprot.writeFieldBegin('splitPoints', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.splitPoints))
      for iter27 in self.splitPoints:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createTable_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'tcek', (TableCreationException, TableCreationException.thrift_spec), None, ), # 2
  )

  def __init__(self, d=None):
    self.sec = None
    self.tcek = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']
      if 'tcek' in d:
        self.tcek = d['tcek']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.tcek = TableCreationException()
          self.tcek.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createTable_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    if self.tcek != None:
      oprot.writeFieldBegin('tcek', TType.STRUCT, 2)
      self.tcek.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteTable_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'table', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.credentials = None
    self.table = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'table' in d:
        self.table = d['table']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteTable_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 2)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteTable_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'tde', (TableDeletionException, TableDeletionException.thrift_spec), None, ), # 2
  )

  def __init__(self, d=None):
    self.sec = None
    self.tde = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']
      if 'tde' in d:
        self.tde = d['tde']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.tde = TableDeletionException()
          self.tde.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteTable_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    if self.tde != None:
      oprot.writeFieldBegin('tde', TType.STRUCT, 2)
      self.tde.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class shutdown_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.BOOL, 'stopTabletServers', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.credentials = None
    self.stopTabletServers = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'stopTabletServers' in d:
        self.stopTabletServers = d['stopTabletServers']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.stopTabletServers = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('shutdown_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.stopTabletServers != None:
      oprot.writeFieldBegin('stopTabletServers', TType.BOOL, 2)
      oprot.writeBool(self.stopTabletServers)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class shutdown_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('shutdown_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.credentials = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class flush_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'table', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.credentials = None
    self.table = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'table' in d:
        self.table = d['table']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('flush_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 2)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class flush_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('flush_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setTableProperty_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'table', None, None, ), # 2
    (3, TType.STRING, 'property', None, None, ), # 3
    (4, TType.STRING, 'value', None, None, ), # 4
  )

  def __init__(self, d=None):
    self.credentials = None
    self.table = None
    self.property = None
    self.value = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'table' in d:
        self.table = d['table']
      if 'property' in d:
        self.property = d['property']
      if 'value' in d:
        self.value = d['value']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.property = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setTableProperty_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 2)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.property != None:
      oprot.writeFieldBegin('property', TType.STRING, 3)
      oprot.writeString(self.property)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.STRING, 4)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setTableProperty_result:

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setTableProperty_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeTableProperty_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'table', None, None, ), # 2
    (3, TType.STRING, 'property', None, None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.table = None
    self.property = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'table' in d:
        self.table = d['table']
      if 'property' in d:
        self.property = d['property']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.property = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeTableProperty_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 2)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.property != None:
      oprot.writeFieldBegin('property', TType.STRING, 3)
      oprot.writeString(self.property)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeTableProperty_result:

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeTableProperty_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class authenticateUser_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.password = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'password' in d:
        self.password = d['password']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('authenticateUser_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class authenticateUser_result:

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('authenticateUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listUsers_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.credentials = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listUsers_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listUsers_result:

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = set()
          (_etype31, _size28) = iprot.readSetBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString();
            self.success.add(_elem33)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listUsers_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRING, len(self.success))
      for iter34 in self.success:
        oprot.writeString(iter34)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUser_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.SET, 'authorizations', (TType.I16,None), None, ), # 4
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.password = None
    self.authorizations = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'password' in d:
        self.password = d['password']
      if 'authorizations' in d:
        self.authorizations = d['authorizations']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.authorizations = set()
          (_etype38, _size35) = iprot.readSetBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI16();
            self.authorizations.add(_elem40)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUser_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.authorizations != None:
      oprot.writeFieldBegin('authorizations', TType.SET, 4)
      oprot.writeSetBegin(TType.I16, len(self.authorizations))
      for iter41 in self.authorizations:
        oprot.writeI16(iter41)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUser_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUser_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class dropUser_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('dropUser_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class dropUser_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('dropUser_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changePassword_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.password = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'password' in d:
        self.password = d['password']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changePassword_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changePassword_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changePassword_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeAuthorizations_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.SET, 'authorizations', (TType.I16,None), None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.authorizations = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'authorizations' in d:
        self.authorizations = d['authorizations']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.authorizations = set()
          (_etype45, _size42) = iprot.readSetBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readI16();
            self.authorizations.add(_elem47)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeAuthorizations_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.authorizations != None:
      oprot.writeFieldBegin('authorizations', TType.SET, 3)
      oprot.writeSetBegin(TType.I16, len(self.authorizations))
      for iter48 in self.authorizations:
        oprot.writeI16(iter48)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeAuthorizations_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeAuthorizations_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserAuthorizations_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserAuthorizations_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserAuthorizations_result:

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I16,None), None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = set()
          (_etype52, _size49) = iprot.readSetBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readI16();
            self.success.add(_elem54)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserAuthorizations_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I16, len(self.success))
      for iter55 in self.success:
        oprot.writeI16(iter55)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class hasSystemPermission_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.I32, 'sysPerm', None, None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.sysPerm = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'sysPerm' in d:
        self.sysPerm = d['sysPerm']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sysPerm = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('hasSystemPermission_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.sysPerm != None:
      oprot.writeFieldBegin('sysPerm', TType.I32, 3)
      oprot.writeI32(self.sysPerm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class hasSystemPermission_result:

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('hasSystemPermission_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class hasTablePermission_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.STRING, 'table', None, None, ), # 3
    (4, TType.I32, 'tblPerm', None, None, ), # 4
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.table = None
    self.tblPerm = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'table' in d:
        self.table = d['table']
      if 'tblPerm' in d:
        self.tblPerm = d['tblPerm']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.tblPerm = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('hasTablePermission_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 3)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.tblPerm != None:
      oprot.writeFieldBegin('tblPerm', TType.I32, 4)
      oprot.writeI32(self.tblPerm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class hasTablePermission_result:

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('hasTablePermission_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class grantSystemPermission_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.I32, 'permission', None, None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.permission = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'permission' in d:
        self.permission = d['permission']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.permission = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('grantSystemPermission_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.permission != None:
      oprot.writeFieldBegin('permission', TType.I32, 3)
      oprot.writeI32(self.permission)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class grantSystemPermission_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('grantSystemPermission_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revokeSystemPermission_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.I32, 'permission', None, None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.permission = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'permission' in d:
        self.permission = d['permission']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.permission = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revokeSystemPermission_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.permission != None:
      oprot.writeFieldBegin('permission', TType.I32, 3)
      oprot.writeI32(self.permission)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revokeSystemPermission_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revokeSystemPermission_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class grantTablePermission_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.STRING, 'table', None, None, ), # 3
    (4, TType.I32, 'permission', None, None, ), # 4
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.table = None
    self.permission = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'table' in d:
        self.table = d['table']
      if 'permission' in d:
        self.permission = d['permission']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.permission = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('grantTablePermission_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 3)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.permission != None:
      oprot.writeFieldBegin('permission', TType.I32, 4)
      oprot.writeI32(self.permission)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class grantTablePermission_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('grantTablePermission_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revokeTablePermission_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.STRING, 'table', None, None, ), # 3
    (4, TType.I32, 'permission', None, None, ), # 4
  )

  def __init__(self, d=None):
    self.credentials = None
    self.user = None
    self.table = None
    self.permission = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'user' in d:
        self.user = d['user']
      if 'table' in d:
        self.table = d['table']
      if 'permission' in d:
        self.permission = d['permission']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.permission = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revokeTablePermission_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.user != None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 3)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.permission != None:
      oprot.writeFieldBegin('permission', TType.I32, 4)
      oprot.writeI32(self.permission)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revokeTablePermission_result:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.sec = None
    if isinstance(d, dict):
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revokeTablePermission_result')
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRootTabletLocation_args:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRootTabletLocation_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRootTabletLocation_result:

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRootTabletLocation_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getInstanceId_args:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInstanceId_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getInstanceId_result:

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInstanceId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTables_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.credentials = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTables_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTables_result:

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'sec', (security.ttypes.ThriftSecurityException, security.ttypes.ThriftSecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, d=None):
    self.success = None
    self.sec = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']
      if 'sec' in d:
        self.sec = d['sec']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = set()
          (_etype59, _size56) = iprot.readSetBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readString();
            self.success.add(_elem61)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.sec = security.ttypes.ThriftSecurityException()
          self.sec.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTables_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRING, len(self.success))
      for iter62 in self.success:
        oprot.writeString(iter62)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sec != None:
      oprot.writeFieldBegin('sec', TType.STRUCT, 1)
      self.sec.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


