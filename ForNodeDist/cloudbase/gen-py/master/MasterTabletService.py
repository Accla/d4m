#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def reportTabletStatus(self, credentials, serverName, extent, status):
    pass

  def reportTabletUnloaded(self, credentials, extent):
    pass

  def reportTabletList(self, credentials, serverName, extents, clientServiceLocation, monitorServiceLocation, tabletServerTime):
    pass

  def reportSplitExtent(self, credentials, serverName, split):
    pass

  def pong(self, credentials, serverName, status):
    pass

  def reportShutdown(self, credentials, serverName, stage):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def reportTabletStatus(self, credentials, serverName, extent, status):
    self.send_reportTabletStatus(credentials, serverName, extent, status)
    self.recv_reportTabletStatus()

  def send_reportTabletStatus(self, credentials, serverName, extent, status):
    self._oprot.writeMessageBegin('reportTabletStatus', TMessageType.CALL, self._seqid)
    args = reportTabletStatus_args()
    args.credentials = credentials
    args.serverName = serverName
    args.extent = extent
    args.status = status
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reportTabletStatus(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reportTabletStatus_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def reportTabletUnloaded(self, credentials, extent):
    self.send_reportTabletUnloaded(credentials, extent)
    self.recv_reportTabletUnloaded()

  def send_reportTabletUnloaded(self, credentials, extent):
    self._oprot.writeMessageBegin('reportTabletUnloaded', TMessageType.CALL, self._seqid)
    args = reportTabletUnloaded_args()
    args.credentials = credentials
    args.extent = extent
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reportTabletUnloaded(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reportTabletUnloaded_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def reportTabletList(self, credentials, serverName, extents, clientServiceLocation, monitorServiceLocation, tabletServerTime):
    self.send_reportTabletList(credentials, serverName, extents, clientServiceLocation, monitorServiceLocation, tabletServerTime)
    self.recv_reportTabletList()

  def send_reportTabletList(self, credentials, serverName, extents, clientServiceLocation, monitorServiceLocation, tabletServerTime):
    self._oprot.writeMessageBegin('reportTabletList', TMessageType.CALL, self._seqid)
    args = reportTabletList_args()
    args.credentials = credentials
    args.serverName = serverName
    args.extents = extents
    args.clientServiceLocation = clientServiceLocation
    args.monitorServiceLocation = monitorServiceLocation
    args.tabletServerTime = tabletServerTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reportTabletList(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reportTabletList_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def reportSplitExtent(self, credentials, serverName, split):
    self.send_reportSplitExtent(credentials, serverName, split)
    self.recv_reportSplitExtent()

  def send_reportSplitExtent(self, credentials, serverName, split):
    self._oprot.writeMessageBegin('reportSplitExtent', TMessageType.CALL, self._seqid)
    args = reportSplitExtent_args()
    args.credentials = credentials
    args.serverName = serverName
    args.split = split
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reportSplitExtent(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reportSplitExtent_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def pong(self, credentials, serverName, status):
    self.send_pong(credentials, serverName, status)
    self.recv_pong()

  def send_pong(self, credentials, serverName, status):
    self._oprot.writeMessageBegin('pong', TMessageType.CALL, self._seqid)
    args = pong_args()
    args.credentials = credentials
    args.serverName = serverName
    args.status = status
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pong(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = pong_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def reportShutdown(self, credentials, serverName, stage):
    self.send_reportShutdown(credentials, serverName, stage)
    self.recv_reportShutdown()

  def send_reportShutdown(self, credentials, serverName, stage):
    self._oprot.writeMessageBegin('reportShutdown', TMessageType.CALL, self._seqid)
    args = reportShutdown_args()
    args.credentials = credentials
    args.serverName = serverName
    args.stage = stage
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reportShutdown(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reportShutdown_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["reportTabletStatus"] = Processor.process_reportTabletStatus
    self._processMap["reportTabletUnloaded"] = Processor.process_reportTabletUnloaded
    self._processMap["reportTabletList"] = Processor.process_reportTabletList
    self._processMap["reportSplitExtent"] = Processor.process_reportSplitExtent
    self._processMap["pong"] = Processor.process_pong
    self._processMap["reportShutdown"] = Processor.process_reportShutdown

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_reportTabletStatus(self, seqid, iprot, oprot):
    args = reportTabletStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reportTabletStatus_result()
    self._handler.reportTabletStatus(args.credentials, args.serverName, args.extent, args.status)
    oprot.writeMessageBegin("reportTabletStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reportTabletUnloaded(self, seqid, iprot, oprot):
    args = reportTabletUnloaded_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reportTabletUnloaded_result()
    self._handler.reportTabletUnloaded(args.credentials, args.extent)
    oprot.writeMessageBegin("reportTabletUnloaded", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reportTabletList(self, seqid, iprot, oprot):
    args = reportTabletList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reportTabletList_result()
    self._handler.reportTabletList(args.credentials, args.serverName, args.extents, args.clientServiceLocation, args.monitorServiceLocation, args.tabletServerTime)
    oprot.writeMessageBegin("reportTabletList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reportSplitExtent(self, seqid, iprot, oprot):
    args = reportSplitExtent_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reportSplitExtent_result()
    self._handler.reportSplitExtent(args.credentials, args.serverName, args.split)
    oprot.writeMessageBegin("reportSplitExtent", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pong(self, seqid, iprot, oprot):
    args = pong_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pong_result()
    self._handler.pong(args.credentials, args.serverName, args.status)
    oprot.writeMessageBegin("pong", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reportShutdown(self, seqid, iprot, oprot):
    args = reportShutdown_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reportShutdown_result()
    self._handler.reportShutdown(args.credentials, args.serverName, args.stage)
    oprot.writeMessageBegin("reportShutdown", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class reportTabletStatus_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'serverName', None, None, ), # 2
    (3, TType.STRUCT, 'extent', (data.ttypes.KeyExtent, data.ttypes.KeyExtent.thrift_spec), None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
  )

  def __init__(self, d=None):
    self.credentials = None
    self.serverName = None
    self.extent = None
    self.status = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'serverName' in d:
        self.serverName = d['serverName']
      if 'extent' in d:
        self.extent = d['extent']
      if 'status' in d:
        self.status = d['status']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.extent = data.ttypes.KeyExtent()
          self.extent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportTabletStatus_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.serverName != None:
      oprot.writeFieldBegin('serverName', TType.STRING, 2)
      oprot.writeString(self.serverName)
      oprot.writeFieldEnd()
    if self.extent != None:
      oprot.writeFieldBegin('extent', TType.STRUCT, 3)
      self.extent.write(oprot)
      oprot.writeFieldEnd()
    if self.status != None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportTabletStatus_result:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportTabletStatus_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportTabletUnloaded_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'extent', (data.ttypes.KeyExtent, data.ttypes.KeyExtent.thrift_spec), None, ), # 2
  )

  def __init__(self, d=None):
    self.credentials = None
    self.extent = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'extent' in d:
        self.extent = d['extent']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.extent = data.ttypes.KeyExtent()
          self.extent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportTabletUnloaded_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.extent != None:
      oprot.writeFieldBegin('extent', TType.STRUCT, 2)
      self.extent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportTabletUnloaded_result:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportTabletUnloaded_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportTabletList_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'serverName', None, None, ), # 2
    (3, TType.LIST, 'extents', (TType.STRUCT,(data.ttypes.KeyExtent, data.ttypes.KeyExtent.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'clientServiceLocation', None, None, ), # 4
    (5, TType.STRING, 'monitorServiceLocation', None, None, ), # 5
    (6, TType.I64, 'tabletServerTime', None, None, ), # 6
  )

  def __init__(self, d=None):
    self.credentials = None
    self.serverName = None
    self.extents = None
    self.clientServiceLocation = None
    self.monitorServiceLocation = None
    self.tabletServerTime = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'serverName' in d:
        self.serverName = d['serverName']
      if 'extents' in d:
        self.extents = d['extents']
      if 'clientServiceLocation' in d:
        self.clientServiceLocation = d['clientServiceLocation']
      if 'monitorServiceLocation' in d:
        self.monitorServiceLocation = d['monitorServiceLocation']
      if 'tabletServerTime' in d:
        self.tabletServerTime = d['tabletServerTime']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.extents = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = data.ttypes.KeyExtent()
            _elem19.read(iprot)
            self.extents.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.clientServiceLocation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.monitorServiceLocation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.tabletServerTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportTabletList_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.serverName != None:
      oprot.writeFieldBegin('serverName', TType.STRING, 2)
      oprot.writeString(self.serverName)
      oprot.writeFieldEnd()
    if self.extents != None:
      oprot.writeFieldBegin('extents', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.extents))
      for iter20 in self.extents:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.clientServiceLocation != None:
      oprot.writeFieldBegin('clientServiceLocation', TType.STRING, 4)
      oprot.writeString(self.clientServiceLocation)
      oprot.writeFieldEnd()
    if self.monitorServiceLocation != None:
      oprot.writeFieldBegin('monitorServiceLocation', TType.STRING, 5)
      oprot.writeString(self.monitorServiceLocation)
      oprot.writeFieldEnd()
    if self.tabletServerTime != None:
      oprot.writeFieldBegin('tabletServerTime', TType.I64, 6)
      oprot.writeI64(self.tabletServerTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportTabletList_result:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportTabletList_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportSplitExtent_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'serverName', None, None, ), # 2
    (3, TType.STRUCT, 'split', (TabletSplit, TabletSplit.thrift_spec), None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.serverName = None
    self.split = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'serverName' in d:
        self.serverName = d['serverName']
      if 'split' in d:
        self.split = d['split']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.split = TabletSplit()
          self.split.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportSplitExtent_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.serverName != None:
      oprot.writeFieldBegin('serverName', TType.STRING, 2)
      oprot.writeString(self.serverName)
      oprot.writeFieldEnd()
    if self.split != None:
      oprot.writeFieldBegin('split', TType.STRUCT, 3)
      self.split.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportSplitExtent_result:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportSplitExtent_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pong_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'serverName', None, None, ), # 2
    (3, TType.STRUCT, 'status', (TabletServerStatus, TabletServerStatus.thrift_spec), None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.serverName = None
    self.status = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'serverName' in d:
        self.serverName = d['serverName']
      if 'status' in d:
        self.status = d['status']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.status = TabletServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pong_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.serverName != None:
      oprot.writeFieldBegin('serverName', TType.STRING, 2)
      oprot.writeString(self.serverName)
      oprot.writeFieldEnd()
    if self.status != None:
      oprot.writeFieldBegin('status', TType.STRUCT, 3)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pong_result:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pong_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportShutdown_args:

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'credentials', (security.ttypes.AuthInfo, security.ttypes.AuthInfo.thrift_spec), None, ), # 1
    (2, TType.STRING, 'serverName', None, None, ), # 2
    (3, TType.I32, 'stage', None, None, ), # 3
  )

  def __init__(self, d=None):
    self.credentials = None
    self.serverName = None
    self.stage = None
    if isinstance(d, dict):
      if 'credentials' in d:
        self.credentials = d['credentials']
      if 'serverName' in d:
        self.serverName = d['serverName']
      if 'stage' in d:
        self.stage = d['stage']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.credentials = security.ttypes.AuthInfo()
          self.credentials.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.stage = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportShutdown_args')
    if self.credentials != None:
      oprot.writeFieldBegin('credentials', TType.STRUCT, 1)
      self.credentials.write(oprot)
      oprot.writeFieldEnd()
    if self.serverName != None:
      oprot.writeFieldBegin('serverName', TType.STRING, 2)
      oprot.writeString(self.serverName)
      oprot.writeFieldEnd()
    if self.stage != None:
      oprot.writeFieldBegin('stage', TType.I32, 3)
      oprot.writeI32(self.stage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportShutdown_result:

  thrift_spec = (
  )

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportShutdown_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


