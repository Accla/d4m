#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import MasterTabletService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void reportTabletStatus(AuthInfo credentials, string serverName, KeyExtent extent, i32 status)'
  print '  void reportTabletUnloaded(AuthInfo credentials, KeyExtent extent)'
  print '  void reportTabletList(AuthInfo credentials, string serverName,  extents, string clientServiceLocation, string monitorServiceLocation, i64 tabletServerTime)'
  print '  void reportSplitExtent(AuthInfo credentials, string serverName, TabletSplit split)'
  print '  void pong(AuthInfo credentials, string serverName, TabletServerStatus status)'
  print '  void reportShutdown(AuthInfo credentials, string serverName, i32 stage)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MasterTabletService.Client(protocol)
transport.open()

if cmd == 'reportTabletStatus':
  if len(args) != 4:
    print 'reportTabletStatus requires 4 args'
    sys.exit(1)
  pp.pprint(client.reportTabletStatus(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'reportTabletUnloaded':
  if len(args) != 2:
    print 'reportTabletUnloaded requires 2 args'
    sys.exit(1)
  pp.pprint(client.reportTabletUnloaded(eval(args[0]),eval(args[1]),))

elif cmd == 'reportTabletList':
  if len(args) != 6:
    print 'reportTabletList requires 6 args'
    sys.exit(1)
  pp.pprint(client.reportTabletList(eval(args[0]),args[1],eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'reportSplitExtent':
  if len(args) != 3:
    print 'reportSplitExtent requires 3 args'
    sys.exit(1)
  pp.pprint(client.reportSplitExtent(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'pong':
  if len(args) != 3:
    print 'pong requires 3 args'
    sys.exit(1)
  pp.pprint(client.pong(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'reportShutdown':
  if len(args) != 3:
    print 'reportShutdown requires 3 args'
    sys.exit(1)
  pp.pprint(client.reportShutdown(eval(args[0]),args[1],eval(args[2]),))

transport.close()
