#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ClientProxy
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void createTable(string tableName,  splitPoints)'
  print '  void deleteTable(string tableName)'
  print '  void shutdown(bool stopTabletServers)'
  print '  void ping()'
  print '   getTables()'
  print '  bool setTableProperty(string tablename, string property, string value)'
  print '  bool removeTableProperty(string tablename, string property)'
  print '  InitialScan startScan(string tablename, Range range,  columns, i32 batchSize)'
  print '  ScanResult continueScan(ScanID scanID)'
  print '  void closeScan(ScanID scanID)'
  print '  ScanID lookup(string tablename,  ranges,  columns,  authorizations)'
  print '  ScanResult fetch(ScanID scanID)'
  print '  void closeBatch(ScanID scanID)'
  print '  UpdateErrors update(string tableName,  updates)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ClientProxy.Client(protocol)
transport.open()

if cmd == 'createTable':
  if len(args) != 2:
    print 'createTable requires 2 args'
    sys.exit(1)
  pp.pprint(client.createTable(args[0],eval(args[1]),))

elif cmd == 'deleteTable':
  if len(args) != 1:
    print 'deleteTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteTable(args[0],))

elif cmd == 'shutdown':
  if len(args) != 1:
    print 'shutdown requires 1 args'
    sys.exit(1)
  pp.pprint(client.shutdown(eval(args[0]),))

elif cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'getTables':
  if len(args) != 0:
    print 'getTables requires 0 args'
    sys.exit(1)
  pp.pprint(client.getTables())

elif cmd == 'setTableProperty':
  if len(args) != 3:
    print 'setTableProperty requires 3 args'
    sys.exit(1)
  pp.pprint(client.setTableProperty(args[0],args[1],args[2],))

elif cmd == 'removeTableProperty':
  if len(args) != 2:
    print 'removeTableProperty requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeTableProperty(args[0],args[1],))

elif cmd == 'startScan':
  if len(args) != 4:
    print 'startScan requires 4 args'
    sys.exit(1)
  pp.pprint(client.startScan(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'continueScan':
  if len(args) != 1:
    print 'continueScan requires 1 args'
    sys.exit(1)
  pp.pprint(client.continueScan(eval(args[0]),))

elif cmd == 'closeScan':
  if len(args) != 1:
    print 'closeScan requires 1 args'
    sys.exit(1)
  pp.pprint(client.closeScan(eval(args[0]),))

elif cmd == 'lookup':
  if len(args) != 4:
    print 'lookup requires 4 args'
    sys.exit(1)
  pp.pprint(client.lookup(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fetch':
  if len(args) != 1:
    print 'fetch requires 1 args'
    sys.exit(1)
  pp.pprint(client.fetch(eval(args[0]),))

elif cmd == 'closeBatch':
  if len(args) != 1:
    print 'closeBatch requires 1 args'
    sys.exit(1)
  pp.pprint(client.closeBatch(eval(args[0]),))

elif cmd == 'update':
  if len(args) != 2:
    print 'update requires 2 args'
    sys.exit(1)
  pp.pprint(client.update(args[0],eval(args[1]),))

transport.close()
