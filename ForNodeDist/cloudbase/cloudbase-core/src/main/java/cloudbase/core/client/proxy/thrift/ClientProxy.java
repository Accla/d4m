/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.client.proxy.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class ClientProxy {

  public interface Iface {

    public void createTable(String tableName, List<byte[]> splitPoints) throws cloudbase.core.security.thrift.ThriftSecurityException, cloudbase.core.master.thrift.TableCreationException, TException;

    public void deleteTable(String tableName) throws cloudbase.core.security.thrift.ThriftSecurityException, cloudbase.core.master.thrift.TableDeletionException, TException;

    public void shutdown(boolean stopTabletServers) throws TException;

    public void ping() throws cloudbase.core.security.thrift.ThriftSecurityException, TException;

    public Set<String> getTables() throws cloudbase.core.security.thrift.ThriftSecurityException, TException;

    public boolean setTableProperty(String tablename, String property, String value) throws cloudbase.core.security.thrift.ThriftSecurityException, TException;

    public boolean removeTableProperty(String tablename, String property) throws cloudbase.core.security.thrift.ThriftSecurityException, TException;

    public InitialScan startScan(String tablename, Range range, List<Column> columns, int batchSize) throws cloudbase.core.security.thrift.ThriftSecurityException, NoSuchTableException, TException;

    public ScanResult continueScan(long scanID) throws cloudbase.core.tabletserver.thrift.NoSuchScanIDException, NoSuchTableException, TException;

    public void closeScan(long scanID) throws TException;

    public long lookup(String tablename, List<Range> ranges, List<Column> columns, List<Integer> authorizations) throws TException;

    public ScanResult fetch(long scanID) throws cloudbase.core.tabletserver.thrift.NoSuchScanIDException, TException;

    public void closeBatch(long scanID) throws TException;

    public cloudbase.core.data.UpdateErrors update(String tableName, List<Mutation> updates) throws cloudbase.core.security.thrift.ThriftSecurityException, NoSuchTableException, TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void createTable(String tableName, List<byte[]> splitPoints) throws cloudbase.core.security.thrift.ThriftSecurityException, cloudbase.core.master.thrift.TableCreationException, TException
    {
      send_createTable(tableName, splitPoints);
      recv_createTable();
    }

    public void send_createTable(String tableName, List<byte[]> splitPoints) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createTable", TMessageType.CALL, seqid_));
      createTable_args args = new createTable_args();
      args.tableName = tableName;
      args.splitPoints = splitPoints;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_createTable() throws cloudbase.core.security.thrift.ThriftSecurityException, cloudbase.core.master.thrift.TableCreationException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      createTable_result result = new createTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.sec) {
        throw result.sec;
      }
      if (result.__isset.tce) {
        throw result.tce;
      }
      return;
    }

    public void deleteTable(String tableName) throws cloudbase.core.security.thrift.ThriftSecurityException, cloudbase.core.master.thrift.TableDeletionException, TException
    {
      send_deleteTable(tableName);
      recv_deleteTable();
    }

    public void send_deleteTable(String tableName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("deleteTable", TMessageType.CALL, seqid_));
      deleteTable_args args = new deleteTable_args();
      args.tableName = tableName;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_deleteTable() throws cloudbase.core.security.thrift.ThriftSecurityException, cloudbase.core.master.thrift.TableDeletionException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      deleteTable_result result = new deleteTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.sec) {
        throw result.sec;
      }
      if (result.__isset.tde) {
        throw result.tde;
      }
      return;
    }

    public void shutdown(boolean stopTabletServers) throws TException
    {
      send_shutdown(stopTabletServers);
    }

    public void send_shutdown(boolean stopTabletServers) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("shutdown", TMessageType.CALL, seqid_));
      shutdown_args args = new shutdown_args();
      args.stopTabletServers = stopTabletServers;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void ping() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("ping", TMessageType.CALL, seqid_));
      ping_args args = new ping_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_ping() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      ping_result result = new ping_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.sec) {
        throw result.sec;
      }
      return;
    }

    public Set<String> getTables() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      send_getTables();
      return recv_getTables();
    }

    public void send_getTables() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTables", TMessageType.CALL, seqid_));
      getTables_args args = new getTables_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Set<String> recv_getTables() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getTables_result result = new getTables_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTables failed: unknown result");
    }

    public boolean setTableProperty(String tablename, String property, String value) throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      send_setTableProperty(tablename, property, value);
      return recv_setTableProperty();
    }

    public void send_setTableProperty(String tablename, String property, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setTableProperty", TMessageType.CALL, seqid_));
      setTableProperty_args args = new setTableProperty_args();
      args.tablename = tablename;
      args.property = property;
      args.value = value;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_setTableProperty() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      setTableProperty_result result = new setTableProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "setTableProperty failed: unknown result");
    }

    public boolean removeTableProperty(String tablename, String property) throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      send_removeTableProperty(tablename, property);
      return recv_removeTableProperty();
    }

    public void send_removeTableProperty(String tablename, String property) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeTableProperty", TMessageType.CALL, seqid_));
      removeTableProperty_args args = new removeTableProperty_args();
      args.tablename = tablename;
      args.property = property;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_removeTableProperty() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      removeTableProperty_result result = new removeTableProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "removeTableProperty failed: unknown result");
    }

    public InitialScan startScan(String tablename, Range range, List<Column> columns, int batchSize) throws cloudbase.core.security.thrift.ThriftSecurityException, NoSuchTableException, TException
    {
      send_startScan(tablename, range, columns, batchSize);
      return recv_startScan();
    }

    public void send_startScan(String tablename, Range range, List<Column> columns, int batchSize) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startScan", TMessageType.CALL, seqid_));
      startScan_args args = new startScan_args();
      args.tablename = tablename;
      args.range = range;
      args.columns = columns;
      args.batchSize = batchSize;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public InitialScan recv_startScan() throws cloudbase.core.security.thrift.ThriftSecurityException, NoSuchTableException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      startScan_result result = new startScan_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      if (result.__isset.nst) {
        throw result.nst;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "startScan failed: unknown result");
    }

    public ScanResult continueScan(long scanID) throws cloudbase.core.tabletserver.thrift.NoSuchScanIDException, NoSuchTableException, TException
    {
      send_continueScan(scanID);
      return recv_continueScan();
    }

    public void send_continueScan(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("continueScan", TMessageType.CALL, seqid_));
      continueScan_args args = new continueScan_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ScanResult recv_continueScan() throws cloudbase.core.tabletserver.thrift.NoSuchScanIDException, NoSuchTableException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      continueScan_result result = new continueScan_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.nssi) {
        throw result.nssi;
      }
      if (result.__isset.nst) {
        throw result.nst;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "continueScan failed: unknown result");
    }

    public void closeScan(long scanID) throws TException
    {
      send_closeScan(scanID);
    }

    public void send_closeScan(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("closeScan", TMessageType.CALL, seqid_));
      closeScan_args args = new closeScan_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long lookup(String tablename, List<Range> ranges, List<Column> columns, List<Integer> authorizations) throws TException
    {
      send_lookup(tablename, ranges, columns, authorizations);
      return recv_lookup();
    }

    public void send_lookup(String tablename, List<Range> ranges, List<Column> columns, List<Integer> authorizations) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lookup", TMessageType.CALL, seqid_));
      lookup_args args = new lookup_args();
      args.tablename = tablename;
      args.ranges = ranges;
      args.columns = columns;
      args.authorizations = authorizations;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_lookup() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      lookup_result result = new lookup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lookup failed: unknown result");
    }

    public ScanResult fetch(long scanID) throws cloudbase.core.tabletserver.thrift.NoSuchScanIDException, TException
    {
      send_fetch(scanID);
      return recv_fetch();
    }

    public void send_fetch(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetch", TMessageType.CALL, seqid_));
      fetch_args args = new fetch_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ScanResult recv_fetch() throws cloudbase.core.tabletserver.thrift.NoSuchScanIDException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      fetch_result result = new fetch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.nssi) {
        throw result.nssi;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetch failed: unknown result");
    }

    public void closeBatch(long scanID) throws TException
    {
      send_closeBatch(scanID);
    }

    public void send_closeBatch(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("closeBatch", TMessageType.CALL, seqid_));
      closeBatch_args args = new closeBatch_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.UpdateErrors update(String tableName, List<Mutation> updates) throws cloudbase.core.security.thrift.ThriftSecurityException, NoSuchTableException, TException
    {
      send_update(tableName, updates);
      return recv_update();
    }

    public void send_update(String tableName, List<Mutation> updates) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("update", TMessageType.CALL, seqid_));
      update_args args = new update_args();
      args.tableName = tableName;
      args.updates = updates;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.UpdateErrors recv_update() throws cloudbase.core.security.thrift.ThriftSecurityException, NoSuchTableException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      update_result result = new update_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      if (result.__isset.nst) {
        throw result.nst;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("createTable", new createTable());
      processMap_.put("deleteTable", new deleteTable());
      processMap_.put("shutdown", new shutdown());
      processMap_.put("ping", new ping());
      processMap_.put("getTables", new getTables());
      processMap_.put("setTableProperty", new setTableProperty());
      processMap_.put("removeTableProperty", new removeTableProperty());
      processMap_.put("startScan", new startScan());
      processMap_.put("continueScan", new continueScan());
      processMap_.put("closeScan", new closeScan());
      processMap_.put("lookup", new lookup());
      processMap_.put("fetch", new fetch());
      processMap_.put("closeBatch", new closeBatch());
      processMap_.put("update", new update());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class createTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createTable_args args = new createTable_args();
        args.read(iprot);
        iprot.readMessageEnd();
        createTable_result result = new createTable_result();
        try {
          iface_.createTable(args.tableName, args.splitPoints);
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        } catch (cloudbase.core.master.thrift.TableCreationException tce) {
          result.tce = tce;
          result.__isset.tce = true;
        }
        oprot.writeMessageBegin(new TMessage("createTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        deleteTable_args args = new deleteTable_args();
        args.read(iprot);
        iprot.readMessageEnd();
        deleteTable_result result = new deleteTable_result();
        try {
          iface_.deleteTable(args.tableName);
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        } catch (cloudbase.core.master.thrift.TableDeletionException tde) {
          result.tde = tde;
          result.__isset.tde = true;
        }
        oprot.writeMessageBegin(new TMessage("deleteTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class shutdown implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        shutdown_args args = new shutdown_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.shutdown(args.stopTabletServers);
        return;
      }
    }

    private class ping implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        ping_args args = new ping_args();
        args.read(iprot);
        iprot.readMessageEnd();
        ping_result result = new ping_result();
        try {
          iface_.ping();
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        }
        oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTables implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTables_args args = new getTables_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getTables_result result = new getTables_result();
        try {
          result.success = iface_.getTables();
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        }
        oprot.writeMessageBegin(new TMessage("getTables", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setTableProperty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setTableProperty_args args = new setTableProperty_args();
        args.read(iprot);
        iprot.readMessageEnd();
        setTableProperty_result result = new setTableProperty_result();
        try {
          result.success = iface_.setTableProperty(args.tablename, args.property, args.value);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        }
        oprot.writeMessageBegin(new TMessage("setTableProperty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeTableProperty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeTableProperty_args args = new removeTableProperty_args();
        args.read(iprot);
        iprot.readMessageEnd();
        removeTableProperty_result result = new removeTableProperty_result();
        try {
          result.success = iface_.removeTableProperty(args.tablename, args.property);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        }
        oprot.writeMessageBegin(new TMessage("removeTableProperty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class startScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startScan_args args = new startScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        startScan_result result = new startScan_result();
        try {
          result.success = iface_.startScan(args.tablename, args.range, args.columns, args.batchSize);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        } catch (NoSuchTableException nst) {
          result.nst = nst;
          result.__isset.nst = true;
        }
        oprot.writeMessageBegin(new TMessage("startScan", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class continueScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        continueScan_args args = new continueScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        continueScan_result result = new continueScan_result();
        try {
          result.success = iface_.continueScan(args.scanID);
          result.__isset.success = true;
        } catch (cloudbase.core.tabletserver.thrift.NoSuchScanIDException nssi) {
          result.nssi = nssi;
          result.__isset.nssi = true;
        } catch (NoSuchTableException nst) {
          result.nst = nst;
          result.__isset.nst = true;
        }
        oprot.writeMessageBegin(new TMessage("continueScan", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class closeScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        closeScan_args args = new closeScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.closeScan(args.scanID);
        return;
      }
    }

    private class lookup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lookup_args args = new lookup_args();
        args.read(iprot);
        iprot.readMessageEnd();
        lookup_result result = new lookup_result();
        result.success = iface_.lookup(args.tablename, args.ranges, args.columns, args.authorizations);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("lookup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetch_args args = new fetch_args();
        args.read(iprot);
        iprot.readMessageEnd();
        fetch_result result = new fetch_result();
        try {
          result.success = iface_.fetch(args.scanID);
          result.__isset.success = true;
        } catch (cloudbase.core.tabletserver.thrift.NoSuchScanIDException nssi) {
          result.nssi = nssi;
          result.__isset.nssi = true;
        }
        oprot.writeMessageBegin(new TMessage("fetch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class closeBatch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        closeBatch_args args = new closeBatch_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.closeBatch(args.scanID);
        return;
      }
    }

    private class update implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        update_args args = new update_args();
        args.read(iprot);
        iprot.readMessageEnd();
        update_result result = new update_result();
        try {
          result.success = iface_.update(args.tableName, args.updates);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        } catch (NoSuchTableException nst) {
          result.nst = nst;
          result.__isset.nst = true;
        }
        oprot.writeMessageBegin(new TMessage("update", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class createTable_args implements TBase, java.io.Serializable   {
    public String tableName;
    public List<byte[]> splitPoints;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean tableName = false;
      public boolean splitPoints = false;
    }

    public createTable_args() {
    }

    public createTable_args(
      String tableName,
      List<byte[]> splitPoints)
    {
      this();
      this.tableName = tableName;
      this.__isset.tableName = true;
      this.splitPoints = splitPoints;
      this.__isset.splitPoints = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTable_args)
        return this.equals((createTable_args)that);
      return false;
    }

    public boolean equals(createTable_args that) {
      if (that == null)
        return false;

      boolean this_present_tableName = true && (this.tableName != null);
      boolean that_present_tableName = true && (that.tableName != null);
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_splitPoints = true && (this.splitPoints != null);
      boolean that_present_splitPoints = true && (that.splitPoints != null);
      if (this_present_splitPoints || that_present_splitPoints) {
        if (!(this_present_splitPoints && that_present_splitPoints))
          return false;
        if (!this.splitPoints.equals(that.splitPoints))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
              this.__isset.tableName = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.LIST) {
              {
                TList _list16 = iprot.readListBegin();
                this.splitPoints = new ArrayList<byte[]>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  byte[] _elem18 = null;
                  _elem18 = iprot.readBinary();
                  this.splitPoints.add(_elem18);
                }
                iprot.readListEnd();
              }
              this.__isset.splitPoints = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("createTable_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tableName != null) {
        field.name = "tableName";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.splitPoints != null) {
        field.name = "splitPoints";
        field.type = TType.LIST;
        field.id = 2;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.splitPoints.size()));
          for (byte[] _iter19 : this.splitPoints)          {
            oprot.writeBinary(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createTable_args(");
      sb.append("tableName:");
      sb.append(this.tableName);
      sb.append(",splitPoints:");
      sb.append(this.splitPoints);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class createTable_result implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.ThriftSecurityException sec;
    public cloudbase.core.master.thrift.TableCreationException tce;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean sec = false;
      public boolean tce = false;
    }

    public createTable_result() {
    }

    public createTable_result(
      cloudbase.core.security.thrift.ThriftSecurityException sec,
      cloudbase.core.master.thrift.TableCreationException tce)
    {
      this();
      this.sec = sec;
      this.__isset.sec = true;
      this.tce = tce;
      this.__isset.tce = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTable_result)
        return this.equals((createTable_result)that);
      return false;
    }

    public boolean equals(createTable_result that) {
      if (that == null)
        return false;

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      boolean this_present_tce = true && (this.tce != null);
      boolean that_present_tce = true && (that.tce != null);
      if (this_present_tce || that_present_tce) {
        if (!(this_present_tce && that_present_tce))
          return false;
        if (!this.tce.equals(that.tce))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.tce = new cloudbase.core.master.thrift.TableCreationException();
              this.tce.read(iprot);
              this.__isset.tce = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("createTable_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.tce) {
        if (this.tce != null) {
          field.name = "tce";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.tce.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createTable_result(");
      sb.append("sec:");
      sb.append(this.sec.toString());
      sb.append(",tce:");
      sb.append(this.tce.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class deleteTable_args implements TBase, java.io.Serializable   {
    public String tableName;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean tableName = false;
    }

    public deleteTable_args() {
    }

    public deleteTable_args(
      String tableName)
    {
      this();
      this.tableName = tableName;
      this.__isset.tableName = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTable_args)
        return this.equals((deleteTable_args)that);
      return false;
    }

    public boolean equals(deleteTable_args that) {
      if (that == null)
        return false;

      boolean this_present_tableName = true && (this.tableName != null);
      boolean that_present_tableName = true && (that.tableName != null);
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
              this.__isset.tableName = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("deleteTable_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tableName != null) {
        field.name = "tableName";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTable_args(");
      sb.append("tableName:");
      sb.append(this.tableName);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class deleteTable_result implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.ThriftSecurityException sec;
    public cloudbase.core.master.thrift.TableDeletionException tde;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean sec = false;
      public boolean tde = false;
    }

    public deleteTable_result() {
    }

    public deleteTable_result(
      cloudbase.core.security.thrift.ThriftSecurityException sec,
      cloudbase.core.master.thrift.TableDeletionException tde)
    {
      this();
      this.sec = sec;
      this.__isset.sec = true;
      this.tde = tde;
      this.__isset.tde = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTable_result)
        return this.equals((deleteTable_result)that);
      return false;
    }

    public boolean equals(deleteTable_result that) {
      if (that == null)
        return false;

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      boolean this_present_tde = true && (this.tde != null);
      boolean that_present_tde = true && (that.tde != null);
      if (this_present_tde || that_present_tde) {
        if (!(this_present_tde && that_present_tde))
          return false;
        if (!this.tde.equals(that.tde))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.tde = new cloudbase.core.master.thrift.TableDeletionException();
              this.tde.read(iprot);
              this.__isset.tde = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("deleteTable_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.tde) {
        if (this.tde != null) {
          field.name = "tde";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.tde.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTable_result(");
      sb.append("sec:");
      sb.append(this.sec.toString());
      sb.append(",tde:");
      sb.append(this.tde.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class shutdown_args implements TBase, java.io.Serializable   {
    public boolean stopTabletServers;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean stopTabletServers = false;
    }

    public shutdown_args() {
    }

    public shutdown_args(
      boolean stopTabletServers)
    {
      this();
      this.stopTabletServers = stopTabletServers;
      this.__isset.stopTabletServers = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_args)
        return this.equals((shutdown_args)that);
      return false;
    }

    public boolean equals(shutdown_args that) {
      if (that == null)
        return false;

      boolean this_present_stopTabletServers = true;
      boolean that_present_stopTabletServers = true;
      if (this_present_stopTabletServers || that_present_stopTabletServers) {
        if (!(this_present_stopTabletServers && that_present_stopTabletServers))
          return false;
        if (this.stopTabletServers != that.stopTabletServers)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.BOOL) {
              this.stopTabletServers = iprot.readBool();
              this.__isset.stopTabletServers = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("shutdown_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "stopTabletServers";
      field.type = TType.BOOL;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeBool(this.stopTabletServers);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_args(");
      sb.append("stopTabletServers:");
      sb.append(this.stopTabletServers);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class ping_args implements TBase, java.io.Serializable   {
    public ping_args() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("ping_args");
      oprot.writeStructBegin(struct);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      sb.append(")");
      return sb.toString();
    }

  }

  public static class ping_result implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.ThriftSecurityException sec;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean sec = false;
    }

    public ping_result() {
    }

    public ping_result(
      cloudbase.core.security.thrift.ThriftSecurityException sec)
    {
      this();
      this.sec = sec;
      this.__isset.sec = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("ping_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      sb.append("sec:");
      sb.append(this.sec.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getTables_args implements TBase, java.io.Serializable   {
    public getTables_args() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTables_args)
        return this.equals((getTables_args)that);
      return false;
    }

    public boolean equals(getTables_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getTables_args");
      oprot.writeStructBegin(struct);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getTables_args(");
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getTables_result implements TBase, java.io.Serializable   {
    public Set<String> success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
    }

    public getTables_result() {
    }

    public getTables_result(
      Set<String> success,
      cloudbase.core.security.thrift.ThriftSecurityException sec)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTables_result)
        return this.equals((getTables_result)that);
      return false;
    }

    public boolean equals(getTables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.SET) {
              {
                TSet _set20 = iprot.readSetBegin();
                this.success = new HashSet<String>(2*_set20.size);
                for (int _i21 = 0; _i21 < _set20.size; ++_i21)
                {
                  String _elem22;
                  _elem22 = iprot.readString();
                  this.success.add(_elem22);
                }
                iprot.readSetEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getTables_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.SET;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeSetBegin(new TSet(TType.STRING, this.success.size()));
            for (String _iter23 : this.success)            {
              oprot.writeString(_iter23);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getTables_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class setTableProperty_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String property;
    public String value;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean tablename = false;
      public boolean property = false;
      public boolean value = false;
    }

    public setTableProperty_args() {
    }

    public setTableProperty_args(
      String tablename,
      String property,
      String value)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.property = property;
      this.__isset.property = true;
      this.value = value;
      this.__isset.value = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTableProperty_args)
        return this.equals((setTableProperty_args)that);
      return false;
    }

    public boolean equals(setTableProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_tablename = true && (this.tablename != null);
      boolean that_present_tablename = true && (that.tablename != null);
      if (this_present_tablename || that_present_tablename) {
        if (!(this_present_tablename && that_present_tablename))
          return false;
        if (!this.tablename.equals(that.tablename))
          return false;
      }

      boolean this_present_property = true && (this.property != null);
      boolean that_present_property = true && (that.property != null);
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      boolean this_present_value = true && (this.value != null);
      boolean that_present_value = true && (that.value != null);
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRING) {
              this.property = iprot.readString();
              this.__isset.property = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
              this.__isset.value = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("setTableProperty_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.property != null) {
        field.name = "property";
        field.type = TType.STRING;
        field.id = 2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.property);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        field.name = "value";
        field.type = TType.STRING;
        field.id = 3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setTableProperty_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",property:");
      sb.append(this.property);
      sb.append(",value:");
      sb.append(this.value);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class setTableProperty_result implements TBase, java.io.Serializable   {
    public boolean success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
    }

    public setTableProperty_result() {
    }

    public setTableProperty_result(
      boolean success,
      cloudbase.core.security.thrift.ThriftSecurityException sec)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTableProperty_result)
        return this.equals((setTableProperty_result)that);
      return false;
    }

    public boolean equals(setTableProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("setTableProperty_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.BOOL;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setTableProperty_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class removeTableProperty_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String property;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean tablename = false;
      public boolean property = false;
    }

    public removeTableProperty_args() {
    }

    public removeTableProperty_args(
      String tablename,
      String property)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.property = property;
      this.__isset.property = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTableProperty_args)
        return this.equals((removeTableProperty_args)that);
      return false;
    }

    public boolean equals(removeTableProperty_args that) {
      if (that == null)
        return false;

      boolean this_present_tablename = true && (this.tablename != null);
      boolean that_present_tablename = true && (that.tablename != null);
      if (this_present_tablename || that_present_tablename) {
        if (!(this_present_tablename && that_present_tablename))
          return false;
        if (!this.tablename.equals(that.tablename))
          return false;
      }

      boolean this_present_property = true && (this.property != null);
      boolean that_present_property = true && (that.property != null);
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRING) {
              this.property = iprot.readString();
              this.__isset.property = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("removeTableProperty_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.property != null) {
        field.name = "property";
        field.type = TType.STRING;
        field.id = 2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.property);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("removeTableProperty_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",property:");
      sb.append(this.property);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class removeTableProperty_result implements TBase, java.io.Serializable   {
    public boolean success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
    }

    public removeTableProperty_result() {
    }

    public removeTableProperty_result(
      boolean success,
      cloudbase.core.security.thrift.ThriftSecurityException sec)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTableProperty_result)
        return this.equals((removeTableProperty_result)that);
      return false;
    }

    public boolean equals(removeTableProperty_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("removeTableProperty_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.BOOL;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("removeTableProperty_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class startScan_args implements TBase, java.io.Serializable   {
    public String tablename;
    public Range range;
    public List<Column> columns;
    public int batchSize;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean tablename = false;
      public boolean range = false;
      public boolean columns = false;
      public boolean batchSize = false;
    }

    public startScan_args() {
    }

    public startScan_args(
      String tablename,
      Range range,
      List<Column> columns,
      int batchSize)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.range = range;
      this.__isset.range = true;
      this.columns = columns;
      this.__isset.columns = true;
      this.batchSize = batchSize;
      this.__isset.batchSize = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startScan_args)
        return this.equals((startScan_args)that);
      return false;
    }

    public boolean equals(startScan_args that) {
      if (that == null)
        return false;

      boolean this_present_tablename = true && (this.tablename != null);
      boolean that_present_tablename = true && (that.tablename != null);
      if (this_present_tablename || that_present_tablename) {
        if (!(this_present_tablename && that_present_tablename))
          return false;
        if (!this.tablename.equals(that.tablename))
          return false;
      }

      boolean this_present_range = true && (this.range != null);
      boolean that_present_range = true && (that.range != null);
      if (this_present_range || that_present_range) {
        if (!(this_present_range && that_present_range))
          return false;
        if (!this.range.equals(that.range))
          return false;
      }

      boolean this_present_columns = true && (this.columns != null);
      boolean that_present_columns = true && (that.columns != null);
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (!this.columns.equals(that.columns))
          return false;
      }

      boolean this_present_batchSize = true;
      boolean that_present_batchSize = true;
      if (this_present_batchSize || that_present_batchSize) {
        if (!(this_present_batchSize && that_present_batchSize))
          return false;
        if (this.batchSize != that.batchSize)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.range = new Range();
              this.range.read(iprot);
              this.__isset.range = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.LIST) {
              {
                TList _list24 = iprot.readListBegin();
                this.columns = new ArrayList<Column>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  Column _elem26 = new Column();
                  _elem26 = new Column();
                  _elem26.read(iprot);
                  this.columns.add(_elem26);
                }
                iprot.readListEnd();
              }
              this.__isset.columns = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.I32) {
              this.batchSize = iprot.readI32();
              this.__isset.batchSize = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.range != null) {
        field.name = "range";
        field.type = TType.STRUCT;
        field.id = 2;
        oprot.writeFieldBegin(field);
        this.range.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.columns != null) {
        field.name = "columns";
        field.type = TType.LIST;
        field.id = 3;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
          for (Column _iter27 : this.columns)          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      field.name = "batchSize";
      field.type = TType.I32;
      field.id = 4;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.batchSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startScan_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",range:");
      sb.append(this.range.toString());
      sb.append(",columns:");
      sb.append(this.columns);
      sb.append(",batchSize:");
      sb.append(this.batchSize);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class startScan_result implements TBase, java.io.Serializable   {
    public InitialScan success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;
    public NoSuchTableException nst;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
      public boolean nst = false;
    }

    public startScan_result() {
    }

    public startScan_result(
      InitialScan success,
      cloudbase.core.security.thrift.ThriftSecurityException sec,
      NoSuchTableException nst)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
      this.nst = nst;
      this.__isset.nst = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startScan_result)
        return this.equals((startScan_result)that);
      return false;
    }

    public boolean equals(startScan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      boolean this_present_nst = true && (this.nst != null);
      boolean that_present_nst = true && (that.nst != null);
      if (this_present_nst || that_present_nst) {
        if (!(this_present_nst && that_present_nst))
          return false;
        if (!this.nst.equals(that.nst))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new InitialScan();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.nst = new NoSuchTableException();
              this.nst.read(iprot);
              this.__isset.nst = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startScan_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nst) {
        if (this.nst != null) {
          field.name = "nst";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.nst.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startScan_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(",nst:");
      sb.append(this.nst.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class continueScan_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public continueScan_args() {
    }

    public continueScan_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof continueScan_args)
        return this.equals((continueScan_args)that);
      return false;
    }

    public boolean equals(continueScan_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("continueScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("continueScan_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class continueScan_result implements TBase, java.io.Serializable   {
    public ScanResult success;
    public cloudbase.core.tabletserver.thrift.NoSuchScanIDException nssi;
    public NoSuchTableException nst;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean nssi = false;
      public boolean nst = false;
    }

    public continueScan_result() {
    }

    public continueScan_result(
      ScanResult success,
      cloudbase.core.tabletserver.thrift.NoSuchScanIDException nssi,
      NoSuchTableException nst)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.nssi = nssi;
      this.__isset.nssi = true;
      this.nst = nst;
      this.__isset.nst = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof continueScan_result)
        return this.equals((continueScan_result)that);
      return false;
    }

    public boolean equals(continueScan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nssi = true && (this.nssi != null);
      boolean that_present_nssi = true && (that.nssi != null);
      if (this_present_nssi || that_present_nssi) {
        if (!(this_present_nssi && that_present_nssi))
          return false;
        if (!this.nssi.equals(that.nssi))
          return false;
      }

      boolean this_present_nst = true && (this.nst != null);
      boolean that_present_nst = true && (that.nst != null);
      if (this_present_nst || that_present_nst) {
        if (!(this_present_nst && that_present_nst))
          return false;
        if (!this.nst.equals(that.nst))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new ScanResult();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.nssi = new cloudbase.core.tabletserver.thrift.NoSuchScanIDException();
              this.nssi.read(iprot);
              this.__isset.nssi = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.nst = new NoSuchTableException();
              this.nst.read(iprot);
              this.__isset.nst = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("continueScan_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nssi) {
        if (this.nssi != null) {
          field.name = "nssi";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.nssi.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nst) {
        if (this.nst != null) {
          field.name = "nst";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.nst.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("continueScan_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",nssi:");
      sb.append(this.nssi.toString());
      sb.append(",nst:");
      sb.append(this.nst.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class closeScan_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public closeScan_args() {
    }

    public closeScan_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeScan_args)
        return this.equals((closeScan_args)that);
      return false;
    }

    public boolean equals(closeScan_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("closeScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("closeScan_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class lookup_args implements TBase, java.io.Serializable   {
    public String tablename;
    public List<Range> ranges;
    public List<Column> columns;
    public List<Integer> authorizations;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean tablename = false;
      public boolean ranges = false;
      public boolean columns = false;
      public boolean authorizations = false;
    }

    public lookup_args() {
    }

    public lookup_args(
      String tablename,
      List<Range> ranges,
      List<Column> columns,
      List<Integer> authorizations)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.ranges = ranges;
      this.__isset.ranges = true;
      this.columns = columns;
      this.__isset.columns = true;
      this.authorizations = authorizations;
      this.__isset.authorizations = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookup_args)
        return this.equals((lookup_args)that);
      return false;
    }

    public boolean equals(lookup_args that) {
      if (that == null)
        return false;

      boolean this_present_tablename = true && (this.tablename != null);
      boolean that_present_tablename = true && (that.tablename != null);
      if (this_present_tablename || that_present_tablename) {
        if (!(this_present_tablename && that_present_tablename))
          return false;
        if (!this.tablename.equals(that.tablename))
          return false;
      }

      boolean this_present_ranges = true && (this.ranges != null);
      boolean that_present_ranges = true && (that.ranges != null);
      if (this_present_ranges || that_present_ranges) {
        if (!(this_present_ranges && that_present_ranges))
          return false;
        if (!this.ranges.equals(that.ranges))
          return false;
      }

      boolean this_present_columns = true && (this.columns != null);
      boolean that_present_columns = true && (that.columns != null);
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (!this.columns.equals(that.columns))
          return false;
      }

      boolean this_present_authorizations = true && (this.authorizations != null);
      boolean that_present_authorizations = true && (that.authorizations != null);
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.LIST) {
              {
                TList _list28 = iprot.readListBegin();
                this.ranges = new ArrayList<Range>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  Range _elem30 = new Range();
                  _elem30 = new Range();
                  _elem30.read(iprot);
                  this.ranges.add(_elem30);
                }
                iprot.readListEnd();
              }
              this.__isset.ranges = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.LIST) {
              {
                TList _list31 = iprot.readListBegin();
                this.columns = new ArrayList<Column>(_list31.size);
                for (int _i32 = 0; _i32 < _list31.size; ++_i32)
                {
                  Column _elem33 = new Column();
                  _elem33 = new Column();
                  _elem33.read(iprot);
                  this.columns.add(_elem33);
                }
                iprot.readListEnd();
              }
              this.__isset.columns = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.LIST) {
              {
                TList _list34 = iprot.readListBegin();
                this.authorizations = new ArrayList<Integer>(_list34.size);
                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                {
                  int _elem36 = 0;
                  _elem36 = iprot.readI32();
                  this.authorizations.add(_elem36);
                }
                iprot.readListEnd();
              }
              this.__isset.authorizations = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("lookup_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.ranges != null) {
        field.name = "ranges";
        field.type = TType.LIST;
        field.id = 2;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.ranges.size()));
          for (Range _iter37 : this.ranges)          {
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.columns != null) {
        field.name = "columns";
        field.type = TType.LIST;
        field.id = 3;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
          for (Column _iter38 : this.columns)          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.authorizations != null) {
        field.name = "authorizations";
        field.type = TType.LIST;
        field.id = 4;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.I32, this.authorizations.size()));
          for (int _iter39 : this.authorizations)          {
            oprot.writeI32(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("lookup_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",ranges:");
      sb.append(this.ranges);
      sb.append(",columns:");
      sb.append(this.columns);
      sb.append(",authorizations:");
      sb.append(this.authorizations);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class lookup_result implements TBase, java.io.Serializable   {
    public long success;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public lookup_result() {
    }

    public lookup_result(
      long success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookup_result)
        return this.equals((lookup_result)that);
      return false;
    }

    public boolean equals(lookup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("lookup_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I64;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("lookup_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetch_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public fetch_args() {
    }

    public fetch_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_args)
        return this.equals((fetch_args)that);
      return false;
    }

    public boolean equals(fetch_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetch_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class fetch_result implements TBase, java.io.Serializable   {
    public ScanResult success;
    public cloudbase.core.tabletserver.thrift.NoSuchScanIDException nssi;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean nssi = false;
    }

    public fetch_result() {
    }

    public fetch_result(
      ScanResult success,
      cloudbase.core.tabletserver.thrift.NoSuchScanIDException nssi)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.nssi = nssi;
      this.__isset.nssi = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_result)
        return this.equals((fetch_result)that);
      return false;
    }

    public boolean equals(fetch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nssi = true && (this.nssi != null);
      boolean that_present_nssi = true && (that.nssi != null);
      if (this_present_nssi || that_present_nssi) {
        if (!(this_present_nssi && that_present_nssi))
          return false;
        if (!this.nssi.equals(that.nssi))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new ScanResult();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.nssi = new cloudbase.core.tabletserver.thrift.NoSuchScanIDException();
              this.nssi.read(iprot);
              this.__isset.nssi = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("fetch_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nssi) {
        if (this.nssi != null) {
          field.name = "nssi";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.nssi.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",nssi:");
      sb.append(this.nssi.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class closeBatch_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public closeBatch_args() {
    }

    public closeBatch_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeBatch_args)
        return this.equals((closeBatch_args)that);
      return false;
    }

    public boolean equals(closeBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("closeBatch_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("closeBatch_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class update_args implements TBase, java.io.Serializable   {
    public String tableName;
    public List<Mutation> updates;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean tableName = false;
      public boolean updates = false;
    }

    public update_args() {
    }

    public update_args(
      String tableName,
      List<Mutation> updates)
    {
      this();
      this.tableName = tableName;
      this.__isset.tableName = true;
      this.updates = updates;
      this.__isset.updates = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_tableName = true && (this.tableName != null);
      boolean that_present_tableName = true && (that.tableName != null);
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_updates = true && (this.updates != null);
      boolean that_present_updates = true && (that.updates != null);
      if (this_present_updates || that_present_updates) {
        if (!(this_present_updates && that_present_updates))
          return false;
        if (!this.updates.equals(that.updates))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
              this.__isset.tableName = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.LIST) {
              {
                TList _list40 = iprot.readListBegin();
                this.updates = new ArrayList<Mutation>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  Mutation _elem42 = new Mutation();
                  _elem42 = new Mutation();
                  _elem42.read(iprot);
                  this.updates.add(_elem42);
                }
                iprot.readListEnd();
              }
              this.__isset.updates = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("update_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tableName != null) {
        field.name = "tableName";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.updates != null) {
        field.name = "updates";
        field.type = TType.LIST;
        field.id = 2;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.updates.size()));
          for (Mutation _iter43 : this.updates)          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      sb.append("tableName:");
      sb.append(this.tableName);
      sb.append(",updates:");
      sb.append(this.updates);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class update_result implements TBase, java.io.Serializable   {
    public cloudbase.core.data.UpdateErrors success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;
    public NoSuchTableException nst;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
      public boolean nst = false;
    }

    public update_result() {
    }

    public update_result(
      cloudbase.core.data.UpdateErrors success,
      cloudbase.core.security.thrift.ThriftSecurityException sec,
      NoSuchTableException nst)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
      this.nst = nst;
      this.__isset.nst = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      boolean this_present_nst = true && (this.nst != null);
      boolean that_present_nst = true && (that.nst != null);
      if (this_present_nst || that_present_nst) {
        if (!(this_present_nst && that_present_nst))
          return false;
        if (!this.nst.equals(that.nst))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new cloudbase.core.data.UpdateErrors();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.nst = new NoSuchTableException();
              this.nst.read(iprot);
              this.__isset.nst = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("update_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nst) {
        if (this.nst != null) {
          field.name = "nst";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.nst.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(",nst:");
      sb.append(this.nst.toString());
      sb.append(")");
      return sb.toString();
    }

  }

}
