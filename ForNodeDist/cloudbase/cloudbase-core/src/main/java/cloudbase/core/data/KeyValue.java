/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.data;


import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;

@SuppressWarnings("serial")
public class KeyValue implements TBase, java.io.Serializable {
  public Key key;
  public byte[] value;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean key = false;
    public boolean value = false;
  }

  public KeyValue() {
  }

  public KeyValue(
    Key key,
    byte[] value)
  {
    this();
    this.key = key;
    this.__isset.key = true;
    this.value = value;
    this.__isset.value = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KeyValue)
      return this.equals((KeyValue)that);
    return false;
  }

  public boolean equals(KeyValue that) {
    if (that == null)
      return false;

    boolean this_present_key = true && (this.key != null);
    boolean that_present_key = true && (that.key != null);
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_value = true && (this.value != null);
    boolean that_present_value = true && (that.value != null);
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!java.util.Arrays.equals(this.value, that.value))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRUCT) {
            this.key = new Key();
            this.key.read(iprot);
            this.__isset.key = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.STRING) {
            this.value = iprot.readBinary();
            this.__isset.value = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("KeyValue");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.key != null) {
      field.name = "key";
      field.type = TType.STRUCT;
      field.id = 1;
      oprot.writeFieldBegin(field);
      this.key.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      field.name = "value";
      field.type = TType.STRING;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.value);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("KeyValue(");
    sb.append("key:");
    sb.append(this.key.toString());
    sb.append(",value:");
    sb.append(this.value);
    sb.append(")");
    return sb.toString();
  }

}

