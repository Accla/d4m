/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.data;

import com.facebook.thrift.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings("serial")
public class ConstraintViolationSummary implements TBase, java.io.Serializable {
  public String constrainClass;
  public short violationCode;
  public String violationDescription;
  public long numberOfViolatingMutations;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean constrainClass = false;
    public boolean violationCode = false;
    public boolean violationDescription = false;
    public boolean numberOfViolatingMutations = false;
  }

  public ConstraintViolationSummary() {
  }

  public ConstraintViolationSummary(
    String constrainClass,
    short violationCode,
    String violationDescription,
    long numberOfViolatingMutations)
  {
    this();
    this.constrainClass = constrainClass;
    this.__isset.constrainClass = true;
    this.violationCode = violationCode;
    this.__isset.violationCode = true;
    this.violationDescription = violationDescription;
    this.__isset.violationDescription = true;
    this.numberOfViolatingMutations = numberOfViolatingMutations;
    this.__isset.numberOfViolatingMutations = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConstraintViolationSummary)
      return this.equals((ConstraintViolationSummary)that);
    return false;
  }

  public boolean equals(ConstraintViolationSummary that) {
    if (that == null)
      return false;

    boolean this_present_constrainClass = true && (this.constrainClass != null);
    boolean that_present_constrainClass = true && (that.constrainClass != null);
    if (this_present_constrainClass || that_present_constrainClass) {
      if (!(this_present_constrainClass && that_present_constrainClass))
        return false;
      if (!this.constrainClass.equals(that.constrainClass))
        return false;
    }

    boolean this_present_violationCode = true;
    boolean that_present_violationCode = true;
    if (this_present_violationCode || that_present_violationCode) {
      if (!(this_present_violationCode && that_present_violationCode))
        return false;
      if (this.violationCode != that.violationCode)
        return false;
    }

    boolean this_present_violationDescription = true && (this.violationDescription != null);
    boolean that_present_violationDescription = true && (that.violationDescription != null);
    if (this_present_violationDescription || that_present_violationDescription) {
      if (!(this_present_violationDescription && that_present_violationDescription))
        return false;
      if (!this.violationDescription.equals(that.violationDescription))
        return false;
    }

    boolean this_present_numberOfViolatingMutations = true;
    boolean that_present_numberOfViolatingMutations = true;
    if (this_present_numberOfViolatingMutations || that_present_numberOfViolatingMutations) {
      if (!(this_present_numberOfViolatingMutations && that_present_numberOfViolatingMutations))
        return false;
      if (this.numberOfViolatingMutations != that.numberOfViolatingMutations)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.constrainClass = iprot.readString();
            this.__isset.constrainClass = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.I16) {
            this.violationCode = iprot.readI16();
            this.__isset.violationCode = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.STRING) {
            this.violationDescription = iprot.readString();
            this.__isset.violationDescription = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4:
          if (field.type == TType.I64) {
            this.numberOfViolatingMutations = iprot.readI64();
            this.__isset.numberOfViolatingMutations = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("ConstraintViolationSummary");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.constrainClass != null) {
      field.name = "constrainClass";
      field.type = TType.STRING;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.constrainClass);
      oprot.writeFieldEnd();
    }
    field.name = "violationCode";
    field.type = TType.I16;
    field.id = 2;
    oprot.writeFieldBegin(field);
    oprot.writeI16(this.violationCode);
    oprot.writeFieldEnd();
    if (this.violationDescription != null) {
      field.name = "violationDescription";
      field.type = TType.STRING;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.violationDescription);
      oprot.writeFieldEnd();
    }
    field.name = "numberOfViolatingMutations";
    field.type = TType.I64;
    field.id = 4;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.numberOfViolatingMutations);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("ConstraintViolationSummary(");
    sb.append("constrainClass:");
    sb.append(this.constrainClass);
    sb.append(",violationCode:");
    sb.append(this.violationCode);
    sb.append(",violationDescription:");
    sb.append(this.violationDescription);
    sb.append(",numberOfViolatingMutations:");
    sb.append(this.numberOfViolatingMutations);
    sb.append(")");
    return sb.toString();
  }

}

