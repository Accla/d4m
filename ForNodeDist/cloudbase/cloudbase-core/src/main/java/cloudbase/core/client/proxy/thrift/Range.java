/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.client.proxy.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Range implements TBase, java.io.Serializable {
  public Key start;
  public boolean startInclusive;
  public Key stop;
  public boolean stopInclusive;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean start = false;
    public boolean startInclusive = false;
    public boolean stop = false;
    public boolean stopInclusive = false;
  }

  public Range() {
  }

  public Range(
    Key start,
    boolean startInclusive,
    Key stop,
    boolean stopInclusive)
  {
    this();
    this.start = start;
    this.__isset.start = true;
    this.startInclusive = startInclusive;
    this.__isset.startInclusive = true;
    this.stop = stop;
    this.__isset.stop = true;
    this.stopInclusive = stopInclusive;
    this.__isset.stopInclusive = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Range)
      return this.equals((Range)that);
    return false;
  }

  public boolean equals(Range that) {
    if (that == null)
      return false;

    boolean this_present_start = true && (this.start != null);
    boolean that_present_start = true && (that.start != null);
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (!this.start.equals(that.start))
        return false;
    }

    boolean this_present_startInclusive = true;
    boolean that_present_startInclusive = true;
    if (this_present_startInclusive || that_present_startInclusive) {
      if (!(this_present_startInclusive && that_present_startInclusive))
        return false;
      if (this.startInclusive != that.startInclusive)
        return false;
    }

    boolean this_present_stop = true && (this.stop != null);
    boolean that_present_stop = true && (that.stop != null);
    if (this_present_stop || that_present_stop) {
      if (!(this_present_stop && that_present_stop))
        return false;
      if (!this.stop.equals(that.stop))
        return false;
    }

    boolean this_present_stopInclusive = true;
    boolean that_present_stopInclusive = true;
    if (this_present_stopInclusive || that_present_stopInclusive) {
      if (!(this_present_stopInclusive && that_present_stopInclusive))
        return false;
      if (this.stopInclusive != that.stopInclusive)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRUCT) {
            this.start = new Key();
            this.start.read(iprot);
            this.__isset.start = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.BOOL) {
            this.startInclusive = iprot.readBool();
            this.__isset.startInclusive = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.STRUCT) {
            this.stop = new Key();
            this.stop.read(iprot);
            this.__isset.stop = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4:
          if (field.type == TType.BOOL) {
            this.stopInclusive = iprot.readBool();
            this.__isset.stopInclusive = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("Range");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.start != null) {
      field.name = "start";
      field.type = TType.STRUCT;
      field.id = 1;
      oprot.writeFieldBegin(field);
      this.start.write(oprot);
      oprot.writeFieldEnd();
    }
    field.name = "startInclusive";
    field.type = TType.BOOL;
    field.id = 2;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.startInclusive);
    oprot.writeFieldEnd();
    if (this.stop != null) {
      field.name = "stop";
      field.type = TType.STRUCT;
      field.id = 3;
      oprot.writeFieldBegin(field);
      this.stop.write(oprot);
      oprot.writeFieldEnd();
    }
    field.name = "stopInclusive";
    field.type = TType.BOOL;
    field.id = 4;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.stopInclusive);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("Range(");
    sb.append("start:");
    sb.append(this.start.toString());
    sb.append(",startInclusive:");
    sb.append(this.startInclusive);
    sb.append(",stop:");
    sb.append(this.stop.toString());
    sb.append(",stopInclusive:");
    sb.append(this.stopInclusive);
    sb.append(")");
    return sb.toString();
  }

}

