/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.master.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Compacting implements TBase, java.io.Serializable {
  public boolean compacting;
  public boolean queued;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean compacting = false;
    public boolean queued = false;
  }

  public Compacting() {
  }

  public Compacting(
    boolean compacting,
    boolean queued)
  {
    this();
    this.compacting = compacting;
    this.__isset.compacting = true;
    this.queued = queued;
    this.__isset.queued = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Compacting)
      return this.equals((Compacting)that);
    return false;
  }

  public boolean equals(Compacting that) {
    if (that == null)
      return false;

    boolean this_present_compacting = true;
    boolean that_present_compacting = true;
    if (this_present_compacting || that_present_compacting) {
      if (!(this_present_compacting && that_present_compacting))
        return false;
      if (this.compacting != that.compacting)
        return false;
    }

    boolean this_present_queued = true;
    boolean that_present_queued = true;
    if (this_present_queued || that_present_queued) {
      if (!(this_present_queued && that_present_queued))
        return false;
      if (this.queued != that.queued)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.BOOL) {
            this.compacting = iprot.readBool();
            this.__isset.compacting = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.BOOL) {
            this.queued = iprot.readBool();
            this.__isset.queued = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("Compacting");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "compacting";
    field.type = TType.BOOL;
    field.id = 1;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.compacting);
    oprot.writeFieldEnd();
    field.name = "queued";
    field.type = TType.BOOL;
    field.id = 2;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.queued);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("Compacting(");
    sb.append("compacting:");
    sb.append(this.compacting);
    sb.append(",queued:");
    sb.append(this.queued);
    sb.append(")");
    return sb.toString();
  }

}

