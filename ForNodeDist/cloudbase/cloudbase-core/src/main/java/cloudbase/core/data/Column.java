/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.data;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.IntWritable.Comparator;

import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;

@SuppressWarnings("serial")
public class Column implements TBase, java.io.Serializable, java.lang.Comparable<Column>, Writable {
	
	/**
	 * This code is hand-written, along with the Comparable interface.
	 */
	static final private byte[] EMPTY = new byte[0];
	
	static private int compareBytes(byte[] a, byte[] b) {
		if (a == null) a = EMPTY;
		if (b == null) b = EMPTY;
		return Comparator.compareBytes(a, 0, a.length, b, 0, b.length);
	}
	
	public int compareTo(Column that) {
		int result;
		result = compareBytes(this.columnFamily, that.columnFamily);
		if (result != 0)
			return result;
		result = compareBytes(this.columnQualifier, that.columnQualifier);
		if (result != 0)
			return result;
		return compareBytes(this.columnVisibility, that.columnVisibility);
	}
	
	  public void readFields(DataInput in) throws IOException {
		  if(in.readBoolean()){
			  int len = in.readInt();
			  columnFamily = new byte[len];
			  in.readFully(columnFamily);
		  }else{
			  columnFamily = null;  
		  }
		  
		  if(in.readBoolean()){
			  int len = in.readInt();
			  columnQualifier = new byte[len];
			  in.readFully(columnQualifier);
		  }else{
			  columnQualifier = null;  
		  }
		  
		  if(in.readBoolean()){
			  int len = in.readInt();
			  columnVisibility = new byte[len];
			  in.readFully(columnVisibility);
		  }else{
			  columnVisibility = null;  
		  }
	  }

	  @Override
	  public void write(DataOutput out) throws IOException {
		  if(columnFamily == null){
			  out.writeBoolean(false);
		  }else{
			  out.writeBoolean(true);
			  out.writeInt(columnFamily.length);
			  out.write(columnFamily);
		  }

		  if(columnQualifier == null){
			  out.writeBoolean(false);
		  }else{
			  out.writeBoolean(true);
			  out.writeInt(columnQualifier.length);
			  out.write(columnQualifier);
		  }
		  
		  if(columnVisibility == null){
			  out.writeBoolean(false);
		  }else{
			  out.writeBoolean(true);
			  out.writeInt(columnVisibility.length);
			  out.write(columnVisibility);
		  }
	  }
	
	/**
	 * End of hand-written code.
	 */
	
  public byte[] columnFamily;
  public byte[] columnQualifier;
  public byte[] columnVisibility;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean columnFamily = false;
    public boolean columnQualifier = false;
    public boolean columnVisibility = false;
  }

  public Column() {
  }

  public Column(
    byte[] columnFamily,
    byte[] columnQualifier,
    byte[] columnVisibility)
  {
    this();
    this.columnFamily = columnFamily;
    this.__isset.columnFamily = true;
    this.columnQualifier = columnQualifier;
    this.__isset.columnQualifier = true;
    this.columnVisibility = columnVisibility;
    this.__isset.columnVisibility = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Column)
      return this.equals((Column)that);
    return false;
  }

  public boolean equals(Column that) {
    if (that == null)
      return false;

    boolean this_present_columnFamily = true && (this.columnFamily != null);
    boolean that_present_columnFamily = true && (that.columnFamily != null);
    if (this_present_columnFamily || that_present_columnFamily) {
      if (!(this_present_columnFamily && that_present_columnFamily))
        return false;
      if (!java.util.Arrays.equals(this.columnFamily, that.columnFamily))
        return false;
    }

    boolean this_present_columnQualifier = true && (this.columnQualifier != null);
    boolean that_present_columnQualifier = true && (that.columnQualifier != null);
    if (this_present_columnQualifier || that_present_columnQualifier) {
      if (!(this_present_columnQualifier && that_present_columnQualifier))
        return false;
      if (!java.util.Arrays.equals(this.columnQualifier, that.columnQualifier))
        return false;
    }

    boolean this_present_columnVisibility = true && (this.columnVisibility != null);
    boolean that_present_columnVisibility = true && (that.columnVisibility != null);
    if (this_present_columnVisibility || that_present_columnVisibility) {
      if (!(this_present_columnVisibility && that_present_columnVisibility))
        return false;
      if (!java.util.Arrays.equals(this.columnVisibility, that.columnVisibility))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.columnFamily = iprot.readBinary();
            this.__isset.columnFamily = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.STRING) {
            this.columnQualifier = iprot.readBinary();
            this.__isset.columnQualifier = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.STRING) {
            this.columnVisibility = iprot.readBinary();
            this.__isset.columnVisibility = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("Column");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.columnFamily != null) {
      field.name = "columnFamily";
      field.type = TType.STRING;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.columnFamily);
      oprot.writeFieldEnd();
    }
    if (this.columnQualifier != null) {
      field.name = "columnQualifier";
      field.type = TType.STRING;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.columnQualifier);
      oprot.writeFieldEnd();
    }
    if (this.columnVisibility != null) {
      field.name = "columnVisibility";
      field.type = TType.STRING;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.columnVisibility);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("Column(");
    sb.append("columnFamily:");
    sb.append(this.columnFamily);
    sb.append(",columnQualifier:");
    sb.append(this.columnQualifier);
    sb.append(",columnVisibility:");
    sb.append(this.columnVisibility);
    sb.append(")");
    return sb.toString();
  }



}

