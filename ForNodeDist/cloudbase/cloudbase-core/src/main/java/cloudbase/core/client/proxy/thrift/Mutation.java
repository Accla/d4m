/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.client.proxy.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Mutation implements TBase, java.io.Serializable {
  public byte[] row;
  public List<ColumnUpdate> updates;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean row = false;
    public boolean updates = false;
  }

  public Mutation() {
  }

  public Mutation(
    byte[] row,
    List<ColumnUpdate> updates)
  {
    this();
    this.row = row;
    this.__isset.row = true;
    this.updates = updates;
    this.__isset.updates = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Mutation)
      return this.equals((Mutation)that);
    return false;
  }

  public boolean equals(Mutation that) {
    if (that == null)
      return false;

    boolean this_present_row = true && (this.row != null);
    boolean that_present_row = true && (that.row != null);
    if (this_present_row || that_present_row) {
      if (!(this_present_row && that_present_row))
        return false;
      if (!java.util.Arrays.equals(this.row, that.row))
        return false;
    }

    boolean this_present_updates = true && (this.updates != null);
    boolean that_present_updates = true && (that.updates != null);
    if (this_present_updates || that_present_updates) {
      if (!(this_present_updates && that_present_updates))
        return false;
      if (!this.updates.equals(that.updates))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.row = iprot.readBinary();
            this.__isset.row = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.LIST) {
            {
              TList _list8 = iprot.readListBegin();
              this.updates = new ArrayList<ColumnUpdate>(_list8.size);
              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
              {
                ColumnUpdate _elem10 = new ColumnUpdate();
                _elem10 = new ColumnUpdate();
                _elem10.read(iprot);
                this.updates.add(_elem10);
              }
              iprot.readListEnd();
            }
            this.__isset.updates = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("Mutation");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.row != null) {
      field.name = "row";
      field.type = TType.STRING;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeBinary(this.row);
      oprot.writeFieldEnd();
    }
    if (this.updates != null) {
      field.name = "updates";
      field.type = TType.LIST;
      field.id = 2;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.updates.size()));
        for (ColumnUpdate _iter11 : this.updates)        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("Mutation(");
    sb.append("row:");
    sb.append(this.row);
    sb.append(",updates:");
    sb.append(this.updates);
    sb.append(")");
    return sb.toString();
  }

}

