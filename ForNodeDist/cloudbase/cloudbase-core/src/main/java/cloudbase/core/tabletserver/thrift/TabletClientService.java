/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.tabletserver.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class TabletClientService {

  public interface Iface {

    public cloudbase.core.data.InitialScan startScan(cloudbase.core.security.thrift.AuthInfo credentials, cloudbase.core.data.KeyExtent extent, cloudbase.core.data.Range range, List<cloudbase.core.data.Column> columns, int batchSize, List<cloudbase.core.data.IterInfo> ssiList, Map<String,Map<String,String>> ssio, Set<Short> authorizations) throws cloudbase.core.security.thrift.ThriftSecurityException, NotServingTabletException, TException;

    public cloudbase.core.data.ScanResult continueScan(long scanID) throws NoSuchScanIDException, NotServingTabletException, TException;

    public void closeScan(long scanID) throws TException;

    public cloudbase.core.data.InitialScan startMultiScan(cloudbase.core.security.thrift.AuthInfo credentials, Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> batch, List<cloudbase.core.data.Column> columns, List<cloudbase.core.data.IterInfo> ssiList, Map<String,Map<String,String>> ssio, Set<Short> authorizations) throws cloudbase.core.security.thrift.ThriftSecurityException, TException;

    public cloudbase.core.data.ScanResult continueMultiScan(long scanID) throws NoSuchScanIDException, TException;

    public Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> closeMultiScan(long scanID) throws NoSuchScanIDException, TException;

    public long startUpdate(cloudbase.core.security.thrift.AuthInfo credentials) throws cloudbase.core.security.thrift.ThriftSecurityException, TException;

    public void setUpdateTablet(long updateID, cloudbase.core.data.KeyExtent keyExtent) throws TException;

    public void applyUpdate(long updateID, cloudbase.core.data.Mutation mutation) throws TException;

    public cloudbase.core.data.UpdateErrors closeUpdate(long updateID) throws NoSuchScanIDException, TException;

    public void update(cloudbase.core.security.thrift.AuthInfo credentials, cloudbase.core.data.KeyExtent keyExtent, cloudbase.core.data.Mutation mutation) throws cloudbase.core.security.thrift.ThriftSecurityException, NotServingTabletException, ConstraintViolationException, TException;

    public List<cloudbase.core.data.KeyExtent> bulkImport(cloudbase.core.security.thrift.AuthInfo credentials, Map<cloudbase.core.data.KeyExtent,Map<String,Long>> files) throws cloudbase.core.security.thrift.ThriftSecurityException, TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public cloudbase.core.data.InitialScan startScan(cloudbase.core.security.thrift.AuthInfo credentials, cloudbase.core.data.KeyExtent extent, cloudbase.core.data.Range range, List<cloudbase.core.data.Column> columns, int batchSize, List<cloudbase.core.data.IterInfo> ssiList, Map<String,Map<String,String>> ssio, Set<Short> authorizations) throws cloudbase.core.security.thrift.ThriftSecurityException, NotServingTabletException, TException
    {
      send_startScan(credentials, extent, range, columns, batchSize, ssiList, ssio, authorizations);
      return recv_startScan();
    }

    public void send_startScan(cloudbase.core.security.thrift.AuthInfo credentials, cloudbase.core.data.KeyExtent extent, cloudbase.core.data.Range range, List<cloudbase.core.data.Column> columns, int batchSize, List<cloudbase.core.data.IterInfo> ssiList, Map<String,Map<String,String>> ssio, Set<Short> authorizations) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startScan", TMessageType.CALL, seqid_));
      startScan_args args = new startScan_args();
      args.credentials = credentials;
      args.extent = extent;
      args.range = range;
      args.columns = columns;
      args.batchSize = batchSize;
      args.ssiList = ssiList;
      args.ssio = ssio;
      args.authorizations = authorizations;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.InitialScan recv_startScan() throws cloudbase.core.security.thrift.ThriftSecurityException, NotServingTabletException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      startScan_result result = new startScan_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      if (result.__isset.nste) {
        throw result.nste;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "startScan failed: unknown result");
    }

    public cloudbase.core.data.ScanResult continueScan(long scanID) throws NoSuchScanIDException, NotServingTabletException, TException
    {
      send_continueScan(scanID);
      return recv_continueScan();
    }

    public void send_continueScan(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("continueScan", TMessageType.CALL, seqid_));
      continueScan_args args = new continueScan_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.ScanResult recv_continueScan() throws NoSuchScanIDException, NotServingTabletException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      continueScan_result result = new continueScan_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.nssi) {
        throw result.nssi;
      }
      if (result.__isset.nste) {
        throw result.nste;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "continueScan failed: unknown result");
    }

    public void closeScan(long scanID) throws TException
    {
      send_closeScan(scanID);
    }

    public void send_closeScan(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("closeScan", TMessageType.CALL, seqid_));
      closeScan_args args = new closeScan_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.InitialScan startMultiScan(cloudbase.core.security.thrift.AuthInfo credentials, Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> batch, List<cloudbase.core.data.Column> columns, List<cloudbase.core.data.IterInfo> ssiList, Map<String,Map<String,String>> ssio, Set<Short> authorizations) throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      send_startMultiScan(credentials, batch, columns, ssiList, ssio, authorizations);
      return recv_startMultiScan();
    }

    public void send_startMultiScan(cloudbase.core.security.thrift.AuthInfo credentials, Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> batch, List<cloudbase.core.data.Column> columns, List<cloudbase.core.data.IterInfo> ssiList, Map<String,Map<String,String>> ssio, Set<Short> authorizations) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startMultiScan", TMessageType.CALL, seqid_));
      startMultiScan_args args = new startMultiScan_args();
      args.credentials = credentials;
      args.batch = batch;
      args.columns = columns;
      args.ssiList = ssiList;
      args.ssio = ssio;
      args.authorizations = authorizations;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.InitialScan recv_startMultiScan() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      startMultiScan_result result = new startMultiScan_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "startMultiScan failed: unknown result");
    }

    public cloudbase.core.data.ScanResult continueMultiScan(long scanID) throws NoSuchScanIDException, TException
    {
      send_continueMultiScan(scanID);
      return recv_continueMultiScan();
    }

    public void send_continueMultiScan(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("continueMultiScan", TMessageType.CALL, seqid_));
      continueMultiScan_args args = new continueMultiScan_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.ScanResult recv_continueMultiScan() throws NoSuchScanIDException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      continueMultiScan_result result = new continueMultiScan_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.nssi) {
        throw result.nssi;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "continueMultiScan failed: unknown result");
    }

    public Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> closeMultiScan(long scanID) throws NoSuchScanIDException, TException
    {
      send_closeMultiScan(scanID);
      return recv_closeMultiScan();
    }

    public void send_closeMultiScan(long scanID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("closeMultiScan", TMessageType.CALL, seqid_));
      closeMultiScan_args args = new closeMultiScan_args();
      args.scanID = scanID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> recv_closeMultiScan() throws NoSuchScanIDException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      closeMultiScan_result result = new closeMultiScan_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.nssi) {
        throw result.nssi;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "closeMultiScan failed: unknown result");
    }

    public long startUpdate(cloudbase.core.security.thrift.AuthInfo credentials) throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      send_startUpdate(credentials);
      return recv_startUpdate();
    }

    public void send_startUpdate(cloudbase.core.security.thrift.AuthInfo credentials) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startUpdate", TMessageType.CALL, seqid_));
      startUpdate_args args = new startUpdate_args();
      args.credentials = credentials;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_startUpdate() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      startUpdate_result result = new startUpdate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "startUpdate failed: unknown result");
    }

    public void setUpdateTablet(long updateID, cloudbase.core.data.KeyExtent keyExtent) throws TException
    {
      send_setUpdateTablet(updateID, keyExtent);
    }

    public void send_setUpdateTablet(long updateID, cloudbase.core.data.KeyExtent keyExtent) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setUpdateTablet", TMessageType.CALL, seqid_));
      setUpdateTablet_args args = new setUpdateTablet_args();
      args.updateID = updateID;
      args.keyExtent = keyExtent;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void applyUpdate(long updateID, cloudbase.core.data.Mutation mutation) throws TException
    {
      send_applyUpdate(updateID, mutation);
    }

    public void send_applyUpdate(long updateID, cloudbase.core.data.Mutation mutation) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("applyUpdate", TMessageType.CALL, seqid_));
      applyUpdate_args args = new applyUpdate_args();
      args.updateID = updateID;
      args.mutation = mutation;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.UpdateErrors closeUpdate(long updateID) throws NoSuchScanIDException, TException
    {
      send_closeUpdate(updateID);
      return recv_closeUpdate();
    }

    public void send_closeUpdate(long updateID) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("closeUpdate", TMessageType.CALL, seqid_));
      closeUpdate_args args = new closeUpdate_args();
      args.updateID = updateID;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public cloudbase.core.data.UpdateErrors recv_closeUpdate() throws NoSuchScanIDException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      closeUpdate_result result = new closeUpdate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.nssi) {
        throw result.nssi;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "closeUpdate failed: unknown result");
    }

    public void update(cloudbase.core.security.thrift.AuthInfo credentials, cloudbase.core.data.KeyExtent keyExtent, cloudbase.core.data.Mutation mutation) throws cloudbase.core.security.thrift.ThriftSecurityException, NotServingTabletException, ConstraintViolationException, TException
    {
      send_update(credentials, keyExtent, mutation);
      recv_update();
    }

    public void send_update(cloudbase.core.security.thrift.AuthInfo credentials, cloudbase.core.data.KeyExtent keyExtent, cloudbase.core.data.Mutation mutation) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("update", TMessageType.CALL, seqid_));
      update_args args = new update_args();
      args.credentials = credentials;
      args.keyExtent = keyExtent;
      args.mutation = mutation;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_update() throws cloudbase.core.security.thrift.ThriftSecurityException, NotServingTabletException, ConstraintViolationException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      update_result result = new update_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.sec) {
        throw result.sec;
      }
      if (result.__isset.nste) {
        throw result.nste;
      }
      if (result.__isset.cve) {
        throw result.cve;
      }
      return;
    }

    public List<cloudbase.core.data.KeyExtent> bulkImport(cloudbase.core.security.thrift.AuthInfo credentials, Map<cloudbase.core.data.KeyExtent,Map<String,Long>> files) throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      send_bulkImport(credentials, files);
      return recv_bulkImport();
    }

    public void send_bulkImport(cloudbase.core.security.thrift.AuthInfo credentials, Map<cloudbase.core.data.KeyExtent,Map<String,Long>> files) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("bulkImport", TMessageType.CALL, seqid_));
      bulkImport_args args = new bulkImport_args();
      args.credentials = credentials;
      args.files = files;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<cloudbase.core.data.KeyExtent> recv_bulkImport() throws cloudbase.core.security.thrift.ThriftSecurityException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      bulkImport_result result = new bulkImport_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.sec) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "bulkImport failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("startScan", new startScan());
      processMap_.put("continueScan", new continueScan());
      processMap_.put("closeScan", new closeScan());
      processMap_.put("startMultiScan", new startMultiScan());
      processMap_.put("continueMultiScan", new continueMultiScan());
      processMap_.put("closeMultiScan", new closeMultiScan());
      processMap_.put("startUpdate", new startUpdate());
      processMap_.put("setUpdateTablet", new setUpdateTablet());
      processMap_.put("applyUpdate", new applyUpdate());
      processMap_.put("closeUpdate", new closeUpdate());
      processMap_.put("update", new update());
      processMap_.put("bulkImport", new bulkImport());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class startScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startScan_args args = new startScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        startScan_result result = new startScan_result();
        try {
          result.success = iface_.startScan(args.credentials, args.extent, args.range, args.columns, args.batchSize, args.ssiList, args.ssio, args.authorizations);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        } catch (NotServingTabletException nste) {
          result.nste = nste;
          result.__isset.nste = true;
        }
        oprot.writeMessageBegin(new TMessage("startScan", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class continueScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        continueScan_args args = new continueScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        continueScan_result result = new continueScan_result();
        try {
          result.success = iface_.continueScan(args.scanID);
          result.__isset.success = true;
        } catch (NoSuchScanIDException nssi) {
          result.nssi = nssi;
          result.__isset.nssi = true;
        } catch (NotServingTabletException nste) {
          result.nste = nste;
          result.__isset.nste = true;
        }
        oprot.writeMessageBegin(new TMessage("continueScan", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class closeScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        closeScan_args args = new closeScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.closeScan(args.scanID);
        return;
      }
    }

    private class startMultiScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startMultiScan_args args = new startMultiScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        startMultiScan_result result = new startMultiScan_result();
        try {
          result.success = iface_.startMultiScan(args.credentials, args.batch, args.columns, args.ssiList, args.ssio, args.authorizations);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        }
        oprot.writeMessageBegin(new TMessage("startMultiScan", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class continueMultiScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        continueMultiScan_args args = new continueMultiScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        continueMultiScan_result result = new continueMultiScan_result();
        try {
          result.success = iface_.continueMultiScan(args.scanID);
          result.__isset.success = true;
        } catch (NoSuchScanIDException nssi) {
          result.nssi = nssi;
          result.__isset.nssi = true;
        }
        oprot.writeMessageBegin(new TMessage("continueMultiScan", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class closeMultiScan implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        closeMultiScan_args args = new closeMultiScan_args();
        args.read(iprot);
        iprot.readMessageEnd();
        closeMultiScan_result result = new closeMultiScan_result();
        try {
          result.success = iface_.closeMultiScan(args.scanID);
          result.__isset.success = true;
        } catch (NoSuchScanIDException nssi) {
          result.nssi = nssi;
          result.__isset.nssi = true;
        }
        oprot.writeMessageBegin(new TMessage("closeMultiScan", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class startUpdate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startUpdate_args args = new startUpdate_args();
        args.read(iprot);
        iprot.readMessageEnd();
        startUpdate_result result = new startUpdate_result();
        try {
          result.success = iface_.startUpdate(args.credentials);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        }
        oprot.writeMessageBegin(new TMessage("startUpdate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setUpdateTablet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setUpdateTablet_args args = new setUpdateTablet_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.setUpdateTablet(args.updateID, args.keyExtent);
        return;
      }
    }

    private class applyUpdate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        applyUpdate_args args = new applyUpdate_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.applyUpdate(args.updateID, args.mutation);
        return;
      }
    }

    private class closeUpdate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        closeUpdate_args args = new closeUpdate_args();
        args.read(iprot);
        iprot.readMessageEnd();
        closeUpdate_result result = new closeUpdate_result();
        try {
          result.success = iface_.closeUpdate(args.updateID);
          result.__isset.success = true;
        } catch (NoSuchScanIDException nssi) {
          result.nssi = nssi;
          result.__isset.nssi = true;
        }
        oprot.writeMessageBegin(new TMessage("closeUpdate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class update implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        update_args args = new update_args();
        args.read(iprot);
        iprot.readMessageEnd();
        update_result result = new update_result();
        try {
          iface_.update(args.credentials, args.keyExtent, args.mutation);
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        } catch (NotServingTabletException nste) {
          result.nste = nste;
          result.__isset.nste = true;
        } catch (ConstraintViolationException cve) {
          result.cve = cve;
          result.__isset.cve = true;
        }
        oprot.writeMessageBegin(new TMessage("update", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class bulkImport implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        bulkImport_args args = new bulkImport_args();
        args.read(iprot);
        iprot.readMessageEnd();
        bulkImport_result result = new bulkImport_result();
        try {
          result.success = iface_.bulkImport(args.credentials, args.files);
          result.__isset.success = true;
        } catch (cloudbase.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
          result.__isset.sec = true;
        }
        oprot.writeMessageBegin(new TMessage("bulkImport", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class startScan_args implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.AuthInfo credentials;
    public cloudbase.core.data.KeyExtent extent;
    public cloudbase.core.data.Range range;
    public List<cloudbase.core.data.Column> columns;
    public int batchSize;
    public List<cloudbase.core.data.IterInfo> ssiList;
    public Map<String,Map<String,String>> ssio;
    public Set<Short> authorizations;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean credentials = false;
      public boolean extent = false;
      public boolean range = false;
      public boolean columns = false;
      public boolean batchSize = false;
      public boolean ssiList = false;
      public boolean ssio = false;
      public boolean authorizations = false;
    }

    public startScan_args() {
    }

    public startScan_args(
      cloudbase.core.security.thrift.AuthInfo credentials,
      cloudbase.core.data.KeyExtent extent,
      cloudbase.core.data.Range range,
      List<cloudbase.core.data.Column> columns,
      int batchSize,
      List<cloudbase.core.data.IterInfo> ssiList,
      Map<String,Map<String,String>> ssio,
      Set<Short> authorizations)
    {
      this();
      this.credentials = credentials;
      this.__isset.credentials = true;
      this.extent = extent;
      this.__isset.extent = true;
      this.range = range;
      this.__isset.range = true;
      this.columns = columns;
      this.__isset.columns = true;
      this.batchSize = batchSize;
      this.__isset.batchSize = true;
      this.ssiList = ssiList;
      this.__isset.ssiList = true;
      this.ssio = ssio;
      this.__isset.ssio = true;
      this.authorizations = authorizations;
      this.__isset.authorizations = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startScan_args)
        return this.equals((startScan_args)that);
      return false;
    }

    public boolean equals(startScan_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && (this.credentials != null);
      boolean that_present_credentials = true && (that.credentials != null);
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_extent = true && (this.extent != null);
      boolean that_present_extent = true && (that.extent != null);
      if (this_present_extent || that_present_extent) {
        if (!(this_present_extent && that_present_extent))
          return false;
        if (!this.extent.equals(that.extent))
          return false;
      }

      boolean this_present_range = true && (this.range != null);
      boolean that_present_range = true && (that.range != null);
      if (this_present_range || that_present_range) {
        if (!(this_present_range && that_present_range))
          return false;
        if (!this.range.equals(that.range))
          return false;
      }

      boolean this_present_columns = true && (this.columns != null);
      boolean that_present_columns = true && (that.columns != null);
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (!this.columns.equals(that.columns))
          return false;
      }

      boolean this_present_batchSize = true;
      boolean that_present_batchSize = true;
      if (this_present_batchSize || that_present_batchSize) {
        if (!(this_present_batchSize && that_present_batchSize))
          return false;
        if (this.batchSize != that.batchSize)
          return false;
      }

      boolean this_present_ssiList = true && (this.ssiList != null);
      boolean that_present_ssiList = true && (that.ssiList != null);
      if (this_present_ssiList || that_present_ssiList) {
        if (!(this_present_ssiList && that_present_ssiList))
          return false;
        if (!this.ssiList.equals(that.ssiList))
          return false;
      }

      boolean this_present_ssio = true && (this.ssio != null);
      boolean that_present_ssio = true && (that.ssio != null);
      if (this_present_ssio || that_present_ssio) {
        if (!(this_present_ssio && that_present_ssio))
          return false;
        if (!this.ssio.equals(that.ssio))
          return false;
      }

      boolean this_present_authorizations = true && (this.authorizations != null);
      boolean that_present_authorizations = true && (that.authorizations != null);
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.credentials = new cloudbase.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
              this.__isset.credentials = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.extent = new cloudbase.core.data.KeyExtent();
              this.extent.read(iprot);
              this.__isset.extent = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.STRUCT) {
              this.range = new cloudbase.core.data.Range();
              this.range.read(iprot);
              this.__isset.range = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.LIST) {
              {
                TList _list8 = iprot.readListBegin();
                this.columns = new ArrayList<cloudbase.core.data.Column>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  cloudbase.core.data.Column _elem10 = new cloudbase.core.data.Column();
                  _elem10 = new cloudbase.core.data.Column();
                  _elem10.read(iprot);
                  this.columns.add(_elem10);
                }
                iprot.readListEnd();
              }
              this.__isset.columns = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5:
            if (field.type == TType.I32) {
              this.batchSize = iprot.readI32();
              this.__isset.batchSize = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6:
            if (field.type == TType.LIST) {
              {
                TList _list11 = iprot.readListBegin();
                this.ssiList = new ArrayList<cloudbase.core.data.IterInfo>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  cloudbase.core.data.IterInfo _elem13 = new cloudbase.core.data.IterInfo();
                  _elem13 = new cloudbase.core.data.IterInfo();
                  _elem13.read(iprot);
                  this.ssiList.add(_elem13);
                }
                iprot.readListEnd();
              }
              this.__isset.ssiList = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7:
            if (field.type == TType.MAP) {
              {
                TMap _map14 = iprot.readMapBegin();
                this.ssio = new HashMap<String,Map<String,String>>(2*_map14.size);
                for (int _i15 = 0; _i15 < _map14.size; ++_i15)
                {
                  String _key16;
                  Map<String,String> _val17;
                  _key16 = iprot.readString();
                  {
                    TMap _map18 = iprot.readMapBegin();
                    _val17 = new HashMap<String,String>(2*_map18.size);
                    for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                    {
                      String _key20;
                      String _val21;
                      _key20 = iprot.readString();
                      _val21 = iprot.readString();
                      _val17.put(_key20, _val21);
                    }
                    iprot.readMapEnd();
                  }
                  this.ssio.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              this.__isset.ssio = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8:
            if (field.type == TType.SET) {
              {
                TSet _set22 = iprot.readSetBegin();
                this.authorizations = new HashSet<Short>(2*_set22.size);
                for (int _i23 = 0; _i23 < _set22.size; ++_i23)
                {
                  short _elem24;
                  _elem24 = iprot.readI16();
                  this.authorizations.add(_elem24);
                }
                iprot.readSetEnd();
              }
              this.__isset.authorizations = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.credentials != null) {
        field.name = "credentials";
        field.type = TType.STRUCT;
        field.id = 1;
        oprot.writeFieldBegin(field);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.extent != null) {
        field.name = "extent";
        field.type = TType.STRUCT;
        field.id = 2;
        oprot.writeFieldBegin(field);
        this.extent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.range != null) {
        field.name = "range";
        field.type = TType.STRUCT;
        field.id = 3;
        oprot.writeFieldBegin(field);
        this.range.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.columns != null) {
        field.name = "columns";
        field.type = TType.LIST;
        field.id = 4;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
          for (cloudbase.core.data.Column _iter25 : this.columns)          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      field.name = "batchSize";
      field.type = TType.I32;
      field.id = 5;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.batchSize);
      oprot.writeFieldEnd();
      if (this.ssiList != null) {
        field.name = "ssiList";
        field.type = TType.LIST;
        field.id = 6;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.ssiList.size()));
          for (cloudbase.core.data.IterInfo _iter26 : this.ssiList)          {
            _iter26.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.ssio != null) {
        field.name = "ssio";
        field.type = TType.MAP;
        field.id = 7;
        oprot.writeFieldBegin(field);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.ssio.size()));
          for (String _iter27 : this.ssio.keySet())          {
            oprot.writeString(_iter27);
            {
              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.ssio.get(_iter27).size()));
              for (String _iter28 : this.ssio.get(_iter27).keySet())              {
                oprot.writeString(_iter28);
                oprot.writeString(this.ssio.get(_iter27).get(_iter28));
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.authorizations != null) {
        field.name = "authorizations";
        field.type = TType.SET;
        field.id = 8;
        oprot.writeFieldBegin(field);
        {
          oprot.writeSetBegin(new TSet(TType.I16, this.authorizations.size()));
          for (short _iter29 : this.authorizations)          {
            oprot.writeI16(_iter29);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startScan_args(");
      sb.append("credentials:");
      sb.append(this.credentials.toString());
      sb.append(",extent:");
      sb.append(this.extent.toString());
      sb.append(",range:");
      sb.append(this.range.toString());
      sb.append(",columns:");
      sb.append(this.columns);
      sb.append(",batchSize:");
      sb.append(this.batchSize);
      sb.append(",ssiList:");
      sb.append(this.ssiList);
      sb.append(",ssio:");
      sb.append(this.ssio);
      sb.append(",authorizations:");
      sb.append(this.authorizations);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class startScan_result implements TBase, java.io.Serializable   {
    public cloudbase.core.data.InitialScan success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;
    public NotServingTabletException nste;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
      public boolean nste = false;
    }

    public startScan_result() {
    }

    public startScan_result(
      cloudbase.core.data.InitialScan success,
      cloudbase.core.security.thrift.ThriftSecurityException sec,
      NotServingTabletException nste)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
      this.nste = nste;
      this.__isset.nste = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startScan_result)
        return this.equals((startScan_result)that);
      return false;
    }

    public boolean equals(startScan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      boolean this_present_nste = true && (this.nste != null);
      boolean that_present_nste = true && (that.nste != null);
      if (this_present_nste || that_present_nste) {
        if (!(this_present_nste && that_present_nste))
          return false;
        if (!this.nste.equals(that.nste))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new cloudbase.core.data.InitialScan();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.nste = new NotServingTabletException();
              this.nste.read(iprot);
              this.__isset.nste = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startScan_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nste) {
        if (this.nste != null) {
          field.name = "nste";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.nste.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startScan_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(",nste:");
      sb.append(this.nste.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class continueScan_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public continueScan_args() {
    }

    public continueScan_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof continueScan_args)
        return this.equals((continueScan_args)that);
      return false;
    }

    public boolean equals(continueScan_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("continueScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("continueScan_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class continueScan_result implements TBase, java.io.Serializable   {
    public cloudbase.core.data.ScanResult success;
    public NoSuchScanIDException nssi;
    public NotServingTabletException nste;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean nssi = false;
      public boolean nste = false;
    }

    public continueScan_result() {
    }

    public continueScan_result(
      cloudbase.core.data.ScanResult success,
      NoSuchScanIDException nssi,
      NotServingTabletException nste)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.nssi = nssi;
      this.__isset.nssi = true;
      this.nste = nste;
      this.__isset.nste = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof continueScan_result)
        return this.equals((continueScan_result)that);
      return false;
    }

    public boolean equals(continueScan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nssi = true && (this.nssi != null);
      boolean that_present_nssi = true && (that.nssi != null);
      if (this_present_nssi || that_present_nssi) {
        if (!(this_present_nssi && that_present_nssi))
          return false;
        if (!this.nssi.equals(that.nssi))
          return false;
      }

      boolean this_present_nste = true && (this.nste != null);
      boolean that_present_nste = true && (that.nste != null);
      if (this_present_nste || that_present_nste) {
        if (!(this_present_nste && that_present_nste))
          return false;
        if (!this.nste.equals(that.nste))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new cloudbase.core.data.ScanResult();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.nssi = new NoSuchScanIDException();
              this.nssi.read(iprot);
              this.__isset.nssi = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.nste = new NotServingTabletException();
              this.nste.read(iprot);
              this.__isset.nste = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("continueScan_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nssi) {
        if (this.nssi != null) {
          field.name = "nssi";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.nssi.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nste) {
        if (this.nste != null) {
          field.name = "nste";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.nste.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("continueScan_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",nssi:");
      sb.append(this.nssi.toString());
      sb.append(",nste:");
      sb.append(this.nste.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class closeScan_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public closeScan_args() {
    }

    public closeScan_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeScan_args)
        return this.equals((closeScan_args)that);
      return false;
    }

    public boolean equals(closeScan_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("closeScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("closeScan_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class startMultiScan_args implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.AuthInfo credentials;
    public Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> batch;
    public List<cloudbase.core.data.Column> columns;
    public List<cloudbase.core.data.IterInfo> ssiList;
    public Map<String,Map<String,String>> ssio;
    public Set<Short> authorizations;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean credentials = false;
      public boolean batch = false;
      public boolean columns = false;
      public boolean ssiList = false;
      public boolean ssio = false;
      public boolean authorizations = false;
    }

    public startMultiScan_args() {
    }

    public startMultiScan_args(
      cloudbase.core.security.thrift.AuthInfo credentials,
      Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> batch,
      List<cloudbase.core.data.Column> columns,
      List<cloudbase.core.data.IterInfo> ssiList,
      Map<String,Map<String,String>> ssio,
      Set<Short> authorizations)
    {
      this();
      this.credentials = credentials;
      this.__isset.credentials = true;
      this.batch = batch;
      this.__isset.batch = true;
      this.columns = columns;
      this.__isset.columns = true;
      this.ssiList = ssiList;
      this.__isset.ssiList = true;
      this.ssio = ssio;
      this.__isset.ssio = true;
      this.authorizations = authorizations;
      this.__isset.authorizations = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startMultiScan_args)
        return this.equals((startMultiScan_args)that);
      return false;
    }

    public boolean equals(startMultiScan_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && (this.credentials != null);
      boolean that_present_credentials = true && (that.credentials != null);
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_batch = true && (this.batch != null);
      boolean that_present_batch = true && (that.batch != null);
      if (this_present_batch || that_present_batch) {
        if (!(this_present_batch && that_present_batch))
          return false;
        if (!this.batch.equals(that.batch))
          return false;
      }

      boolean this_present_columns = true && (this.columns != null);
      boolean that_present_columns = true && (that.columns != null);
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (!this.columns.equals(that.columns))
          return false;
      }

      boolean this_present_ssiList = true && (this.ssiList != null);
      boolean that_present_ssiList = true && (that.ssiList != null);
      if (this_present_ssiList || that_present_ssiList) {
        if (!(this_present_ssiList && that_present_ssiList))
          return false;
        if (!this.ssiList.equals(that.ssiList))
          return false;
      }

      boolean this_present_ssio = true && (this.ssio != null);
      boolean that_present_ssio = true && (that.ssio != null);
      if (this_present_ssio || that_present_ssio) {
        if (!(this_present_ssio && that_present_ssio))
          return false;
        if (!this.ssio.equals(that.ssio))
          return false;
      }

      boolean this_present_authorizations = true && (this.authorizations != null);
      boolean that_present_authorizations = true && (that.authorizations != null);
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.credentials = new cloudbase.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
              this.__isset.credentials = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.MAP) {
              {
                TMap _map30 = iprot.readMapBegin();
                this.batch = new HashMap<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>>(2*_map30.size);
                for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                {
                  cloudbase.core.data.KeyExtent _key32;
                  List<cloudbase.core.data.Range> _val33;
                  _key32 = new cloudbase.core.data.KeyExtent();
                  _key32.read(iprot);
                  {
                    TList _list34 = iprot.readListBegin();
                    _val33 = new ArrayList<cloudbase.core.data.Range>(_list34.size);
                    for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                    {
                      cloudbase.core.data.Range _elem36 = new cloudbase.core.data.Range();
                      _elem36 = new cloudbase.core.data.Range();
                      _elem36.read(iprot);
                      _val33.add(_elem36);
                    }
                    iprot.readListEnd();
                  }
                  this.batch.put(_key32, _val33);
                }
                iprot.readMapEnd();
              }
              this.__isset.batch = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.LIST) {
              {
                TList _list37 = iprot.readListBegin();
                this.columns = new ArrayList<cloudbase.core.data.Column>(_list37.size);
                for (int _i38 = 0; _i38 < _list37.size; ++_i38)
                {
                  cloudbase.core.data.Column _elem39 = new cloudbase.core.data.Column();
                  _elem39 = new cloudbase.core.data.Column();
                  _elem39.read(iprot);
                  this.columns.add(_elem39);
                }
                iprot.readListEnd();
              }
              this.__isset.columns = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.LIST) {
              {
                TList _list40 = iprot.readListBegin();
                this.ssiList = new ArrayList<cloudbase.core.data.IterInfo>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  cloudbase.core.data.IterInfo _elem42 = new cloudbase.core.data.IterInfo();
                  _elem42 = new cloudbase.core.data.IterInfo();
                  _elem42.read(iprot);
                  this.ssiList.add(_elem42);
                }
                iprot.readListEnd();
              }
              this.__isset.ssiList = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5:
            if (field.type == TType.MAP) {
              {
                TMap _map43 = iprot.readMapBegin();
                this.ssio = new HashMap<String,Map<String,String>>(2*_map43.size);
                for (int _i44 = 0; _i44 < _map43.size; ++_i44)
                {
                  String _key45;
                  Map<String,String> _val46;
                  _key45 = iprot.readString();
                  {
                    TMap _map47 = iprot.readMapBegin();
                    _val46 = new HashMap<String,String>(2*_map47.size);
                    for (int _i48 = 0; _i48 < _map47.size; ++_i48)
                    {
                      String _key49;
                      String _val50;
                      _key49 = iprot.readString();
                      _val50 = iprot.readString();
                      _val46.put(_key49, _val50);
                    }
                    iprot.readMapEnd();
                  }
                  this.ssio.put(_key45, _val46);
                }
                iprot.readMapEnd();
              }
              this.__isset.ssio = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6:
            if (field.type == TType.SET) {
              {
                TSet _set51 = iprot.readSetBegin();
                this.authorizations = new HashSet<Short>(2*_set51.size);
                for (int _i52 = 0; _i52 < _set51.size; ++_i52)
                {
                  short _elem53;
                  _elem53 = iprot.readI16();
                  this.authorizations.add(_elem53);
                }
                iprot.readSetEnd();
              }
              this.__isset.authorizations = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startMultiScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.credentials != null) {
        field.name = "credentials";
        field.type = TType.STRUCT;
        field.id = 1;
        oprot.writeFieldBegin(field);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.batch != null) {
        field.name = "batch";
        field.type = TType.MAP;
        field.id = 2;
        oprot.writeFieldBegin(field);
        {
          oprot.writeMapBegin(new TMap(TType.STRUCT, TType.LIST, this.batch.size()));
          for (cloudbase.core.data.KeyExtent _iter54 : this.batch.keySet())          {
            _iter54.write(oprot);
            {
              oprot.writeListBegin(new TList(TType.STRUCT, this.batch.get(_iter54).size()));
              for (cloudbase.core.data.Range _iter55 : this.batch.get(_iter54))              {
                _iter55.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.columns != null) {
        field.name = "columns";
        field.type = TType.LIST;
        field.id = 3;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
          for (cloudbase.core.data.Column _iter56 : this.columns)          {
            _iter56.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.ssiList != null) {
        field.name = "ssiList";
        field.type = TType.LIST;
        field.id = 4;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.ssiList.size()));
          for (cloudbase.core.data.IterInfo _iter57 : this.ssiList)          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.ssio != null) {
        field.name = "ssio";
        field.type = TType.MAP;
        field.id = 5;
        oprot.writeFieldBegin(field);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.ssio.size()));
          for (String _iter58 : this.ssio.keySet())          {
            oprot.writeString(_iter58);
            {
              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.ssio.get(_iter58).size()));
              for (String _iter59 : this.ssio.get(_iter58).keySet())              {
                oprot.writeString(_iter59);
                oprot.writeString(this.ssio.get(_iter58).get(_iter59));
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.authorizations != null) {
        field.name = "authorizations";
        field.type = TType.SET;
        field.id = 6;
        oprot.writeFieldBegin(field);
        {
          oprot.writeSetBegin(new TSet(TType.I16, this.authorizations.size()));
          for (short _iter60 : this.authorizations)          {
            oprot.writeI16(_iter60);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startMultiScan_args(");
      sb.append("credentials:");
      sb.append(this.credentials.toString());
      sb.append(",batch:");
      sb.append(this.batch);
      sb.append(",columns:");
      sb.append(this.columns);
      sb.append(",ssiList:");
      sb.append(this.ssiList);
      sb.append(",ssio:");
      sb.append(this.ssio);
      sb.append(",authorizations:");
      sb.append(this.authorizations);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class startMultiScan_result implements TBase, java.io.Serializable   {
    public cloudbase.core.data.InitialScan success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
    }

    public startMultiScan_result() {
    }

    public startMultiScan_result(
      cloudbase.core.data.InitialScan success,
      cloudbase.core.security.thrift.ThriftSecurityException sec)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startMultiScan_result)
        return this.equals((startMultiScan_result)that);
      return false;
    }

    public boolean equals(startMultiScan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new cloudbase.core.data.InitialScan();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startMultiScan_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startMultiScan_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class continueMultiScan_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public continueMultiScan_args() {
    }

    public continueMultiScan_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof continueMultiScan_args)
        return this.equals((continueMultiScan_args)that);
      return false;
    }

    public boolean equals(continueMultiScan_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("continueMultiScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("continueMultiScan_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class continueMultiScan_result implements TBase, java.io.Serializable   {
    public cloudbase.core.data.ScanResult success;
    public NoSuchScanIDException nssi;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean nssi = false;
    }

    public continueMultiScan_result() {
    }

    public continueMultiScan_result(
      cloudbase.core.data.ScanResult success,
      NoSuchScanIDException nssi)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.nssi = nssi;
      this.__isset.nssi = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof continueMultiScan_result)
        return this.equals((continueMultiScan_result)that);
      return false;
    }

    public boolean equals(continueMultiScan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nssi = true && (this.nssi != null);
      boolean that_present_nssi = true && (that.nssi != null);
      if (this_present_nssi || that_present_nssi) {
        if (!(this_present_nssi && that_present_nssi))
          return false;
        if (!this.nssi.equals(that.nssi))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new cloudbase.core.data.ScanResult();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.nssi = new NoSuchScanIDException();
              this.nssi.read(iprot);
              this.__isset.nssi = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("continueMultiScan_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nssi) {
        if (this.nssi != null) {
          field.name = "nssi";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.nssi.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("continueMultiScan_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",nssi:");
      sb.append(this.nssi.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class closeMultiScan_args implements TBase, java.io.Serializable   {
    public long scanID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanID = false;
    }

    public closeMultiScan_args() {
    }

    public closeMultiScan_args(
      long scanID)
    {
      this();
      this.scanID = scanID;
      this.__isset.scanID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeMultiScan_args)
        return this.equals((closeMultiScan_args)that);
      return false;
    }

    public boolean equals(closeMultiScan_args that) {
      if (that == null)
        return false;

      boolean this_present_scanID = true;
      boolean that_present_scanID = true;
      if (this_present_scanID || that_present_scanID) {
        if (!(this_present_scanID && that_present_scanID))
          return false;
        if (this.scanID != that.scanID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.scanID = iprot.readI64();
              this.__isset.scanID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("closeMultiScan_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("closeMultiScan_args(");
      sb.append("scanID:");
      sb.append(this.scanID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class closeMultiScan_result implements TBase, java.io.Serializable   {
    public Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> success;
    public NoSuchScanIDException nssi;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean nssi = false;
    }

    public closeMultiScan_result() {
    }

    public closeMultiScan_result(
      Map<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>> success,
      NoSuchScanIDException nssi)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.nssi = nssi;
      this.__isset.nssi = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeMultiScan_result)
        return this.equals((closeMultiScan_result)that);
      return false;
    }

    public boolean equals(closeMultiScan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nssi = true && (this.nssi != null);
      boolean that_present_nssi = true && (that.nssi != null);
      if (this_present_nssi || that_present_nssi) {
        if (!(this_present_nssi && that_present_nssi))
          return false;
        if (!this.nssi.equals(that.nssi))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.MAP) {
              {
                TMap _map61 = iprot.readMapBegin();
                this.success = new HashMap<cloudbase.core.data.KeyExtent,List<cloudbase.core.data.Range>>(2*_map61.size);
                for (int _i62 = 0; _i62 < _map61.size; ++_i62)
                {
                  cloudbase.core.data.KeyExtent _key63;
                  List<cloudbase.core.data.Range> _val64;
                  _key63 = new cloudbase.core.data.KeyExtent();
                  _key63.read(iprot);
                  {
                    TList _list65 = iprot.readListBegin();
                    _val64 = new ArrayList<cloudbase.core.data.Range>(_list65.size);
                    for (int _i66 = 0; _i66 < _list65.size; ++_i66)
                    {
                      cloudbase.core.data.Range _elem67 = new cloudbase.core.data.Range();
                      _elem67 = new cloudbase.core.data.Range();
                      _elem67.read(iprot);
                      _val64.add(_elem67);
                    }
                    iprot.readListEnd();
                  }
                  this.success.put(_key63, _val64);
                }
                iprot.readMapEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.nssi = new NoSuchScanIDException();
              this.nssi.read(iprot);
              this.__isset.nssi = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("closeMultiScan_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.MAP;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeMapBegin(new TMap(TType.STRUCT, TType.LIST, this.success.size()));
            for (cloudbase.core.data.KeyExtent _iter68 : this.success.keySet())            {
              _iter68.write(oprot);
              {
                oprot.writeListBegin(new TList(TType.STRUCT, this.success.get(_iter68).size()));
                for (cloudbase.core.data.Range _iter69 : this.success.get(_iter68))                {
                  _iter69.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nssi) {
        if (this.nssi != null) {
          field.name = "nssi";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.nssi.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("closeMultiScan_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",nssi:");
      sb.append(this.nssi.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class startUpdate_args implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.AuthInfo credentials;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean credentials = false;
    }

    public startUpdate_args() {
    }

    public startUpdate_args(
      cloudbase.core.security.thrift.AuthInfo credentials)
    {
      this();
      this.credentials = credentials;
      this.__isset.credentials = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startUpdate_args)
        return this.equals((startUpdate_args)that);
      return false;
    }

    public boolean equals(startUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && (this.credentials != null);
      boolean that_present_credentials = true && (that.credentials != null);
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.credentials = new cloudbase.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
              this.__isset.credentials = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startUpdate_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.credentials != null) {
        field.name = "credentials";
        field.type = TType.STRUCT;
        field.id = 1;
        oprot.writeFieldBegin(field);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startUpdate_args(");
      sb.append("credentials:");
      sb.append(this.credentials.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class startUpdate_result implements TBase, java.io.Serializable   {
    public long success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
    }

    public startUpdate_result() {
    }

    public startUpdate_result(
      long success,
      cloudbase.core.security.thrift.ThriftSecurityException sec)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startUpdate_result)
        return this.equals((startUpdate_result)that);
      return false;
    }

    public boolean equals(startUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("startUpdate_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I64;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("startUpdate_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class setUpdateTablet_args implements TBase, java.io.Serializable   {
    public long updateID;
    public cloudbase.core.data.KeyExtent keyExtent;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean updateID = false;
      public boolean keyExtent = false;
    }

    public setUpdateTablet_args() {
    }

    public setUpdateTablet_args(
      long updateID,
      cloudbase.core.data.KeyExtent keyExtent)
    {
      this();
      this.updateID = updateID;
      this.__isset.updateID = true;
      this.keyExtent = keyExtent;
      this.__isset.keyExtent = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUpdateTablet_args)
        return this.equals((setUpdateTablet_args)that);
      return false;
    }

    public boolean equals(setUpdateTablet_args that) {
      if (that == null)
        return false;

      boolean this_present_updateID = true;
      boolean that_present_updateID = true;
      if (this_present_updateID || that_present_updateID) {
        if (!(this_present_updateID && that_present_updateID))
          return false;
        if (this.updateID != that.updateID)
          return false;
      }

      boolean this_present_keyExtent = true && (this.keyExtent != null);
      boolean that_present_keyExtent = true && (that.keyExtent != null);
      if (this_present_keyExtent || that_present_keyExtent) {
        if (!(this_present_keyExtent && that_present_keyExtent))
          return false;
        if (!this.keyExtent.equals(that.keyExtent))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.updateID = iprot.readI64();
              this.__isset.updateID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.keyExtent = new cloudbase.core.data.KeyExtent();
              this.keyExtent.read(iprot);
              this.__isset.keyExtent = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("setUpdateTablet_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "updateID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.updateID);
      oprot.writeFieldEnd();
      if (this.keyExtent != null) {
        field.name = "keyExtent";
        field.type = TType.STRUCT;
        field.id = 2;
        oprot.writeFieldBegin(field);
        this.keyExtent.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setUpdateTablet_args(");
      sb.append("updateID:");
      sb.append(this.updateID);
      sb.append(",keyExtent:");
      sb.append(this.keyExtent.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class applyUpdate_args implements TBase, java.io.Serializable   {
    public long updateID;
    public cloudbase.core.data.Mutation mutation;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean updateID = false;
      public boolean mutation = false;
    }

    public applyUpdate_args() {
    }

    public applyUpdate_args(
      long updateID,
      cloudbase.core.data.Mutation mutation)
    {
      this();
      this.updateID = updateID;
      this.__isset.updateID = true;
      this.mutation = mutation;
      this.__isset.mutation = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof applyUpdate_args)
        return this.equals((applyUpdate_args)that);
      return false;
    }

    public boolean equals(applyUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_updateID = true;
      boolean that_present_updateID = true;
      if (this_present_updateID || that_present_updateID) {
        if (!(this_present_updateID && that_present_updateID))
          return false;
        if (this.updateID != that.updateID)
          return false;
      }

      boolean this_present_mutation = true && (this.mutation != null);
      boolean that_present_mutation = true && (that.mutation != null);
      if (this_present_mutation || that_present_mutation) {
        if (!(this_present_mutation && that_present_mutation))
          return false;
        if (!this.mutation.equals(that.mutation))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.updateID = iprot.readI64();
              this.__isset.updateID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.mutation = new cloudbase.core.data.Mutation();
              this.mutation.read(iprot);
              this.__isset.mutation = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("applyUpdate_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "updateID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.updateID);
      oprot.writeFieldEnd();
      if (this.mutation != null) {
        field.name = "mutation";
        field.type = TType.STRUCT;
        field.id = 2;
        oprot.writeFieldBegin(field);
        this.mutation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("applyUpdate_args(");
      sb.append("updateID:");
      sb.append(this.updateID);
      sb.append(",mutation:");
      sb.append(this.mutation.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class closeUpdate_args implements TBase, java.io.Serializable   {
    public long updateID;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean updateID = false;
    }

    public closeUpdate_args() {
    }

    public closeUpdate_args(
      long updateID)
    {
      this();
      this.updateID = updateID;
      this.__isset.updateID = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeUpdate_args)
        return this.equals((closeUpdate_args)that);
      return false;
    }

    public boolean equals(closeUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_updateID = true;
      boolean that_present_updateID = true;
      if (this_present_updateID || that_present_updateID) {
        if (!(this_present_updateID && that_present_updateID))
          return false;
        if (this.updateID != that.updateID)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.I64) {
              this.updateID = iprot.readI64();
              this.__isset.updateID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("closeUpdate_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "updateID";
      field.type = TType.I64;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.updateID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("closeUpdate_args(");
      sb.append("updateID:");
      sb.append(this.updateID);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class closeUpdate_result implements TBase, java.io.Serializable   {
    public cloudbase.core.data.UpdateErrors success;
    public NoSuchScanIDException nssi;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean nssi = false;
    }

    public closeUpdate_result() {
    }

    public closeUpdate_result(
      cloudbase.core.data.UpdateErrors success,
      NoSuchScanIDException nssi)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.nssi = nssi;
      this.__isset.nssi = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeUpdate_result)
        return this.equals((closeUpdate_result)that);
      return false;
    }

    public boolean equals(closeUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nssi = true && (this.nssi != null);
      boolean that_present_nssi = true && (that.nssi != null);
      if (this_present_nssi || that_present_nssi) {
        if (!(this_present_nssi && that_present_nssi))
          return false;
        if (!this.nssi.equals(that.nssi))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new cloudbase.core.data.UpdateErrors();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.nssi = new NoSuchScanIDException();
              this.nssi.read(iprot);
              this.__isset.nssi = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("closeUpdate_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nssi) {
        if (this.nssi != null) {
          field.name = "nssi";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.nssi.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("closeUpdate_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(",nssi:");
      sb.append(this.nssi.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class update_args implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.AuthInfo credentials;
    public cloudbase.core.data.KeyExtent keyExtent;
    public cloudbase.core.data.Mutation mutation;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean credentials = false;
      public boolean keyExtent = false;
      public boolean mutation = false;
    }

    public update_args() {
    }

    public update_args(
      cloudbase.core.security.thrift.AuthInfo credentials,
      cloudbase.core.data.KeyExtent keyExtent,
      cloudbase.core.data.Mutation mutation)
    {
      this();
      this.credentials = credentials;
      this.__isset.credentials = true;
      this.keyExtent = keyExtent;
      this.__isset.keyExtent = true;
      this.mutation = mutation;
      this.__isset.mutation = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && (this.credentials != null);
      boolean that_present_credentials = true && (that.credentials != null);
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_keyExtent = true && (this.keyExtent != null);
      boolean that_present_keyExtent = true && (that.keyExtent != null);
      if (this_present_keyExtent || that_present_keyExtent) {
        if (!(this_present_keyExtent && that_present_keyExtent))
          return false;
        if (!this.keyExtent.equals(that.keyExtent))
          return false;
      }

      boolean this_present_mutation = true && (this.mutation != null);
      boolean that_present_mutation = true && (that.mutation != null);
      if (this_present_mutation || that_present_mutation) {
        if (!(this_present_mutation && that_present_mutation))
          return false;
        if (!this.mutation.equals(that.mutation))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.credentials = new cloudbase.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
              this.__isset.credentials = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.keyExtent = new cloudbase.core.data.KeyExtent();
              this.keyExtent.read(iprot);
              this.__isset.keyExtent = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.STRUCT) {
              this.mutation = new cloudbase.core.data.Mutation();
              this.mutation.read(iprot);
              this.__isset.mutation = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("update_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.credentials != null) {
        field.name = "credentials";
        field.type = TType.STRUCT;
        field.id = 1;
        oprot.writeFieldBegin(field);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.keyExtent != null) {
        field.name = "keyExtent";
        field.type = TType.STRUCT;
        field.id = 2;
        oprot.writeFieldBegin(field);
        this.keyExtent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.mutation != null) {
        field.name = "mutation";
        field.type = TType.STRUCT;
        field.id = 3;
        oprot.writeFieldBegin(field);
        this.mutation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      sb.append("credentials:");
      sb.append(this.credentials.toString());
      sb.append(",keyExtent:");
      sb.append(this.keyExtent.toString());
      sb.append(",mutation:");
      sb.append(this.mutation.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class update_result implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.ThriftSecurityException sec;
    public NotServingTabletException nste;
    public ConstraintViolationException cve;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean sec = false;
      public boolean nste = false;
      public boolean cve = false;
    }

    public update_result() {
    }

    public update_result(
      cloudbase.core.security.thrift.ThriftSecurityException sec,
      NotServingTabletException nste,
      ConstraintViolationException cve)
    {
      this();
      this.sec = sec;
      this.__isset.sec = true;
      this.nste = nste;
      this.__isset.nste = true;
      this.cve = cve;
      this.__isset.cve = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      boolean this_present_nste = true && (this.nste != null);
      boolean that_present_nste = true && (that.nste != null);
      if (this_present_nste || that_present_nste) {
        if (!(this_present_nste && that_present_nste))
          return false;
        if (!this.nste.equals(that.nste))
          return false;
      }

      boolean this_present_cve = true && (this.cve != null);
      boolean that_present_cve = true && (that.cve != null);
      if (this_present_cve || that_present_cve) {
        if (!(this_present_cve && that_present_cve))
          return false;
        if (!this.cve.equals(that.cve))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.nste = new NotServingTabletException();
              this.nste.read(iprot);
              this.__isset.nste = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.STRUCT) {
              this.cve = new ConstraintViolationException();
              this.cve.read(iprot);
              this.__isset.cve = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("update_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.nste) {
        if (this.nste != null) {
          field.name = "nste";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.nste.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.cve) {
        if (this.cve != null) {
          field.name = "cve";
          field.type = TType.STRUCT;
          field.id = 3;
          oprot.writeFieldBegin(field);
          this.cve.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      sb.append("sec:");
      sb.append(this.sec.toString());
      sb.append(",nste:");
      sb.append(this.nste.toString());
      sb.append(",cve:");
      sb.append(this.cve.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class bulkImport_args implements TBase, java.io.Serializable   {
    public cloudbase.core.security.thrift.AuthInfo credentials;
    public Map<cloudbase.core.data.KeyExtent,Map<String,Long>> files;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean credentials = false;
      public boolean files = false;
    }

    public bulkImport_args() {
    }

    public bulkImport_args(
      cloudbase.core.security.thrift.AuthInfo credentials,
      Map<cloudbase.core.data.KeyExtent,Map<String,Long>> files)
    {
      this();
      this.credentials = credentials;
      this.__isset.credentials = true;
      this.files = files;
      this.__isset.files = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bulkImport_args)
        return this.equals((bulkImport_args)that);
      return false;
    }

    public boolean equals(bulkImport_args that) {
      if (that == null)
        return false;

      boolean this_present_credentials = true && (this.credentials != null);
      boolean that_present_credentials = true && (that.credentials != null);
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }

      boolean this_present_files = true && (this.files != null);
      boolean that_present_files = true && (that.files != null);
      if (this_present_files || that_present_files) {
        if (!(this_present_files && that_present_files))
          return false;
        if (!this.files.equals(that.files))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.credentials = new cloudbase.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
              this.__isset.credentials = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.MAP) {
              {
                TMap _map70 = iprot.readMapBegin();
                this.files = new HashMap<cloudbase.core.data.KeyExtent,Map<String,Long>>(2*_map70.size);
                for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                {
                  cloudbase.core.data.KeyExtent _key72;
                  Map<String,Long> _val73;
                  _key72 = new cloudbase.core.data.KeyExtent();
                  _key72.read(iprot);
                  {
                    TMap _map74 = iprot.readMapBegin();
                    _val73 = new HashMap<String,Long>(2*_map74.size);
                    for (int _i75 = 0; _i75 < _map74.size; ++_i75)
                    {
                      String _key76;
                      long _val77;
                      _key76 = iprot.readString();
                      _val77 = iprot.readI64();
                      _val73.put(_key76, _val77);
                    }
                    iprot.readMapEnd();
                  }
                  this.files.put(_key72, _val73);
                }
                iprot.readMapEnd();
              }
              this.__isset.files = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("bulkImport_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.credentials != null) {
        field.name = "credentials";
        field.type = TType.STRUCT;
        field.id = 1;
        oprot.writeFieldBegin(field);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.files != null) {
        field.name = "files";
        field.type = TType.MAP;
        field.id = 2;
        oprot.writeFieldBegin(field);
        {
          oprot.writeMapBegin(new TMap(TType.STRUCT, TType.MAP, this.files.size()));
          for (cloudbase.core.data.KeyExtent _iter78 : this.files.keySet())          {
            _iter78.write(oprot);
            {
              oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.files.get(_iter78).size()));
              for (String _iter79 : this.files.get(_iter78).keySet())              {
                oprot.writeString(_iter79);
                oprot.writeI64(this.files.get(_iter78).get(_iter79));
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("bulkImport_args(");
      sb.append("credentials:");
      sb.append(this.credentials.toString());
      sb.append(",files:");
      sb.append(this.files);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class bulkImport_result implements TBase, java.io.Serializable   {
    public List<cloudbase.core.data.KeyExtent> success;
    public cloudbase.core.security.thrift.ThriftSecurityException sec;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean sec = false;
    }

    public bulkImport_result() {
    }

    public bulkImport_result(
      List<cloudbase.core.data.KeyExtent> success,
      cloudbase.core.security.thrift.ThriftSecurityException sec)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.sec = sec;
      this.__isset.sec = true;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bulkImport_result)
        return this.equals((bulkImport_result)that);
      return false;
    }

    public boolean equals(bulkImport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sec = true && (this.sec != null);
      boolean that_present_sec = true && (that.sec != null);
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.LIST) {
              {
                TList _list80 = iprot.readListBegin();
                this.success = new ArrayList<cloudbase.core.data.KeyExtent>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  cloudbase.core.data.KeyExtent _elem82 = new cloudbase.core.data.KeyExtent();
                  _elem82 = new cloudbase.core.data.KeyExtent();
                  _elem82.read(iprot);
                  this.success.add(_elem82);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.sec = new cloudbase.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
              this.__isset.sec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("bulkImport_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
            for (cloudbase.core.data.KeyExtent _iter83 : this.success)            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.sec) {
        if (this.sec != null) {
          field.name = "sec";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.sec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("bulkImport_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",sec:");
      sb.append(this.sec.toString());
      sb.append(")");
      return sb.toString();
    }

  }

}
