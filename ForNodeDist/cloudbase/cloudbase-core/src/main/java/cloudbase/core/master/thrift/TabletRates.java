/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.master.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class TabletRates implements TBase, java.io.Serializable {
  public cloudbase.core.data.KeyExtent key;
  public double tableQueryRate;
  public double tableIngestRate;
  public long records;
  public long recordsInMemory;
  public Compacting minor;
  public Compacting major;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean key = false;
    public boolean tableQueryRate = false;
    public boolean tableIngestRate = false;
    public boolean records = false;
    public boolean recordsInMemory = false;
    public boolean minor = false;
    public boolean major = false;
  }

  public TabletRates() {
  }

  public TabletRates(
    cloudbase.core.data.KeyExtent key,
    double tableQueryRate,
    double tableIngestRate,
    long records,
    long recordsInMemory,
    Compacting minor,
    Compacting major)
  {
    this();
    this.key = key;
    this.__isset.key = true;
    this.tableQueryRate = tableQueryRate;
    this.__isset.tableQueryRate = true;
    this.tableIngestRate = tableIngestRate;
    this.__isset.tableIngestRate = true;
    this.records = records;
    this.__isset.records = true;
    this.recordsInMemory = recordsInMemory;
    this.__isset.recordsInMemory = true;
    this.minor = minor;
    this.__isset.minor = true;
    this.major = major;
    this.__isset.major = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TabletRates)
      return this.equals((TabletRates)that);
    return false;
  }

  public boolean equals(TabletRates that) {
    if (that == null)
      return false;

    boolean this_present_key = true && (this.key != null);
    boolean that_present_key = true && (that.key != null);
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_tableQueryRate = true;
    boolean that_present_tableQueryRate = true;
    if (this_present_tableQueryRate || that_present_tableQueryRate) {
      if (!(this_present_tableQueryRate && that_present_tableQueryRate))
        return false;
      if (this.tableQueryRate != that.tableQueryRate)
        return false;
    }

    boolean this_present_tableIngestRate = true;
    boolean that_present_tableIngestRate = true;
    if (this_present_tableIngestRate || that_present_tableIngestRate) {
      if (!(this_present_tableIngestRate && that_present_tableIngestRate))
        return false;
      if (this.tableIngestRate != that.tableIngestRate)
        return false;
    }

    boolean this_present_records = true;
    boolean that_present_records = true;
    if (this_present_records || that_present_records) {
      if (!(this_present_records && that_present_records))
        return false;
      if (this.records != that.records)
        return false;
    }

    boolean this_present_recordsInMemory = true;
    boolean that_present_recordsInMemory = true;
    if (this_present_recordsInMemory || that_present_recordsInMemory) {
      if (!(this_present_recordsInMemory && that_present_recordsInMemory))
        return false;
      if (this.recordsInMemory != that.recordsInMemory)
        return false;
    }

    boolean this_present_minor = true && (this.minor != null);
    boolean that_present_minor = true && (that.minor != null);
    if (this_present_minor || that_present_minor) {
      if (!(this_present_minor && that_present_minor))
        return false;
      if (!this.minor.equals(that.minor))
        return false;
    }

    boolean this_present_major = true && (this.major != null);
    boolean that_present_major = true && (that.major != null);
    if (this_present_major || that_present_major) {
      if (!(this_present_major && that_present_major))
        return false;
      if (!this.major.equals(that.major))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRUCT) {
            this.key = new cloudbase.core.data.KeyExtent();
            this.key.read(iprot);
            this.__isset.key = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.DOUBLE) {
            this.tableQueryRate = iprot.readDouble();
            this.__isset.tableQueryRate = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.DOUBLE) {
            this.tableIngestRate = iprot.readDouble();
            this.__isset.tableIngestRate = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4:
          if (field.type == TType.I64) {
            this.records = iprot.readI64();
            this.__isset.records = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5:
          if (field.type == TType.I64) {
            this.recordsInMemory = iprot.readI64();
            this.__isset.recordsInMemory = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6:
          if (field.type == TType.STRUCT) {
            this.minor = new Compacting();
            this.minor.read(iprot);
            this.__isset.minor = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7:
          if (field.type == TType.STRUCT) {
            this.major = new Compacting();
            this.major.read(iprot);
            this.__isset.major = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("TabletRates");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.key != null) {
      field.name = "key";
      field.type = TType.STRUCT;
      field.id = 1;
      oprot.writeFieldBegin(field);
      this.key.write(oprot);
      oprot.writeFieldEnd();
    }
    field.name = "tableQueryRate";
    field.type = TType.DOUBLE;
    field.id = 2;
    oprot.writeFieldBegin(field);
    oprot.writeDouble(this.tableQueryRate);
    oprot.writeFieldEnd();
    field.name = "tableIngestRate";
    field.type = TType.DOUBLE;
    field.id = 3;
    oprot.writeFieldBegin(field);
    oprot.writeDouble(this.tableIngestRate);
    oprot.writeFieldEnd();
    field.name = "records";
    field.type = TType.I64;
    field.id = 4;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.records);
    oprot.writeFieldEnd();
    field.name = "recordsInMemory";
    field.type = TType.I64;
    field.id = 5;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.recordsInMemory);
    oprot.writeFieldEnd();
    if (this.minor != null) {
      field.name = "minor";
      field.type = TType.STRUCT;
      field.id = 6;
      oprot.writeFieldBegin(field);
      this.minor.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.major != null) {
      field.name = "major";
      field.type = TType.STRUCT;
      field.id = 7;
      oprot.writeFieldBegin(field);
      this.major.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("TabletRates(");
    sb.append("key:");
    sb.append(this.key.toString());
    sb.append(",tableQueryRate:");
    sb.append(this.tableQueryRate);
    sb.append(",tableIngestRate:");
    sb.append(this.tableIngestRate);
    sb.append(",records:");
    sb.append(this.records);
    sb.append(",recordsInMemory:");
    sb.append(this.recordsInMemory);
    sb.append(",minor:");
    sb.append(this.minor.toString());
    sb.append(",major:");
    sb.append(this.major.toString());
    sb.append(")");
    return sb.toString();
  }

}

