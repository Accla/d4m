/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudbase.core.data;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;

@SuppressWarnings("serial")
public class UpdateErrors implements TBase, java.io.Serializable {
  public Map<KeyExtent,Long> failedExtents;
  public List<ConstraintViolationSummary> violationSummaries;
  public List<KeyExtent> authorizationFailures;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean failedExtents = false;
    public boolean violationSummaries = false;
    public boolean authorizationFailures = false;
  }

  public UpdateErrors() {
  }

  public UpdateErrors(
    Map<KeyExtent,Long> failedExtents,
    List<ConstraintViolationSummary> violationSummaries,
    List<KeyExtent> authorizationFailures)
  {
    this();
    this.failedExtents = failedExtents;
    this.__isset.failedExtents = true;
    this.violationSummaries = violationSummaries;
    this.__isset.violationSummaries = true;
    this.authorizationFailures = authorizationFailures;
    this.__isset.authorizationFailures = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateErrors)
      return this.equals((UpdateErrors)that);
    return false;
  }

  public boolean equals(UpdateErrors that) {
    if (that == null)
      return false;

    boolean this_present_failedExtents = true && (this.failedExtents != null);
    boolean that_present_failedExtents = true && (that.failedExtents != null);
    if (this_present_failedExtents || that_present_failedExtents) {
      if (!(this_present_failedExtents && that_present_failedExtents))
        return false;
      if (!this.failedExtents.equals(that.failedExtents))
        return false;
    }

    boolean this_present_violationSummaries = true && (this.violationSummaries != null);
    boolean that_present_violationSummaries = true && (that.violationSummaries != null);
    if (this_present_violationSummaries || that_present_violationSummaries) {
      if (!(this_present_violationSummaries && that_present_violationSummaries))
        return false;
      if (!this.violationSummaries.equals(that.violationSummaries))
        return false;
    }

    boolean this_present_authorizationFailures = true && (this.authorizationFailures != null);
    boolean that_present_authorizationFailures = true && (that.authorizationFailures != null);
    if (this_present_authorizationFailures || that_present_authorizationFailures) {
      if (!(this_present_authorizationFailures && that_present_authorizationFailures))
        return false;
      if (!this.authorizationFailures.equals(that.authorizationFailures))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.MAP) {
            {
              TMap _map8 = iprot.readMapBegin();
              this.failedExtents = new HashMap<KeyExtent,Long>(2*_map8.size);
              for (int _i9 = 0; _i9 < _map8.size; ++_i9)
              {
                KeyExtent _key10;
                long _val11;
                _key10 = new KeyExtent();
                _key10.read(iprot);
                _val11 = iprot.readI64();
                this.failedExtents.put(_key10, _val11);
              }
              iprot.readMapEnd();
            }
            this.__isset.failedExtents = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.LIST) {
            {
              TList _list12 = iprot.readListBegin();
              this.violationSummaries = new ArrayList<ConstraintViolationSummary>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                ConstraintViolationSummary _elem14 = new ConstraintViolationSummary();
                _elem14 = new ConstraintViolationSummary();
                _elem14.read(iprot);
                this.violationSummaries.add(_elem14);
              }
              iprot.readListEnd();
            }
            this.__isset.violationSummaries = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.LIST) {
            {
              TList _list15 = iprot.readListBegin();
              this.authorizationFailures = new ArrayList<KeyExtent>(_list15.size);
              for (int _i16 = 0; _i16 < _list15.size; ++_i16)
              {
                KeyExtent _elem17 = new KeyExtent();
                _elem17 = new KeyExtent();
                _elem17.read(iprot);
                this.authorizationFailures.add(_elem17);
              }
              iprot.readListEnd();
            }
            this.__isset.authorizationFailures = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("UpdateErrors");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.failedExtents != null) {
      field.name = "failedExtents";
      field.type = TType.MAP;
      field.id = 1;
      oprot.writeFieldBegin(field);
      {
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I64, this.failedExtents.size()));
        for (KeyExtent _iter18 : this.failedExtents.keySet())        {
          _iter18.write(oprot);
          oprot.writeI64(this.failedExtents.get(_iter18));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.violationSummaries != null) {
      field.name = "violationSummaries";
      field.type = TType.LIST;
      field.id = 2;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.violationSummaries.size()));
        for (ConstraintViolationSummary _iter19 : this.violationSummaries)        {
          _iter19.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.authorizationFailures != null) {
      field.name = "authorizationFailures";
      field.type = TType.LIST;
      field.id = 3;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.authorizationFailures.size()));
        for (KeyExtent _iter20 : this.authorizationFailures)        {
          _iter20.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateErrors(");
    sb.append("failedExtents:");
    sb.append(this.failedExtents);
    sb.append(",violationSummaries:");
    sb.append(this.violationSummaries);
    sb.append(",authorizationFailures:");
    sb.append(this.authorizationFailures);
    sb.append(")");
    return sb.toString();
  }

}

