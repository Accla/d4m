/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class FieldSchema implements TBase, java.io.Serializable {
  private String name;
  private String type;
  private String comment;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean name = false;
    public boolean type = false;
    public boolean comment = false;
  }

  public FieldSchema() {
  }

  public FieldSchema(
    String name,
    String type,
    String comment)
  {
    this();
    this.name = name;
    this.__isset.name = true;
    this.type = type;
    this.__isset.type = true;
    this.comment = comment;
    this.__isset.comment = true;
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
    this.__isset.name = true;
  }

  public void unsetName() {
    this.__isset.name = false;
  }

  public String getType() {
    return this.type;
  }

  public void setType(String type) {
    this.type = type;
    this.__isset.type = true;
  }

  public void unsetType() {
    this.__isset.type = false;
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
    this.__isset.comment = true;
  }

  public void unsetComment() {
    this.__isset.comment = false;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FieldSchema)
      return this.equals((FieldSchema)that);
    return false;
  }

  public boolean equals(FieldSchema that) {
    if (that == null)
      return false;

    boolean this_present_name = true && (this.name != null);
    boolean that_present_name = true && (that.name != null);
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && (this.type != null);
    boolean that_present_type = true && (that.type != null);
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_comment = true && (this.comment != null);
    boolean that_present_comment = true && (that.comment != null);
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
            this.__isset.name = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.STRING) {
            this.type = iprot.readString();
            this.__isset.type = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
            this.__isset.comment = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("FieldSchema");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.name != null) {
      field.name = "name";
      field.type = TType.STRING;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      field.name = "type";
      field.type = TType.STRING;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.comment != null) {
      field.name = "comment";
      field.type = TType.STRING;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("FieldSchema(");
    sb.append("name:");
    sb.append(this.name);
    sb.append(",type:");
    sb.append(this.type);
    sb.append(",comment:");
    sb.append(this.comment);
    sb.append(")");
    return sb.toString();
  }

}

