/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class ThriftMetaStore {

/**
 * This interface is deprecated.
 */
public interface Iface extends com.facebook.fb303.FacebookService.Iface {

public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

public List<String> get_tables(String db_name, String pattern) throws MetaException, UnknownTableException, UnknownDBException, TException;

public Map<String,String> get_schema(String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

public void alter_table(String db_name, String table_name, Map<String,String> schema) throws MetaException, UnknownTableException, UnknownDBException, TException;

public void create_table(String db_name, String table_name, Map<String,String> schema) throws MetaException, UnknownDBException, TException;

public void drop_table(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

public void truncate_table(String db_name, String table_name, String partition) throws MetaException, UnknownTableException, UnknownDBException, TException;

public boolean table_exists(String db_name, String table_name) throws MetaException, UnknownDBException, TException;

public List<String> get_partitions(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

public List<String> get_dbs() throws MetaException, TException;

public List<String> cat(String db_name, String table_name, String partition, int high) throws MetaException, UnknownDBException, UnknownTableException, TException;

}

public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
public Client(TProtocol prot)
{
this(prot, prot);
}

public Client(TProtocol iprot, TProtocol oprot)
{
super(iprot, oprot);
}

public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_get_fields(db_name, table_name);
return recv_get_fields();
}

public void send_get_fields(String db_name, String table_name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_fields", TMessageType.CALL, seqid_));
get_fields_args args = new get_fields_args();
args.db_name = db_name;
args.table_name = table_name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<FieldSchema> recv_get_fields() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_fields_result result = new get_fields_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_fields failed: unknown result");
}

public List<String> get_tables(String db_name, String pattern) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_get_tables(db_name, pattern);
return recv_get_tables();
}

public void send_get_tables(String db_name, String pattern) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_tables", TMessageType.CALL, seqid_));
get_tables_args args = new get_tables_args();
args.db_name = db_name;
args.pattern = pattern;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<String> recv_get_tables() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_tables_result result = new get_tables_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_tables failed: unknown result");
}

public Map<String,String> get_schema(String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_get_schema(table_name);
return recv_get_schema();
}

public void send_get_schema(String table_name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_schema", TMessageType.CALL, seqid_));
get_schema_args args = new get_schema_args();
args.table_name = table_name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Map<String,String> recv_get_schema() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_schema_result result = new get_schema_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_schema failed: unknown result");
}

public void alter_table(String db_name, String table_name, Map<String,String> schema) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_alter_table(db_name, table_name, schema);
recv_alter_table();
}

public void send_alter_table(String db_name, String table_name, Map<String,String> schema) throws TException
{
oprot_.writeMessageBegin(new TMessage("alter_table", TMessageType.CALL, seqid_));
alter_table_args args = new alter_table_args();
args.db_name = db_name;
args.table_name = table_name;
args.schema = schema;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_alter_table() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
alter_table_result result = new alter_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
return;
}

public void create_table(String db_name, String table_name, Map<String,String> schema) throws MetaException, UnknownDBException, TException
{
send_create_table(db_name, table_name, schema);
recv_create_table();
}

public void send_create_table(String db_name, String table_name, Map<String,String> schema) throws TException
{
oprot_.writeMessageBegin(new TMessage("create_table", TMessageType.CALL, seqid_));
create_table_args args = new create_table_args();
args.db_name = db_name;
args.table_name = table_name;
args.schema = schema;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_create_table() throws MetaException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
create_table_result result = new create_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
return;
}

public void drop_table(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_drop_table(db_name, table_name);
recv_drop_table();
}

public void send_drop_table(String db_name, String table_name) throws TException
{
oprot_.writeMessageBegin(new TMessage("drop_table", TMessageType.CALL, seqid_));
drop_table_args args = new drop_table_args();
args.db_name = db_name;
args.table_name = table_name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_drop_table() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
drop_table_result result = new drop_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
return;
}

public void truncate_table(String db_name, String table_name, String partition) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_truncate_table(db_name, table_name, partition);
recv_truncate_table();
}

public void send_truncate_table(String db_name, String table_name, String partition) throws TException
{
oprot_.writeMessageBegin(new TMessage("truncate_table", TMessageType.CALL, seqid_));
truncate_table_args args = new truncate_table_args();
args.db_name = db_name;
args.table_name = table_name;
args.partition = partition;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_truncate_table() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
truncate_table_result result = new truncate_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
return;
}

public boolean table_exists(String db_name, String table_name) throws MetaException, UnknownDBException, TException
{
send_table_exists(db_name, table_name);
return recv_table_exists();
}

public void send_table_exists(String db_name, String table_name) throws TException
{
oprot_.writeMessageBegin(new TMessage("table_exists", TMessageType.CALL, seqid_));
table_exists_args args = new table_exists_args();
args.db_name = db_name;
args.table_name = table_name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_table_exists() throws MetaException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
table_exists_result result = new table_exists_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "table_exists failed: unknown result");
}

public List<String> get_partitions(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_get_partitions(db_name, table_name);
return recv_get_partitions();
}

public void send_get_partitions(String db_name, String table_name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_partitions", TMessageType.CALL, seqid_));
get_partitions_args args = new get_partitions_args();
args.db_name = db_name;
args.table_name = table_name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<String> recv_get_partitions() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_partitions_result result = new get_partitions_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partitions failed: unknown result");
}

public List<String> get_dbs() throws MetaException, TException
{
send_get_dbs();
return recv_get_dbs();
}

public void send_get_dbs() throws TException
{
oprot_.writeMessageBegin(new TMessage("get_dbs", TMessageType.CALL, seqid_));
get_dbs_args args = new get_dbs_args();
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<String> recv_get_dbs() throws MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_dbs_result result = new get_dbs_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch) {
  throw result.ouch;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_dbs failed: unknown result");
}

public List<String> cat(String db_name, String table_name, String partition, int high) throws MetaException, UnknownDBException, UnknownTableException, TException
{
send_cat(db_name, table_name, partition, high);
return recv_cat();
}

public void send_cat(String db_name, String table_name, String partition, int high) throws TException
{
oprot_.writeMessageBegin(new TMessage("cat", TMessageType.CALL, seqid_));
cat_args args = new cat_args();
args.db_name = db_name;
args.table_name = table_name;
args.partition = partition;
args.high = high;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<String> recv_cat() throws MetaException, UnknownDBException, UnknownTableException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
cat_result result = new cat_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "cat failed: unknown result");
}

}
public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor {
public Processor(Iface iface)
{
super(iface);
iface_ = iface;
processMap_.put("get_fields", new get_fields());
processMap_.put("get_tables", new get_tables());
processMap_.put("get_schema", new get_schema());
processMap_.put("alter_table", new alter_table());
processMap_.put("create_table", new create_table());
processMap_.put("drop_table", new drop_table());
processMap_.put("truncate_table", new truncate_table());
processMap_.put("table_exists", new table_exists());
processMap_.put("get_partitions", new get_partitions());
processMap_.put("get_dbs", new get_dbs());
processMap_.put("cat", new cat());
}

private Iface iface_;

public boolean process(TProtocol iprot, TProtocol oprot) throws TException
{
TMessage msg = iprot.readMessageBegin();
ProcessFunction fn = processMap_.get(msg.name);
if (fn == null) {
  TProtocolUtil.skip(iprot, TType.STRUCT);
  iprot.readMessageEnd();
  TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
  oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
  x.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
  return true;
}
fn.process(msg.seqid, iprot, oprot);
return true;
}

private class get_fields implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_fields_args args = new get_fields_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_fields_result result = new get_fields_result();
  try {
    result.success = iface_.get_fields(args.db_name, args.table_name);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_fields", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_tables implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_tables_args args = new get_tables_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_tables_result result = new get_tables_result();
  try {
    result.success = iface_.get_tables(args.db_name, args.pattern);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_tables", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_schema implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_schema_args args = new get_schema_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_schema_result result = new get_schema_result();
  try {
    result.success = iface_.get_schema(args.table_name);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_schema", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class alter_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  alter_table_args args = new alter_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  alter_table_result result = new alter_table_result();
  try {
    iface_.alter_table(args.db_name, args.table_name, args.schema);
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("alter_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class create_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  create_table_args args = new create_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  create_table_result result = new create_table_result();
  try {
    iface_.create_table(args.db_name, args.table_name, args.schema);
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownDBException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  }
  oprot.writeMessageBegin(new TMessage("create_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class drop_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  drop_table_args args = new drop_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  drop_table_result result = new drop_table_result();
  try {
    iface_.drop_table(args.db_name, args.table_name);
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("drop_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class truncate_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  truncate_table_args args = new truncate_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  truncate_table_result result = new truncate_table_result();
  try {
    iface_.truncate_table(args.db_name, args.table_name, args.partition);
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("truncate_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class table_exists implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  table_exists_args args = new table_exists_args();
  args.read(iprot);
  iprot.readMessageEnd();
  table_exists_result result = new table_exists_result();
  try {
    result.success = iface_.table_exists(args.db_name, args.table_name);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownDBException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  }
  oprot.writeMessageBegin(new TMessage("table_exists", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_partitions implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_partitions_args args = new get_partitions_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_partitions_result result = new get_partitions_result();
  try {
    result.success = iface_.get_partitions(args.db_name, args.table_name);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_partitions", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_dbs implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_dbs_args args = new get_dbs_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_dbs_result result = new get_dbs_result();
  try {
    result.success = iface_.get_dbs();
    result.__isset.success = true;
  } catch (MetaException ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  }
  oprot.writeMessageBegin(new TMessage("get_dbs", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class cat implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  cat_args args = new cat_args();
  args.read(iprot);
  iprot.readMessageEnd();
  cat_result result = new cat_result();
  try {
    result.success = iface_.cat(args.db_name, args.table_name, args.partition, args.high);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownDBException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownTableException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("cat", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

}

public static class get_fields_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
}

public get_fields_args() {
}

public get_fields_args(
String db_name,
String table_name)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_fields_args)
  return this.equals((get_fields_args)that);
return false;
}

public boolean equals(get_fields_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_fields_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_fields_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(")");
return sb.toString();
}

}

public static class get_fields_result implements TBase, java.io.Serializable {
private List<FieldSchema> success;
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public get_fields_result() {
}

public get_fields_result(
List<FieldSchema> success,
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<FieldSchema> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(FieldSchema elem) {
if (this.success == null) {
  this.success = new ArrayList<FieldSchema>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<FieldSchema> getSuccess() {
return this.success;
}

public void setSuccess(List<FieldSchema> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_fields_result)
  return this.equals((get_fields_result)that);
return false;
}

public boolean equals(get_fields_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list89 = iprot.readListBegin();
          this.success = new ArrayList<FieldSchema>(_list89.size);
          for (int _i90 = 0; _i90 < _list89.size; ++_i90)
          {
            FieldSchema _elem91 = new FieldSchema();
            _elem91 = new FieldSchema();
            _elem91.read(iprot);
            this.success.add(_elem91);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_fields_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
      for (FieldSchema _iter92 : this.success)      {
        _iter92.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_fields_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_tables_args implements TBase, java.io.Serializable {
private String db_name;
private String pattern;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean pattern = false;
}

public get_tables_args() {
}

public get_tables_args(
String db_name,
String pattern)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.pattern = pattern;
this.__isset.pattern = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getPattern() {
return this.pattern;
}

public void setPattern(String pattern) {
this.pattern = pattern;
this.__isset.pattern = true;
}

public void unsetPattern() {
this.__isset.pattern = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_tables_args)
  return this.equals((get_tables_args)that);
return false;
}

public boolean equals(get_tables_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_pattern = true && (this.pattern != null);
boolean that_present_pattern = true && (that.pattern != null);
if (this_present_pattern || that_present_pattern) {
  if (!(this_present_pattern && that_present_pattern))
    return false;
  if (!this.pattern.equals(that.pattern))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.pattern = iprot.readString();
        this.__isset.pattern = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_tables_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.pattern != null) {
  field.name = "pattern";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.pattern);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_tables_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",pattern:");
sb.append(this.pattern);
sb.append(")");
return sb.toString();
}

}

public static class get_tables_result implements TBase, java.io.Serializable {
private List<String> success;
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public get_tables_result() {
}

public get_tables_result(
List<String> success,
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<String> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(String elem) {
if (this.success == null) {
  this.success = new ArrayList<String>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<String> getSuccess() {
return this.success;
}

public void setSuccess(List<String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_tables_result)
  return this.equals((get_tables_result)that);
return false;
}

public boolean equals(get_tables_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list93 = iprot.readListBegin();
          this.success = new ArrayList<String>(_list93.size);
          for (int _i94 = 0; _i94 < _list93.size; ++_i94)
          {
            String _elem95 = null;
            _elem95 = iprot.readString();
            this.success.add(_elem95);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_tables_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
      for (String _iter96 : this.success)      {
        oprot.writeString(_iter96);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_tables_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_schema_args implements TBase, java.io.Serializable {
private String table_name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean table_name = false;
}

public get_schema_args() {
}

public get_schema_args(
String table_name)
{
this();
this.table_name = table_name;
this.__isset.table_name = true;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_schema_args)
  return this.equals((get_schema_args)that);
return false;
}

public boolean equals(get_schema_args that) {
if (that == null)
  return false;

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_schema_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_schema_args(");
sb.append("table_name:");
sb.append(this.table_name);
sb.append(")");
return sb.toString();
}

}

public static class get_schema_result implements TBase, java.io.Serializable {
private Map<String,String> success;
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public get_schema_result() {
}

public get_schema_result(
Map<String,String> success,
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public void putToSuccess(String key, String val) {
if (this.success == null) {
  this.success = new HashMap<String,String>();
}
this.success.put(key, val);
this.__isset.success = true;
}

public Map<String,String> getSuccess() {
return this.success;
}

public void setSuccess(Map<String,String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_schema_result)
  return this.equals((get_schema_result)that);
return false;
}

public boolean equals(get_schema_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.MAP) {
        {
          TMap _map97 = iprot.readMapBegin();
          this.success = new HashMap<String,String>(2*_map97.size);
          for (int _i98 = 0; _i98 < _map97.size; ++_i98)
          {
            String _key99;
            String _val100;
            _key99 = iprot.readString();
            _val100 = iprot.readString();
            this.success.put(_key99, _val100);
          }
          iprot.readMapEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_schema_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.MAP;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
      for (String _iter101 : this.success.keySet())      {
        oprot.writeString(_iter101);
        oprot.writeString(this.success.get(_iter101));
      }
      oprot.writeMapEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -2;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_schema_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class alter_table_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;
private Map<String,String> schema;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
public boolean schema = false;
}

public alter_table_args() {
}

public alter_table_args(
String db_name,
String table_name,
Map<String,String> schema)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
this.schema = schema;
this.__isset.schema = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public int getSchemaSize() {
return (this.schema == null) ? 0 : this.schema.size();
}

public void putToSchema(String key, String val) {
if (this.schema == null) {
  this.schema = new HashMap<String,String>();
}
this.schema.put(key, val);
this.__isset.schema = true;
}

public Map<String,String> getSchema() {
return this.schema;
}

public void setSchema(Map<String,String> schema) {
this.schema = schema;
this.__isset.schema = true;
}

public void unsetSchema() {
this.schema = null;
this.__isset.schema = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof alter_table_args)
  return this.equals((alter_table_args)that);
return false;
}

public boolean equals(alter_table_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

boolean this_present_schema = true && (this.schema != null);
boolean that_present_schema = true && (that.schema != null);
if (this_present_schema || that_present_schema) {
  if (!(this_present_schema && that_present_schema))
    return false;
  if (!this.schema.equals(that.schema))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.MAP) {
        {
          TMap _map102 = iprot.readMapBegin();
          this.schema = new HashMap<String,String>(2*_map102.size);
          for (int _i103 = 0; _i103 < _map102.size; ++_i103)
          {
            String _key104;
            String _val105;
            _key104 = iprot.readString();
            _val105 = iprot.readString();
            this.schema.put(_key104, _val105);
          }
          iprot.readMapEnd();
        }
        this.__isset.schema = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("alter_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
if (this.schema != null) {
  field.name = "schema";
  field.type = TType.MAP;
  field.id = -3;
  oprot.writeFieldBegin(field);
  {
    oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.schema.size()));
    for (String _iter106 : this.schema.keySet())    {
      oprot.writeString(_iter106);
      oprot.writeString(this.schema.get(_iter106));
    }
    oprot.writeMapEnd();
  }
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("alter_table_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(",schema:");
sb.append(this.schema);
sb.append(")");
return sb.toString();
}

}

public static class alter_table_result implements TBase, java.io.Serializable {
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public alter_table_result() {
}

public alter_table_result(
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof alter_table_result)
  return this.equals((alter_table_result)that);
return false;
}

public boolean equals(alter_table_result that) {
if (that == null)
  return false;

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -6:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("alter_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -6;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("alter_table_result(");
sb.append("ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class create_table_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;
private Map<String,String> schema;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
public boolean schema = false;
}

public create_table_args() {
}

public create_table_args(
String db_name,
String table_name,
Map<String,String> schema)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
this.schema = schema;
this.__isset.schema = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public int getSchemaSize() {
return (this.schema == null) ? 0 : this.schema.size();
}

public void putToSchema(String key, String val) {
if (this.schema == null) {
  this.schema = new HashMap<String,String>();
}
this.schema.put(key, val);
this.__isset.schema = true;
}

public Map<String,String> getSchema() {
return this.schema;
}

public void setSchema(Map<String,String> schema) {
this.schema = schema;
this.__isset.schema = true;
}

public void unsetSchema() {
this.schema = null;
this.__isset.schema = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_table_args)
  return this.equals((create_table_args)that);
return false;
}

public boolean equals(create_table_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

boolean this_present_schema = true && (this.schema != null);
boolean that_present_schema = true && (that.schema != null);
if (this_present_schema || that_present_schema) {
  if (!(this_present_schema && that_present_schema))
    return false;
  if (!this.schema.equals(that.schema))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.MAP) {
        {
          TMap _map107 = iprot.readMapBegin();
          this.schema = new HashMap<String,String>(2*_map107.size);
          for (int _i108 = 0; _i108 < _map107.size; ++_i108)
          {
            String _key109;
            String _val110;
            _key109 = iprot.readString();
            _val110 = iprot.readString();
            this.schema.put(_key109, _val110);
          }
          iprot.readMapEnd();
        }
        this.__isset.schema = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
if (this.schema != null) {
  field.name = "schema";
  field.type = TType.MAP;
  field.id = -3;
  oprot.writeFieldBegin(field);
  {
    oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.schema.size()));
    for (String _iter111 : this.schema.keySet())    {
      oprot.writeString(_iter111);
      oprot.writeString(this.schema.get(_iter111));
    }
    oprot.writeMapEnd();
  }
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_table_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(",schema:");
sb.append(this.schema);
sb.append(")");
return sb.toString();
}

}

public static class create_table_result implements TBase, java.io.Serializable {
private MetaException ouch1;
private UnknownDBException ouch2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean ouch1 = false;
public boolean ouch2 = false;
}

public create_table_result() {
}

public create_table_result(
MetaException ouch1,
UnknownDBException ouch2)
{
this();
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownDBException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownDBException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_table_result)
  return this.equals((create_table_result)that);
return false;
}

public boolean equals(create_table_result that) {
if (that == null)
  return false;

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownDBException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_table_result(");
sb.append("ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(")");
return sb.toString();
}

}

public static class drop_table_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
}

public drop_table_args() {
}

public drop_table_args(
String db_name,
String table_name)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_table_args)
  return this.equals((drop_table_args)that);
return false;
}

public boolean equals(drop_table_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_table_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(")");
return sb.toString();
}

}

public static class drop_table_result implements TBase, java.io.Serializable {
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public drop_table_result() {
}

public drop_table_result(
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_table_result)
  return this.equals((drop_table_result)that);
return false;
}

public boolean equals(drop_table_result that) {
if (that == null)
  return false;

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_table_result(");
sb.append("ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class truncate_table_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;
private String partition;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
public boolean partition = false;
}

public truncate_table_args() {
}

public truncate_table_args(
String db_name,
String table_name,
String partition)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
this.partition = partition;
this.__isset.partition = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public String getPartition() {
return this.partition;
}

public void setPartition(String partition) {
this.partition = partition;
this.__isset.partition = true;
}

public void unsetPartition() {
this.__isset.partition = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof truncate_table_args)
  return this.equals((truncate_table_args)that);
return false;
}

public boolean equals(truncate_table_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

boolean this_present_partition = true && (this.partition != null);
boolean that_present_partition = true && (that.partition != null);
if (this_present_partition || that_present_partition) {
  if (!(this_present_partition && that_present_partition))
    return false;
  if (!this.partition.equals(that.partition))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRING) {
        this.partition = iprot.readString();
        this.__isset.partition = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("truncate_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
if (this.partition != null) {
  field.name = "partition";
  field.type = TType.STRING;
  field.id = -3;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.partition);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("truncate_table_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(",partition:");
sb.append(this.partition);
sb.append(")");
return sb.toString();
}

}

public static class truncate_table_result implements TBase, java.io.Serializable {
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public truncate_table_result() {
}

public truncate_table_result(
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof truncate_table_result)
  return this.equals((truncate_table_result)that);
return false;
}

public boolean equals(truncate_table_result that) {
if (that == null)
  return false;

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -6:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("truncate_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -6;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("truncate_table_result(");
sb.append("ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class table_exists_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
}

public table_exists_args() {
}

public table_exists_args(
String db_name,
String table_name)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof table_exists_args)
  return this.equals((table_exists_args)that);
return false;
}

public boolean equals(table_exists_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("table_exists_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("table_exists_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(")");
return sb.toString();
}

}

public static class table_exists_result implements TBase, java.io.Serializable {
private boolean success;
private MetaException ouch1;
private UnknownDBException ouch2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
}

public table_exists_result() {
}

public table_exists_result(
boolean success,
MetaException ouch1,
UnknownDBException ouch2)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownDBException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownDBException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof table_exists_result)
  return this.equals((table_exists_result)that);
return false;
}

public boolean equals(table_exists_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownDBException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("table_exists_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("table_exists_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_partitions_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
}

public get_partitions_args() {
}

public get_partitions_args(
String db_name,
String table_name)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_partitions_args)
  return this.equals((get_partitions_args)that);
return false;
}

public boolean equals(get_partitions_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_partitions_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_partitions_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(")");
return sb.toString();
}

}

public static class get_partitions_result implements TBase, java.io.Serializable {
private List<String> success;
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public get_partitions_result() {
}

public get_partitions_result(
List<String> success,
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<String> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(String elem) {
if (this.success == null) {
  this.success = new ArrayList<String>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<String> getSuccess() {
return this.success;
}

public void setSuccess(List<String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_partitions_result)
  return this.equals((get_partitions_result)that);
return false;
}

public boolean equals(get_partitions_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list112 = iprot.readListBegin();
          this.success = new ArrayList<String>(_list112.size);
          for (int _i113 = 0; _i113 < _list112.size; ++_i113)
          {
            String _elem114 = null;
            _elem114 = iprot.readString();
            this.success.add(_elem114);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_partitions_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
      for (String _iter115 : this.success)      {
        oprot.writeString(_iter115);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_partitions_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_dbs_args implements TBase, java.io.Serializable {
public get_dbs_args() {
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_dbs_args)
  return this.equals((get_dbs_args)that);
return false;
}

public boolean equals(get_dbs_args that) {
if (that == null)
  return false;

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_dbs_args");
oprot.writeStructBegin(struct);
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_dbs_args(");
sb.append(")");
return sb.toString();
}

}

public static class get_dbs_result implements TBase, java.io.Serializable {
private List<String> success;
private MetaException ouch;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch = false;
}

public get_dbs_result() {
}

public get_dbs_result(
List<String> success,
MetaException ouch)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch = ouch;
this.__isset.ouch = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<String> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(String elem) {
if (this.success == null) {
  this.success = new ArrayList<String>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<String> getSuccess() {
return this.success;
}

public void setSuccess(List<String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch() {
return this.ouch;
}

public void setOuch(MetaException ouch) {
this.ouch = ouch;
this.__isset.ouch = true;
}

public void unsetOuch() {
this.ouch = null;
this.__isset.ouch = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_dbs_result)
  return this.equals((get_dbs_result)that);
return false;
}

public boolean equals(get_dbs_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch = true && (this.ouch != null);
boolean that_present_ouch = true && (that.ouch != null);
if (this_present_ouch || that_present_ouch) {
  if (!(this_present_ouch && that_present_ouch))
    return false;
  if (!this.ouch.equals(that.ouch))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list116 = iprot.readListBegin();
          this.success = new ArrayList<String>(_list116.size);
          for (int _i117 = 0; _i117 < _list116.size; ++_i117)
          {
            String _elem118 = null;
            _elem118 = iprot.readString();
            this.success.add(_elem118);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -1:
      if (field.type == TType.STRUCT) {
        this.ouch = new MetaException();
        this.ouch.read(iprot);
        this.__isset.ouch = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_dbs_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
      for (String _iter119 : this.success)      {
        oprot.writeString(_iter119);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch) {
  if (this.ouch != null) {
    field.name = "ouch";
    field.type = TType.STRUCT;
    field.id = -1;
    oprot.writeFieldBegin(field);
    this.ouch.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_dbs_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch:");
sb.append(this.ouch.toString());
sb.append(")");
return sb.toString();
}

}

public static class cat_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;
private String partition;
private int high;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
public boolean partition = false;
public boolean high = false;
}

public cat_args() {
}

public cat_args(
String db_name,
String table_name,
String partition,
int high)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
this.partition = partition;
this.__isset.partition = true;
this.high = high;
this.__isset.high = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public String getPartition() {
return this.partition;
}

public void setPartition(String partition) {
this.partition = partition;
this.__isset.partition = true;
}

public void unsetPartition() {
this.__isset.partition = false;
}

public int getHigh() {
return this.high;
}

public void setHigh(int high) {
this.high = high;
this.__isset.high = true;
}

public void unsetHigh() {
this.__isset.high = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof cat_args)
  return this.equals((cat_args)that);
return false;
}

public boolean equals(cat_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

boolean this_present_partition = true && (this.partition != null);
boolean that_present_partition = true && (that.partition != null);
if (this_present_partition || that_present_partition) {
  if (!(this_present_partition && that_present_partition))
    return false;
  if (!this.partition.equals(that.partition))
    return false;
}

boolean this_present_high = true;
boolean that_present_high = true;
if (this_present_high || that_present_high) {
  if (!(this_present_high && that_present_high))
    return false;
  if (this.high != that.high)
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRING) {
        this.partition = iprot.readString();
        this.__isset.partition = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.I32) {
        this.high = iprot.readI32();
        this.__isset.high = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("cat_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
if (this.partition != null) {
  field.name = "partition";
  field.type = TType.STRING;
  field.id = -3;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.partition);
  oprot.writeFieldEnd();
}
field.name = "high";
field.type = TType.I32;
field.id = -4;
oprot.writeFieldBegin(field);
oprot.writeI32(this.high);
oprot.writeFieldEnd();
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("cat_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(",partition:");
sb.append(this.partition);
sb.append(",high:");
sb.append(this.high);
sb.append(")");
return sb.toString();
}

}

public static class cat_result implements TBase, java.io.Serializable {
private List<String> success;
private MetaException ouch1;
private UnknownDBException ouch2;
private UnknownTableException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public cat_result() {
}

public cat_result(
List<String> success,
MetaException ouch1,
UnknownDBException ouch2,
UnknownTableException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<String> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(String elem) {
if (this.success == null) {
  this.success = new ArrayList<String>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<String> getSuccess() {
return this.success;
}

public void setSuccess(List<String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownDBException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownDBException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownTableException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownTableException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof cat_result)
  return this.equals((cat_result)that);
return false;
}

public boolean equals(cat_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list120 = iprot.readListBegin();
          this.success = new ArrayList<String>(_list120.size);
          for (int _i121 = 0; _i121 < _list120.size; ++_i121)
          {
            String _elem122 = null;
            _elem122 = iprot.readString();
            this.success.add(_elem122);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -6:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownDBException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -7:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownTableException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("cat_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
      for (String _iter123 : this.success)      {
        oprot.writeString(_iter123);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -6;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -7;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("cat_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

}
