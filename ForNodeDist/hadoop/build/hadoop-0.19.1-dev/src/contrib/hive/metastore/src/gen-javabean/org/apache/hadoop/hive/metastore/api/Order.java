/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Order implements TBase, java.io.Serializable {
private String col;
private int order;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean col = false;
public boolean order = false;
}

public Order() {
}

public Order(
String col,
int order)
{
this();
this.col = col;
this.__isset.col = true;
this.order = order;
this.__isset.order = true;
}

public String getCol() {
return this.col;
}

public void setCol(String col) {
this.col = col;
this.__isset.col = true;
}

public void unsetCol() {
this.__isset.col = false;
}

public int getOrder() {
return this.order;
}

public void setOrder(int order) {
this.order = order;
this.__isset.order = true;
}

public void unsetOrder() {
this.__isset.order = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof Order)
  return this.equals((Order)that);
return false;
}

public boolean equals(Order that) {
if (that == null)
  return false;

boolean this_present_col = true && (this.col != null);
boolean that_present_col = true && (that.col != null);
if (this_present_col || that_present_col) {
if (!(this_present_col && that_present_col))
  return false;
if (!this.col.equals(that.col))
  return false;
}

boolean this_present_order = true;
boolean that_present_order = true;
if (this_present_order || that_present_order) {
if (!(this_present_order && that_present_order))
  return false;
if (this.order != that.order)
  return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
field = iprot.readFieldBegin();
if (field.type == TType.STOP) { 
  break;
}
switch (field.id)
{
  case 1:
    if (field.type == TType.STRING) {
      this.col = iprot.readString();
      this.__isset.col = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case 2:
    if (field.type == TType.I32) {
      this.order = iprot.readI32();
      this.__isset.order = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  default:
    TProtocolUtil.skip(iprot, field.type);
    break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("Order");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.col != null) {
field.name = "col";
field.type = TType.STRING;
field.id = 1;
oprot.writeFieldBegin(field);
oprot.writeString(this.col);
oprot.writeFieldEnd();
}
field.name = "order";
field.type = TType.I32;
field.id = 2;
oprot.writeFieldBegin(field);
oprot.writeI32(this.order);
oprot.writeFieldEnd();
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("Order(");
sb.append("col:");
sb.append(this.col);
sb.append(",order:");
sb.append(this.order);
sb.append(")");
return sb.toString();
}

}

