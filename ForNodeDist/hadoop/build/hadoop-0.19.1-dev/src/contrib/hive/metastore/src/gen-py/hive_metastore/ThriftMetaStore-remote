#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ThriftMetaStore
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   get_fields(string db_name, string table_name)'
  print '   get_tables(string db_name, string pattern)'
  print '   get_schema(string table_name)'
  print '  void alter_table(string db_name, string table_name,  schema)'
  print '  void create_table(string db_name, string table_name,  schema)'
  print '  void drop_table(string db_name, string table_name)'
  print '  void truncate_table(string db_name, string table_name, string partition)'
  print '  bool table_exists(string db_name, string table_name)'
  print '   get_partitions(string db_name, string table_name)'
  print '   get_dbs()'
  print '   cat(string db_name, string table_name, string partition, i32 high)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ThriftMetaStore.Client(protocol)
transport.open()

if cmd == 'get_fields':
  if len(args) != 2:
    print 'get_fields requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_fields(args[0],args[1],))

elif cmd == 'get_tables':
  if len(args) != 2:
    print 'get_tables requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_tables(args[0],args[1],))

elif cmd == 'get_schema':
  if len(args) != 1:
    print 'get_schema requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_schema(args[0],))

elif cmd == 'alter_table':
  if len(args) != 3:
    print 'alter_table requires 3 args'
    sys.exit(1)
  pp.pprint(client.alter_table(args[0],args[1],eval(args[2]),))

elif cmd == 'create_table':
  if len(args) != 3:
    print 'create_table requires 3 args'
    sys.exit(1)
  pp.pprint(client.create_table(args[0],args[1],eval(args[2]),))

elif cmd == 'drop_table':
  if len(args) != 2:
    print 'drop_table requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_table(args[0],args[1],))

elif cmd == 'truncate_table':
  if len(args) != 3:
    print 'truncate_table requires 3 args'
    sys.exit(1)
  pp.pprint(client.truncate_table(args[0],args[1],args[2],))

elif cmd == 'table_exists':
  if len(args) != 2:
    print 'table_exists requires 2 args'
    sys.exit(1)
  pp.pprint(client.table_exists(args[0],args[1],))

elif cmd == 'get_partitions':
  if len(args) != 2:
    print 'get_partitions requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_partitions(args[0],args[1],))

elif cmd == 'get_dbs':
  if len(args) != 0:
    print 'get_dbs requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_dbs())

elif cmd == 'cat':
  if len(args) != 4:
    print 'cat requires 4 args'
    sys.exit(1)
  pp.pprint(client.cat(args[0],args[1],args[2],eval(args[3]),))

transport.close()
