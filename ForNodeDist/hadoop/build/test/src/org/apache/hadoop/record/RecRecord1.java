// File generated by hadoop record compiler. Do not edit.
package org.apache.hadoop.record;

public class RecRecord1 extends org.apache.hadoop.record.Record {
  private static final org.apache.hadoop.record.meta.RecordTypeInfo _rio_recTypeInfo;
  private static org.apache.hadoop.record.meta.RecordTypeInfo _rio_rtiFilter;
  private static int[] _rio_rtiFilterFields;
  static {
    _rio_recTypeInfo = new org.apache.hadoop.record.meta.RecordTypeInfo("RecRecord1");
    _rio_recTypeInfo.addField("boolVal", org.apache.hadoop.record.meta.TypeID.BoolTypeID);
    _rio_recTypeInfo.addField("byteVal", org.apache.hadoop.record.meta.TypeID.ByteTypeID);
    _rio_recTypeInfo.addField("intVal", org.apache.hadoop.record.meta.TypeID.IntTypeID);
    _rio_recTypeInfo.addField("longVal", org.apache.hadoop.record.meta.TypeID.LongTypeID);
    _rio_recTypeInfo.addField("floatVal", org.apache.hadoop.record.meta.TypeID.FloatTypeID);
    _rio_recTypeInfo.addField("doubleVal", org.apache.hadoop.record.meta.TypeID.DoubleTypeID);
    _rio_recTypeInfo.addField("stringVal", org.apache.hadoop.record.meta.TypeID.StringTypeID);
    _rio_recTypeInfo.addField("bufferVal", org.apache.hadoop.record.meta.TypeID.BufferTypeID);
    _rio_recTypeInfo.addField("vectorVal", new org.apache.hadoop.record.meta.VectorTypeID(org.apache.hadoop.record.meta.TypeID.StringTypeID));
    _rio_recTypeInfo.addField("mapVal", new org.apache.hadoop.record.meta.MapTypeID(org.apache.hadoop.record.meta.TypeID.StringTypeID, org.apache.hadoop.record.meta.TypeID.StringTypeID));
    _rio_recTypeInfo.addField("recordVal", new org.apache.hadoop.record.meta.StructTypeID(org.apache.hadoop.record.RecRecord0.getTypeInfo()));
  }
  
  private boolean boolVal;
  private byte byteVal;
  private int intVal;
  private long longVal;
  private float floatVal;
  private double doubleVal;
  private String stringVal;
  private org.apache.hadoop.record.Buffer bufferVal;
  private java.util.ArrayList<String> vectorVal;
  private java.util.TreeMap<String,String> mapVal;
  private org.apache.hadoop.record.RecRecord0 recordVal;
  public RecRecord1() { }
  public RecRecord1(
    final boolean boolVal,
    final byte byteVal,
    final int intVal,
    final long longVal,
    final float floatVal,
    final double doubleVal,
    final String stringVal,
    final org.apache.hadoop.record.Buffer bufferVal,
    final java.util.ArrayList<String> vectorVal,
    final java.util.TreeMap<String,String> mapVal,
    final org.apache.hadoop.record.RecRecord0 recordVal) {
    this.boolVal = boolVal;
    this.byteVal = byteVal;
    this.intVal = intVal;
    this.longVal = longVal;
    this.floatVal = floatVal;
    this.doubleVal = doubleVal;
    this.stringVal = stringVal;
    this.bufferVal = bufferVal;
    this.vectorVal = vectorVal;
    this.mapVal = mapVal;
    this.recordVal = recordVal;
  }
  public static org.apache.hadoop.record.meta.RecordTypeInfo getTypeInfo() {
    return _rio_recTypeInfo;
  }
  public static void setTypeFilter(org.apache.hadoop.record.meta.RecordTypeInfo rti) {
    if (null == rti) return;
    _rio_rtiFilter = rti;
    _rio_rtiFilterFields = null;
    org.apache.hadoop.record.RecRecord0.setTypeFilter(rti.getNestedStructTypeInfo("RecRecord0"));
  }
  private static void setupRtiFields()
  {
    if (null == _rio_rtiFilter) return;
    // we may already have done this
    if (null != _rio_rtiFilterFields) return;
    int _rio_i, _rio_j;
    _rio_rtiFilterFields = new int [_rio_rtiFilter.getFieldTypeInfos().size()];
    for (_rio_i=0; _rio_i<_rio_rtiFilterFields.length; _rio_i++) {
      _rio_rtiFilterFields[_rio_i] = 0;
    }
    java.util.Iterator<org.apache.hadoop.record.meta.FieldTypeInfo> _rio_itFilter = _rio_rtiFilter.getFieldTypeInfos().iterator();
    _rio_i=0;
    while (_rio_itFilter.hasNext()) {
      org.apache.hadoop.record.meta.FieldTypeInfo _rio_tInfoFilter = _rio_itFilter.next();
      java.util.Iterator<org.apache.hadoop.record.meta.FieldTypeInfo> _rio_it = _rio_recTypeInfo.getFieldTypeInfos().iterator();
      _rio_j=1;
      while (_rio_it.hasNext()) {
        org.apache.hadoop.record.meta.FieldTypeInfo _rio_tInfo = _rio_it.next();
        if (_rio_tInfo.equals(_rio_tInfoFilter)) {
          _rio_rtiFilterFields[_rio_i] = _rio_j;
          break;
        }
        _rio_j++;
      }
      _rio_i++;
    }
  }
  public boolean getBoolVal() {
    return boolVal;
  }
  public void setBoolVal(final boolean boolVal) {
    this.boolVal=boolVal;
  }
  public byte getByteVal() {
    return byteVal;
  }
  public void setByteVal(final byte byteVal) {
    this.byteVal=byteVal;
  }
  public int getIntVal() {
    return intVal;
  }
  public void setIntVal(final int intVal) {
    this.intVal=intVal;
  }
  public long getLongVal() {
    return longVal;
  }
  public void setLongVal(final long longVal) {
    this.longVal=longVal;
  }
  public float getFloatVal() {
    return floatVal;
  }
  public void setFloatVal(final float floatVal) {
    this.floatVal=floatVal;
  }
  public double getDoubleVal() {
    return doubleVal;
  }
  public void setDoubleVal(final double doubleVal) {
    this.doubleVal=doubleVal;
  }
  public String getStringVal() {
    return stringVal;
  }
  public void setStringVal(final String stringVal) {
    this.stringVal=stringVal;
  }
  public org.apache.hadoop.record.Buffer getBufferVal() {
    return bufferVal;
  }
  public void setBufferVal(final org.apache.hadoop.record.Buffer bufferVal) {
    this.bufferVal=bufferVal;
  }
  public java.util.ArrayList<String> getVectorVal() {
    return vectorVal;
  }
  public void setVectorVal(final java.util.ArrayList<String> vectorVal) {
    this.vectorVal=vectorVal;
  }
  public java.util.TreeMap<String,String> getMapVal() {
    return mapVal;
  }
  public void setMapVal(final java.util.TreeMap<String,String> mapVal) {
    this.mapVal=mapVal;
  }
  public org.apache.hadoop.record.RecRecord0 getRecordVal() {
    return recordVal;
  }
  public void setRecordVal(final org.apache.hadoop.record.RecRecord0 recordVal) {
    this.recordVal=recordVal;
  }
  public void serialize(final org.apache.hadoop.record.RecordOutput _rio_a, final String _rio_tag)
  throws java.io.IOException {
    _rio_a.startRecord(this,_rio_tag);
    _rio_a.writeBool(boolVal,"boolVal");
    _rio_a.writeByte(byteVal,"byteVal");
    _rio_a.writeInt(intVal,"intVal");
    _rio_a.writeLong(longVal,"longVal");
    _rio_a.writeFloat(floatVal,"floatVal");
    _rio_a.writeDouble(doubleVal,"doubleVal");
    _rio_a.writeString(stringVal,"stringVal");
    _rio_a.writeBuffer(bufferVal,"bufferVal");
    {
      _rio_a.startVector(vectorVal,"vectorVal");
      int _rio_len1 = vectorVal.size();
      for(int _rio_vidx1 = 0; _rio_vidx1<_rio_len1; _rio_vidx1++) {
        String _rio_e1 = vectorVal.get(_rio_vidx1);
        _rio_a.writeString(_rio_e1,"_rio_e1");
      }
      _rio_a.endVector(vectorVal,"vectorVal");
    }
    {
      _rio_a.startMap(mapVal,"mapVal");
      java.util.Set<java.util.Map.Entry<String,String>> _rio_es1 = mapVal.entrySet();
      for(java.util.Iterator<java.util.Map.Entry<String,String>> _rio_midx1 = _rio_es1.iterator(); _rio_midx1.hasNext();) {
        java.util.Map.Entry<String,String> _rio_me1 = _rio_midx1.next();
        String _rio_k1 = _rio_me1.getKey();
        String _rio_v1 = _rio_me1.getValue();
        _rio_a.writeString(_rio_k1,"_rio_k1");
        _rio_a.writeString(_rio_v1,"_rio_v1");
      }
      _rio_a.endMap(mapVal,"mapVal");
    }
    recordVal.serialize(_rio_a,"recordVal");
    _rio_a.endRecord(this,_rio_tag);
  }
  private void deserializeWithoutFilter(final org.apache.hadoop.record.RecordInput _rio_a, final String _rio_tag)
  throws java.io.IOException {
    _rio_a.startRecord(_rio_tag);
    boolVal=_rio_a.readBool("boolVal");
    byteVal=_rio_a.readByte("byteVal");
    intVal=_rio_a.readInt("intVal");
    longVal=_rio_a.readLong("longVal");
    floatVal=_rio_a.readFloat("floatVal");
    doubleVal=_rio_a.readDouble("doubleVal");
    stringVal=_rio_a.readString("stringVal");
    bufferVal=_rio_a.readBuffer("bufferVal");
    {
      org.apache.hadoop.record.Index _rio_vidx1 = _rio_a.startVector("vectorVal");
      vectorVal=new java.util.ArrayList<String>();
      for (; !_rio_vidx1.done(); _rio_vidx1.incr()) {
        String _rio_e1;
        _rio_e1=_rio_a.readString("_rio_e1");
        vectorVal.add(_rio_e1);
      }
      _rio_a.endVector("vectorVal");
    }
    {
      org.apache.hadoop.record.Index _rio_midx1 = _rio_a.startMap("mapVal");
      mapVal=new java.util.TreeMap<String,String>();
      for (; !_rio_midx1.done(); _rio_midx1.incr()) {
        String _rio_k1;
        _rio_k1=_rio_a.readString("_rio_k1");
        String _rio_v1;
        _rio_v1=_rio_a.readString("_rio_v1");
        mapVal.put(_rio_k1,_rio_v1);
      }
      _rio_a.endMap("mapVal");
    }
    recordVal= new org.apache.hadoop.record.RecRecord0();
    recordVal.deserialize(_rio_a,"recordVal");
    _rio_a.endRecord(_rio_tag);
  }
  public void deserialize(final org.apache.hadoop.record.RecordInput _rio_a, final String _rio_tag)
  throws java.io.IOException {
    if (null == _rio_rtiFilter) {
      deserializeWithoutFilter(_rio_a, _rio_tag);
      return;
    }
    // if we're here, we need to read based on version info
    _rio_a.startRecord(_rio_tag);
    setupRtiFields();
    for (int _rio_i=0; _rio_i<_rio_rtiFilter.getFieldTypeInfos().size(); _rio_i++) {
      if (1 == _rio_rtiFilterFields[_rio_i]) {
        boolVal=_rio_a.readBool("boolVal");
      }
      else if (2 == _rio_rtiFilterFields[_rio_i]) {
        byteVal=_rio_a.readByte("byteVal");
      }
      else if (3 == _rio_rtiFilterFields[_rio_i]) {
        intVal=_rio_a.readInt("intVal");
      }
      else if (4 == _rio_rtiFilterFields[_rio_i]) {
        longVal=_rio_a.readLong("longVal");
      }
      else if (5 == _rio_rtiFilterFields[_rio_i]) {
        floatVal=_rio_a.readFloat("floatVal");
      }
      else if (6 == _rio_rtiFilterFields[_rio_i]) {
        doubleVal=_rio_a.readDouble("doubleVal");
      }
      else if (7 == _rio_rtiFilterFields[_rio_i]) {
        stringVal=_rio_a.readString("stringVal");
      }
      else if (8 == _rio_rtiFilterFields[_rio_i]) {
        bufferVal=_rio_a.readBuffer("bufferVal");
      }
      else if (9 == _rio_rtiFilterFields[_rio_i]) {
        {
          org.apache.hadoop.record.Index _rio_vidx1 = _rio_a.startVector("vectorVal");
          vectorVal=new java.util.ArrayList<String>();
          for (; !_rio_vidx1.done(); _rio_vidx1.incr()) {
            String _rio_e1;
            _rio_e1=_rio_a.readString("_rio_e1");
            vectorVal.add(_rio_e1);
          }
          _rio_a.endVector("vectorVal");
        }
      }
      else if (10 == _rio_rtiFilterFields[_rio_i]) {
        {
          org.apache.hadoop.record.Index _rio_midx1 = _rio_a.startMap("mapVal");
          mapVal=new java.util.TreeMap<String,String>();
          for (; !_rio_midx1.done(); _rio_midx1.incr()) {
            String _rio_k1;
            _rio_k1=_rio_a.readString("_rio_k1");
            String _rio_v1;
            _rio_v1=_rio_a.readString("_rio_v1");
            mapVal.put(_rio_k1,_rio_v1);
          }
          _rio_a.endMap("mapVal");
        }
      }
      else if (11 == _rio_rtiFilterFields[_rio_i]) {
        recordVal= new org.apache.hadoop.record.RecRecord0();
        recordVal.deserialize(_rio_a,"recordVal");
      }
      else {
        java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo> typeInfos = (java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo>)(_rio_rtiFilter.getFieldTypeInfos());
        org.apache.hadoop.record.meta.Utils.skip(_rio_a, typeInfos.get(_rio_i).getFieldID(), typeInfos.get(_rio_i).getTypeID());
      }
    }
    _rio_a.endRecord(_rio_tag);
  }
  public int compareTo (final Object _rio_peer_) throws ClassCastException {
    if (!(_rio_peer_ instanceof RecRecord1)) {
      throw new ClassCastException("Comparing different types of records.");
    }
    RecRecord1 _rio_peer = (RecRecord1) _rio_peer_;
    int _rio_ret = 0;
    _rio_ret = (boolVal == _rio_peer.boolVal)? 0 : (boolVal?1:-1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (byteVal == _rio_peer.byteVal)? 0 :((byteVal<_rio_peer.byteVal)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (intVal == _rio_peer.intVal)? 0 :((intVal<_rio_peer.intVal)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (longVal == _rio_peer.longVal)? 0 :((longVal<_rio_peer.longVal)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (floatVal == _rio_peer.floatVal)? 0 :((floatVal<_rio_peer.floatVal)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (doubleVal == _rio_peer.doubleVal)? 0 :((doubleVal<_rio_peer.doubleVal)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = stringVal.compareTo(_rio_peer.stringVal);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = bufferVal.compareTo(_rio_peer.bufferVal);
    if (_rio_ret != 0) return _rio_ret;
    {
      int _rio_len11 = vectorVal.size();
      int _rio_len21 = _rio_peer.vectorVal.size();
      for(int _rio_vidx1 = 0; _rio_vidx1<_rio_len11 && _rio_vidx1<_rio_len21; _rio_vidx1++) {
        String _rio_e11 = vectorVal.get(_rio_vidx1);
        String _rio_e21 = _rio_peer.vectorVal.get(_rio_vidx1);
        _rio_ret = _rio_e11.compareTo(_rio_e21);
        if (_rio_ret != 0) { return _rio_ret; }
      }
      _rio_ret = (_rio_len11 - _rio_len21);
    }
    if (_rio_ret != 0) return _rio_ret;
    {
      java.util.Set<String> _rio_set10 = mapVal.keySet();
      java.util.Set<String> _rio_set20 = _rio_peer.mapVal.keySet();
      java.util.Iterator<String> _rio_miter10 = _rio_set10.iterator();
      java.util.Iterator<String> _rio_miter20 = _rio_set20.iterator();
      for(; _rio_miter10.hasNext() && _rio_miter20.hasNext();) {
        String _rio_k10 = _rio_miter10.next();
        String _rio_k20 = _rio_miter20.next();
        _rio_ret = _rio_k10.compareTo(_rio_k20);
        if (_rio_ret != 0) { return _rio_ret; }
      }
      _rio_ret = (_rio_set10.size() - _rio_set20.size());
    }
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = recordVal.compareTo(_rio_peer.recordVal);
    if (_rio_ret != 0) return _rio_ret;
    return _rio_ret;
  }
  public boolean equals(final Object _rio_peer_) {
    if (!(_rio_peer_ instanceof RecRecord1)) {
      return false;
    }
    if (_rio_peer_ == this) {
      return true;
    }
    RecRecord1 _rio_peer = (RecRecord1) _rio_peer_;
    boolean _rio_ret = false;
    _rio_ret = (boolVal==_rio_peer.boolVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (byteVal==_rio_peer.byteVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (intVal==_rio_peer.intVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (longVal==_rio_peer.longVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (floatVal==_rio_peer.floatVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (doubleVal==_rio_peer.doubleVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = stringVal.equals(_rio_peer.stringVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = bufferVal.equals(_rio_peer.bufferVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = vectorVal.equals(_rio_peer.vectorVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = mapVal.equals(_rio_peer.mapVal);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = recordVal.equals(_rio_peer.recordVal);
    if (!_rio_ret) return _rio_ret;
    return _rio_ret;
  }
  public Object clone() throws CloneNotSupportedException {
    RecRecord1 _rio_other = new RecRecord1();
    _rio_other.boolVal = this.boolVal;
    _rio_other.byteVal = this.byteVal;
    _rio_other.intVal = this.intVal;
    _rio_other.longVal = this.longVal;
    _rio_other.floatVal = this.floatVal;
    _rio_other.doubleVal = this.doubleVal;
    _rio_other.stringVal = this.stringVal;
    _rio_other.bufferVal = (org.apache.hadoop.record.Buffer) this.bufferVal.clone();
    _rio_other.vectorVal = (java.util.ArrayList<String>) this.vectorVal.clone();
    _rio_other.mapVal = (java.util.TreeMap<String,String>) this.mapVal.clone();
    _rio_other.recordVal = (org.apache.hadoop.record.RecRecord0) this.recordVal.clone();
    return _rio_other;
  }
  public int hashCode() {
    int _rio_result = 17;
    int _rio_ret;
    _rio_ret = (boolVal)?0:1;
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = (int)byteVal;
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = (int)intVal;
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = (int) (longVal^(longVal>>>32));
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = Float.floatToIntBits(floatVal);
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = (int)(Double.doubleToLongBits(doubleVal)^(Double.doubleToLongBits(doubleVal)>>>32));
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = stringVal.hashCode();
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = bufferVal.hashCode();
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = vectorVal.hashCode();
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = mapVal.hashCode();
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = recordVal.hashCode();
    _rio_result = 37*_rio_result + _rio_ret;
    return _rio_result;
  }
  public static String signature() {
    return "LRecRecord1(zbilfdsB[s]{ss}LRecRecord0(s))";
  }
  public static class Comparator extends org.apache.hadoop.record.RecordComparator {
    public Comparator() {
      super(RecRecord1.class);
    }
    static public int slurpRaw(byte[] b, int s, int l) {
      try {
        int os = s;
        {
          if (l<1) {
            throw new java.io.IOException("Boolean is exactly 1 byte. Provided buffer is smaller.");
          }
          s++; l--;
        }
        {
          if (l<1) {
            throw new java.io.IOException("Byte is exactly 1 byte. Provided buffer is smaller.");
          }
          s++; l--;
        }
        {
          int i = org.apache.hadoop.record.Utils.readVInt(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s+=z; l-=z;
        }
        {
          long i = org.apache.hadoop.record.Utils.readVLong(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s+=z; l-=z;
        }
        {
          if (l<4) {
            throw new java.io.IOException("Float is exactly 4 bytes. Provided buffer is smaller.");
          }
          s+=4; l-=4;
        }
        {
          if (l<8) {
            throw new java.io.IOException("Double is exactly 8 bytes. Provided buffer is smaller.");
          }
          s+=8; l-=8;
        }
        {
          int i = org.apache.hadoop.record.Utils.readVInt(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s+=(z+i); l-= (z+i);
        }
        {
          int i = org.apache.hadoop.record.Utils.readVInt(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s += z+i; l -= (z+i);
        }
        {
          int vi1 = org.apache.hadoop.record.Utils.readVInt(b, s);
          int vz1 = org.apache.hadoop.record.Utils.getVIntSize(vi1);
          s+=vz1; l-=vz1;
          for (int vidx1 = 0; vidx1 < vi1; vidx1++){
            int i = org.apache.hadoop.record.Utils.readVInt(b, s);
            int z = org.apache.hadoop.record.Utils.getVIntSize(i);
            s+=(z+i); l-= (z+i);
          }
        }
        {
          int mi1 = org.apache.hadoop.record.Utils.readVInt(b, s);
          int mz1 = org.apache.hadoop.record.Utils.getVIntSize(mi1);
          s+=mz1; l-=mz1;
          for (int midx1 = 0; midx1 < mi1; midx1++) {{
              int i = org.apache.hadoop.record.Utils.readVInt(b, s);
              int z = org.apache.hadoop.record.Utils.getVIntSize(i);
              s+=(z+i); l-= (z+i);
            }
            {
              int i = org.apache.hadoop.record.Utils.readVInt(b, s);
              int z = org.apache.hadoop.record.Utils.getVIntSize(i);
              s+=(z+i); l-= (z+i);
            }
          }
        }
        {
          int r = org.apache.hadoop.record.RecRecord0.Comparator.slurpRaw(b,s,l);
          s+=r; l-=r;
        }
        return (os - s);
      } catch(java.io.IOException e) {
        throw new RuntimeException(e);
      }
    }
    static public int compareRaw(byte[] b1, int s1, int l1,
                                   byte[] b2, int s2, int l2) {
      try {
        int os1 = s1;
        {
          if (l1<1 || l2<1) {
            throw new java.io.IOException("Boolean is exactly 1 byte. Provided buffer is smaller.");
          }
          if (b1[s1] != b2[s2]) {
            return (b1[s1]<b2[s2])? -1 : 0;
          }
          s1++; s2++; l1--; l2--;
        }
        {
          if (l1<1 || l2<1) {
            throw new java.io.IOException("Byte is exactly 1 byte. Provided buffer is smaller.");
          }
          if (b1[s1] != b2[s2]) {
            return (b1[s1]<b2[s2])?-1:0;
          }
          s1++; s2++; l1--; l2--;
        }
        {
          int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          if (i1 != i2) {
            return ((i1-i2) < 0) ? -1 : 0;
          }
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
        }
        {
          long i1 = org.apache.hadoop.record.Utils.readVLong(b1, s1);
          long i2 = org.apache.hadoop.record.Utils.readVLong(b2, s2);
          if (i1 != i2) {
            return ((i1-i2) < 0) ? -1 : 0;
          }
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
        }
        {
          if (l1<4 || l2<4) {
            throw new java.io.IOException("Float is exactly 4 bytes. Provided buffer is smaller.");
          }
          float f1 = org.apache.hadoop.record.Utils.readFloat(b1, s1);
          float f2 = org.apache.hadoop.record.Utils.readFloat(b2, s2);
          if (f1 != f2) {
            return ((f1-f2) < 0) ? -1 : 0;
          }
          s1+=4; s2+=4; l1-=4; l2-=4;
        }
        {
          if (l1<8 || l2<8) {
            throw new java.io.IOException("Double is exactly 8 bytes. Provided buffer is smaller.");
          }
          double d1 = org.apache.hadoop.record.Utils.readDouble(b1, s1);
          double d2 = org.apache.hadoop.record.Utils.readDouble(b2, s2);
          if (d1 != d2) {
            return ((d1-d2) < 0) ? -1 : 0;
          }
          s1+=8; s2+=8; l1-=8; l2-=8;
        }
        {
          int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
          int r1 = org.apache.hadoop.record.Utils.compareBytes(b1,s1,i1,b2,s2,i2);
          if (r1 != 0) { return (r1<0)?-1:0; }
          s1+=i1; s2+=i2; l1-=i1; l1-=i2;
        }
        {
          int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
          int r1 = org.apache.hadoop.record.Utils.compareBytes(b1,s1,i1,b2,s2,i2);
          if (r1 != 0) { return (r1<0)?-1:0; }
          s1+=i1; s2+=i2; l1-=i1; l1-=i2;
        }
        {
          int vi11 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int vi21 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          int vz11 = org.apache.hadoop.record.Utils.getVIntSize(vi11);
          int vz21 = org.apache.hadoop.record.Utils.getVIntSize(vi21);
          s1+=vz11; s2+=vz21; l1-=vz11; l2-=vz21;
          for (int vidx1 = 0; vidx1 < vi11 && vidx1 < vi21; vidx1++){
            int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
            int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
            int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
            int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
            s1+=z1; s2+=z2; l1-=z1; l2-=z2;
            int r1 = org.apache.hadoop.record.Utils.compareBytes(b1,s1,i1,b2,s2,i2);
            if (r1 != 0) { return (r1<0)?-1:0; }
            s1+=i1; s2+=i2; l1-=i1; l1-=i2;
          }
          if (vi11 != vi21) { return (vi11<vi21)?-1:0; }
        }
        {
          int mi11 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int mi21 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          int mz11 = org.apache.hadoop.record.Utils.getVIntSize(mi11);
          int mz21 = org.apache.hadoop.record.Utils.getVIntSize(mi21);
          s1+=mz11; s2+=mz21; l1-=mz11; l2-=mz21;
          for (int midx1 = 0; midx1 < mi11 && midx1 < mi21; midx1++) {{
              int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
              int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
              int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
              int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
              s1+=z1; s2+=z2; l1-=z1; l2-=z2;
              int r1 = org.apache.hadoop.record.Utils.compareBytes(b1,s1,i1,b2,s2,i2);
              if (r1 != 0) { return (r1<0)?-1:0; }
              s1+=i1; s2+=i2; l1-=i1; l1-=i2;
            }
            {
              int i = org.apache.hadoop.record.Utils.readVInt(b1, s1);
              int z = org.apache.hadoop.record.Utils.getVIntSize(i);
              s1+=(z+i); l1-= (z+i);
            }
            {
              int i = org.apache.hadoop.record.Utils.readVInt(b2, s2);
              int z = org.apache.hadoop.record.Utils.getVIntSize(i);
              s2+=(z+i); l2-= (z+i);
            }
          }
          if (mi11 != mi21) { return (mi11<mi21)?-1:0; }
        }
        {
          int r1 = org.apache.hadoop.record.RecRecord0.Comparator.compareRaw(b1,s1,l1,b2,s2,l2);
          if (r1 <= 0) { return r1; }
          s1+=r1; s2+=r1; l1-=r1; l2-=r1;
        }
        return (os1 - s1);
      } catch(java.io.IOException e) {
        throw new RuntimeException(e);
      }
    }
    public int compare(byte[] b1, int s1, int l1,
                         byte[] b2, int s2, int l2) {
      int ret = compareRaw(b1,s1,l1,b2,s2,l2);
      return (ret == -1)? -1 : ((ret==0)? 1 : 0);}
  }
  
  static {
    org.apache.hadoop.record.RecordComparator.define(RecRecord1.class, new Comparator());
  }
}
