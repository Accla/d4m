<?xml version="1.0"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
  
  <header>
    <title>Capacity Scheduler</title>
  </header>
  
  <body>
  
    <section>
      <title>Purpose</title>
      
      <p>This document describes the Capacity Scheduler, a pluggable Map/Reduce scheduler for Hadoop which provides a way to share large clusters.</p>
    </section>
    
    <section>
      <title>Features</title>
      
      <p>The Capacity Scheduler supports the following features:</p> 
      <ul>
        <li>
          Support for multiple queues, where a job is submitted to a queue.
        </li>
        <li>
          Queues are guaranteed a fraction of the capacity of the grid (their 
 	      'guaranteed capacity') in the sense that a certain capacity of 
 	      resources will be at their disposal. All jobs submitted to the a 
 	      queue will have access to the capacity guaranteed to the queue.
        </li>
        <li>
          Free resources can be allocated to any queue beyond its guaranteed 
          capacity. These excess allocated resources can be reclaimed and made 
          available to another queue in order to meet its capacity guarantee.
        </li>
        <li>
          The scheduler guarantees that excess resources taken from a queue 
          will be restored to it within N minutes of its need for them.
        </li>
        <li>
          Queues optionally support job priorities (disabled by default).
        </li>
        <li>
          Within a queue, jobs with higher priority will have access to the 
          queue's resources before jobs with lower priority. However, once a 
          job is running, it will not be preempted for a higher priority job.
        </li>
        <li>
          In order to prevent one or more users from monopolizing its 
          resources, each queue enforces a limit on the percentage of 
          resources allocated to a user at any given time, if there is 
          competition for them.  
        </li>
        <li>
          Support for memory-intensive jobs, wherein a job can optionally 
          specify higher memory-requirements than the default, and the tasks 
          of the job will only be run on TaskTrackers that have enough memory 
          to spare.
        </li>
      </ul>
    </section>
    
    <section>
      <title>Picking a task to run</title>
      
      <p>Note that many of these steps can be, and will be, enhanced over time
      to provide better algorithms.</p>
      
      <p>Whenever a TaskTracker is free, the Capacity Scheduler first picks a 
      queue that needs to reclaim any resources the earliest (this is a queue
      whose resources were temporarily being used by some other queue and now
      needs access to those resources). If no such queue is found, it then picks
      a queue which has most free space (whose ratio of # of running slots to 
      guaranteed capacity is the lowest).</p>
      
      <p>Once a queue is selected, the scheduler picks a job in the queue. Jobs
      are sorted based on when they're submitted and their priorities (if the 
      queue supports priorities). Jobs are considered in order, and a job is 
      selected if its user is within the user-quota for the queue, i.e., the 
      user is not already using queue resources above his/her limit. The 
      scheduler also makes sure that there is enough free memory in the 
      TaskTracker to tun the job's task, in case the job has special memory
      requirements.</p>
      
      <p>Once a job is selected, the scheduler picks a task to run. This logic 
      to pick a task remains unchanged from earlier versions.</p> 
      
    </section>
    
    <section>
      <title>Reclaiming capacity</title>

	  <p>Periodically, the scheduler determines:</p>
	  <ul>
	    <li>
	      if a queue needs to reclaim capacity. This happens when a queue has
	      at least one task pending and part of its guaranteed capacity is 
	      being used by some other queue. If this happens, the scheduler notes
	      the amount of resources it needs to reclaim for this queue within a 
	      specified period of time (the reclaim time). 
	    </li>
	    <li>
	      if a queue has not received all the resources it needed to reclaim,
	      and its reclaim time is about to expire. In this case, the scheduler
	      needs to kill tasks from queues running over capacity. This it does
	      by killing the tasks that started the latest.
	    </li>
	  </ul>   

    </section>

    <section>
      <title>Installation</title>
      
        <p>The capacity scheduler is available as a JAR file in the Hadoop
        tarball under the <em>contrib/capacity-scheduler</em> directory. The name of 
        the JAR file would be on the lines of hadoop-*-capacity-scheduler.jar.</p>
        <p>You can also build the scheduler from source by executing
        <em>ant package</em>, in which case it would be available under
        <em>build/contrib/capacity-scheduler</em>.</p>
        <p>To run the capacity scheduler in your Hadoop installation, you need 
        to put it on the <em>CLASSPATH</em>. The easiest way is to copy the 
        <code>hadoop-*-capacity-scheduler.jar</code> from 
        to <code>HADOOP_HOME/lib</code>. Alternatively, you can modify 
        <em>HADOOP_CLASSPATH</em> to include this jar, in 
        <code>conf/hadoop-env.sh</code>.</p>
    </section>

    <section>
      <title>Configuration</title>

      <section>
        <title>Using the capacity scheduler</title>
        <p>
          To make the Hadoop framework use the capacity scheduler, set up
          the following property in the site configuration:</p>
          <table>
            <tr>
              <td>Property</td>
              <td>Value</td>
            </tr>
            <tr>
              <td>mapred.jobtracker.taskScheduler</td>
              <td>org.apache.hadoop.mapred.CapacityTaskScheduler</td>
            </tr>
          </table>
      </section>

      <section>
        <title>Setting up queues</title>
        <p>
          You can define multiple queues to which users can submit jobs with
          the capacity scheduler. To define multiple queues, you should edit
          the site configuration for Hadoop and modify the
          <em>mapred.queue.names</em> property.
        </p>
        <p>
          You can also configure ACLs for controlling which users or groups
          have access to the queues.
        </p>
        <p>
          For more details, refer to
          <a href="cluster_setup.html#Configuring+the+Hadoop+Daemons">Cluster 
          Setup</a> documentation.
        </p>
      </section>
  
      <section>
        <title>Configuring properties for queues</title>

        <p>The capacity scheduler can be configured with several properties
        for each queue that control the behavior of the scheduler. This
        configuration is in the <em>conf/capacity-scheduler.xml</em>. By
        default, the configuration is set up for one queue, named 
        <em>default</em>.</p>
        <p>To specify a property for a queue that is defined in the site
        configuration, you should use the property name as
        <em>mapred.capacity-scheduler.queue.&lt;queue-name&gt;.&lt;property-name&gt;</em>.
        </p>
        <p>For example, to define the property <em>guaranteed-capacity</em>
        for queue named <em>research</em>, you should specify the property
        name as 
        <em>mapred.capacity-scheduler.queue.research.guaranteed-capacity</em>.
        </p>

        <p>The properties defined for queues and their descriptions are
        listed in the table below:</p>

        <table>
          <tr><th>Name</th><th>Description</th></tr>
          <tr><td>mapred.capacity-scheduler.queue.&lt;queue-name&gt;.guaranteed-capacity</td>
          	<td>Percentage of the number of slots in the cluster that are
          	guaranteed to be available for jobs in this queue. 
          	The sum of guaranteed capacities for all queues should be less 
          	than or equal 100.</td>
          </tr>
          <tr><td>mapred.capacity-scheduler.queue.&lt;queue-name&gt;.reclaim-time-limit</td>
          	<td>The amount of time, in seconds, before which resources 
          	distributed to other queues will be reclaimed.</td>
          </tr>
          <tr><td>mapred.capacity-scheduler.queue.&lt;queue-name&gt;.supports-priority</td>
          	<td>If true, priorities of jobs will be taken into account in scheduling 
          	decisions.</td>
          </tr>
          <tr><td>mapred.capacity-scheduler.queue.&lt;queue-name&gt;.minimum-user-limit-percent</td>
          	<td>Each queue enforces a limit on the percentage of resources 
          	allocated to a user at any given time, if there is competition 
          	for them. This user limit can vary between a minimum and maximum 
          	value. The former depends on the number of users who have submitted
          	jobs, and the latter is set to this property value. For example, 
          	suppose the value of this property is 25. If two users have 
          	submitted jobs to a queue, no single user can use more than 50% 
          	of the queue resources. If a third user submits a job, no single 
          	user can use more than 33% of the queue resources. With 4 or more 
          	users, no user can use more than 25% of the queue's resources. A 
          	value of 100 implies no user limits are imposed.</td>
          </tr>
        </table>
      </section>

      <section>
        <title>Reviewing the configuration of the capacity scheduler</title>
        <p>
          Once the installation and configuration is completed, you can review
          it after starting the Map/Reduce cluster from the admin UI.
        </p>
        <ul>
          <li>Start the Map/Reduce cluster as usual.</li>
          <li>Open the JobTracker web UI.</li>
          <li>The queues you have configured should be listed under the <em>Scheduling
              Information</em> section of the page.</li>
          <li>The properties for the queues should be visible in the <em>Scheduling
              Information</em> column against each queue.</li>
        </ul>
      </section>
    </section>
  </body>
  
</document>
